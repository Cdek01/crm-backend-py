# # # # test_aliases.py
# # # import requests
# # # import json
# # # import time
# # #
# # # # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# # # BASE_URL = "http://127.0.0.1:8005"
# # #
# # # # BASE_URL = "http://89.111.169.47:8005"
# # #
# # #
# # # # –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ
# # # CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# # # # -----------------
# # #
# # # UNIQUE_ID = int(time.time())
# # #
# # #
# # # def print_status(ok, message):
# # #     """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
# # #     if ok:
# # #         print(f"‚úÖ [SUCCESS] {message}")
# # #     else:
# # #         print(f"‚ùå [FAILURE] {message}")
# # #         # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –æ—à–∏–±–∫–µ
# # #         exit(1)
# # #
# # #
# # # def run_aliases_test():
# # #     """
# # #     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–ª—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤.
# # #     """
# # #     token = None
# # #     headers = {}
# # #
# # #     try:
# # #         # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
# # #         print("-" * 50)
# # #         print("1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
# # #         user_email = f"alias_tester_{UNIQUE_ID}@example.com"
# # #         password = "password123"
# # #         reg_payload = {"email": user_email, "password": password, "registration_token": CORRECT_REGISTRATION_TOKEN}
# # #         requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
# # #
# # #         auth_payload_form = {'username': user_email, 'password': password}
# # #         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
# # #         auth_response.raise_for_status()
# # #         token = auth_response.json()['access_token']
# # #         headers = {'Authorization': f'Bearer {token}'}
# # #         print_status(True, "–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω.")
# # #
# # #         # --- –®–ê–ì 2: –ü–û–î–ì–û–¢–û–í–ö–ê –°–†–ï–î–´ (–°–û–ó–î–ê–ù–ò–ï –ö–ê–°–¢–û–ú–ù–û–ô –¢–ê–ë–õ–ò–¶–´) ---
# # #         print("-" * 50)
# # #         print("2. –ü–û–î–ì–û–¢–û–í–ö–ê –°–†–ï–î–´")
# # #         # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–∞–±–ª–∏—Ü—É "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã", —á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å
# # #         entity_payload = {"name": "candidates", "display_name": "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã"}
# # #         response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=entity_payload)
# # #         response.raise_for_status()
# # #         entity_type_id = response.json()['id']
# # #         # –°–æ–∑–¥–∞–µ–º –≤ –Ω–µ–π –∫–æ–ª–æ–Ω–∫—É
# # #         attr_payload = {"name": "expected_salary", "display_name": "–û–∂–∏–¥–∞–µ–º–∞—è –ó–ü", "value_type": "integer"}
# # #         response = requests.post(f"{BASE_URL}/api/meta/entity-types/{entity_type_id}/attributes", headers=headers,
# # #                                  json=attr_payload)
# # #         response.raise_for_status()
# # #         print_status(True, "–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ 'candidates' —Å –∫–æ–ª–æ–Ω–∫–æ–π 'expected_salary'.")
# # #
# # #         # --- –®–ê–ì 3: –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
# # #         print("-" * 50)
# # #         print("3. –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í (POST /api/aliases/)")
# # #
# # #         # 3.1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'leads'
# # #         alias1_payload = {
# # #             "table_name": "leads",
# # #             "attribute_name": "organization_name",
# # #             "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–º–ø–∞–Ω–∏–∏-–ö–ª–∏–µ–Ω—Ç–∞"
# # #         }
# # #         response1 = requests.post(f"{BASE_URL}/api/aliases/", headers=headers, json=alias1_payload)
# # #         response1.raise_for_status()
# # #         print_status(True, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads.organization_name'")
# # #
# # #         # 3.2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'candidates'
# # #         alias2_payload = {
# # #             "table_name": "candidates",
# # #             "attribute_name": "expected_salary",
# # #             "display_name": "–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è (—Ä—É–±.)"
# # #         }
# # #         response2 = requests.post(f"{BASE_URL}/api/aliases/", headers=headers, json=alias2_payload)
# # #         response2.raise_for_status()
# # #         print_status(True, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'candidates.expected_salary'")
# # #
# # #         # --- –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
# # #         print("-" * 50)
# # #         print("4. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –í–°–ï–• –ü–°–ï–í–î–û–ù–ò–ú–û–í (GET /api/aliases/)")
# # #
# # #         get_response = requests.get(f"{BASE_URL}/api/aliases/", headers=headers)
# # #         get_response.raise_for_status()
# # #         all_aliases = get_response.json()
# # #
# # #         print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(all_aliases, indent=2, ensure_ascii=False))
# # #
# # #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ –Ω–∞ –º–µ—Å—Ç–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
# # #         expected_aliases_count = 2
# # #         print_status(
# # #             len(all_aliases) == expected_aliases_count,
# # #             f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_aliases)} —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_aliases_count}."
# # #         )
# # #         print_status(
# # #             all_aliases.get("leads", {}).get("organization_name") == alias1_payload["display_name"],
# # #             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
# # #         )
# # #         print_status(
# # #             all_aliases.get("candidates", {}).get("expected_salary") == alias2_payload["display_name"],
# # #             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'candidates' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
# # #         )
# # #
# # #         # --- –®–ê–ì 5: –£–î–ê–õ–ï–ù–ò–ï (–°–ë–†–û–°) –ü–°–ï–í–î–û–ù–ò–ú–ê ---
# # #         print("-" * 50)
# # #         print("5. –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ü–°–ï–í–î–û–ù–ò–ú–ê (DELETE /api/aliases/{table}/{attr})")
# # #
# # #         # –£–¥–∞–ª—è–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads.organization_name'
# # #         delete_response = requests.delete(f"{BASE_URL}/api/aliases/leads/organization_name", headers=headers)
# # #         print_status(
# # #             delete_response.status_code == 204,
# # #             "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ (—Å—Ç–∞—Ç—É—Å 204)."
# # #         )
# # #
# # #         # –°–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# # #         get_after_delete_response = requests.get(f"{BASE_URL}/api/aliases/", headers=headers)
# # #         aliases_after_delete = get_after_delete_response.json()
# # #
# # #         print("–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", json.dumps(aliases_after_delete, indent=2, ensure_ascii=False))
# # #
# # #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' –∏—Å—á–µ–∑, –∞ –¥–ª—è 'candidates' –æ—Å—Ç–∞–ª—Å—è
# # #         print_status(
# # #             "leads" not in aliases_after_delete,
# # #             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞."
# # #         )
# # #         print_status(
# # #             "candidates" in aliases_after_delete,
# # #             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'candidates' –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ."
# # #         )
# # #
# # #         # --- –®–ê–ì 6: –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ---
# # #         print("-" * 50)
# # #         print("6. –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
# # #
# # #         # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º
# # #         non_existent_delete = requests.delete(f"{BASE_URL}/api/aliases/non_existent_table/non_existent_attr",
# # #                                               headers=headers)
# # #         print_status(
# # #             non_existent_delete.status_code == 404,
# # #             "–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 404 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º."
# # #         )
# # #
# # #         print("-" * 50)
# # #         print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –î–õ–Ø API –ü–°–ï–í–î–û–ù–ò–ú–û–í –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ")
# # #
# # #     except requests.exceptions.HTTPError as e:
# # #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP –Ω–∞ —à–∞–≥–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
# # #         print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {e.request.method} {e.request.url}")
# # #         if e.request.body:
# # #             try:
# # #                 body = json.loads(e.request.body)
# # #                 print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(body, indent=2, ensure_ascii=False)}")
# # #             except:
# # #                 print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e.request.body}")
# # #         print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
# # #         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# # #     except Exception as e:
# # #         print(f"\n‚ùå –ü–†–û–ò–ó–û–®–õ–ê –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê")
# # #         print(f"–û—à–∏–±–∫–∞: {e}")
# # #
# # #
# # # # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç
# # # if __name__ == "__main__":
# # #     run_aliases_test()
# #
# #
# # # test_table_aliases.py
# # import requests
# # import json
# # import time
# #
# # # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# # # BASE_URL = "http://127.0.0.1:8005"
# # BASE_URL = "http://89.111.169.47:8005"  # –ò–ª–∏ http://89.111.169.47:8005, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# #
# # # –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ
# # CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# # # -----------------
# #
# # UNIQUE_ID = int(time.time())
# #
# #
# # def print_status(ok, message):
# #     """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
# #     if ok:
# #         print(f"‚úÖ [SUCCESS] {message}")
# #     else:
# #         print(f"‚ùå [FAILURE] {message}")
# #         exit(1)
# #
# #
# # def run_table_aliases_test():
# #     """
# #     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–ª—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ —Ç–∞–±–ª–∏—Ü.
# #     """
# #     token = None
# #     headers = {}
# #
# #     try:
# #         # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
# #         print("-" * 50)
# #         print("1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
# #         user_email = f"table_alias_tester_{UNIQUE_ID}@example.com"
# #         password = "password123"
# #         reg_payload = {"email": user_email, "password": password, "registration_token": CORRECT_REGISTRATION_TOKEN}
# #         requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
# #
# #         auth_payload_form = {'username': user_email, 'password': password}
# #         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
# #         auth_response.raise_for_status()
# #         token = auth_response.json()['access_token']
# #         headers = {'Authorization': f'Bearer {token}'}
# #         print_status(True, "–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω.")
# #
# #         # --- –®–ê–ì 2: –ü–û–î–ì–û–¢–û–í–ö–ê –°–†–ï–î–´ (–°–û–ó–î–ê–ù–ò–ï –ö–ê–°–¢–û–ú–ù–û–ô –¢–ê–ë–õ–ò–¶–´) ---
# #         print("-" * 50)
# #         print("2. –ü–û–î–ì–û–¢–û–í–ö–ê –°–†–ï–î–´")
# #         entity_payload = {"name": f"custom_projects_{UNIQUE_ID}", "display_name": "–ü—Ä–æ–µ–∫—Ç—ã"}
# #         response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=entity_payload)
# #         response.raise_for_status()
# #         print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ '{entity_payload['name']}'.")
# #
# #         # --- –®–ê–ì 3: –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
# #         print("-" * 50)
# #         print("3. –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í (POST /api/aliases/tables)")
# #
# #         # 3.1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'leads'
# #         alias1_payload = {"table_name": "leads", "display_name": "–í–æ—Ä–æ–Ω–∫–∞ –ü—Ä–æ–¥–∞–∂"}
# #         response1 = requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers, json=alias1_payload)
# #         response1.raise_for_status()
# #         print_status(True, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã 'leads'.")
# #
# #         # 3.2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
# #         alias2_payload = {"table_name": entity_payload['name'], "display_name": "–ù–∞—à–∏ –ü—Ä–æ–µ–∫—Ç—ã"}
# #         response2 = requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers, json=alias2_payload)
# #         response2.raise_for_status()
# #         print_status(True, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{entity_payload['name']}'.")
# #
# #         # --- –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
# #         print("-" * 50)
# #         print("4. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –í–°–ï–• –ü–°–ï–í–î–û–ù–ò–ú–û–í (GET /api/aliases/tables)")
# #
# #         get_response = requests.get(f"{BASE_URL}/api/aliases/tables", headers=headers)
# #         get_response.raise_for_status()
# #         all_aliases = get_response.json()
# #
# #         print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(all_aliases, indent=2, ensure_ascii=False))
# #
# #         print_status(len(all_aliases) == 2, f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_aliases)} –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤, –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å.")
# #         print_status(all_aliases.get("leads") == alias1_payload["display_name"], "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
# #         print_status(all_aliases.get(entity_payload['name']) == alias2_payload["display_name"],
# #                      "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
# #
# #         # --- –®–ê–ì 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–°–ï–í–î–û–ù–ò–ú–ê ---
# #         print("-" * 50)
# #         print("5. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ü–°–ï–í–î–û–ù–ò–ú–ê")
# #
# #         update_payload = {"table_name": "leads", "display_name": "–ù–æ–≤—ã–µ –ó–∞—è–≤–∫–∏"}
# #         update_response = requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers, json=update_payload)
# #         update_response.raise_for_status()
# #
# #         get_after_update = requests.get(f"{BASE_URL}/api/aliases/tables", headers=headers).json()
# #         print_status(
# #             get_after_update.get("leads") == update_payload["display_name"],
# #             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."
# #         )
# #
# #         # --- –®–ê–ì 6: –£–î–ê–õ–ï–ù–ò–ï (–°–ë–†–û–°) –ü–°–ï–í–î–û–ù–ò–ú–ê ---
# #         print("-" * 50)
# #         print("6. –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ü–°–ï–í–î–û–ù–ò–ú–ê (DELETE /api/aliases/tables/{table_name})")
# #
# #         delete_response = requests.delete(f"{BASE_URL}/api/aliases/tables/leads", headers=headers)
# #         print_status(
# #             delete_response.status_code == 204,
# #             "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å 204)."
# #         )
# #
# #         get_after_delete = requests.get(f"{BASE_URL}/api/aliases/tables", headers=headers).json()
# #         print("–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", json.dumps(get_after_delete, indent=2, ensure_ascii=False))
# #
# #         print_status("leads" not in get_after_delete, "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
# #         print_status(entity_payload['name'] in get_after_delete, "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞–ª—Å—è.")
# #
# #         # --- –®–ê–ì 7: –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ---
# #         print("-" * 50)
# #         print("7. –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
# #
# #         non_existent_delete = requests.delete(f"{BASE_URL}/api/aliases/tables/non_existent_table", headers=headers)
# #         print_status(
# #             non_existent_delete.status_code == 404,
# #             "–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª 404 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º."
# #         )
# #
# #         print("-" * 50)
# #         print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –î–õ–Ø –ü–°–ï–í–î–û–ù–ò–ú–û–í –¢–ê–ë–õ–ò–¶ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ")
# #
# #     except requests.exceptions.HTTPError as e:
# #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
# #         print(f"URL: {e.request.method} {e.request.url}")
# #         print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
# #         print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
# #     except Exception as e:
# #         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
# #
# #
# # if __name__ == "__main__":
# #     run_table_aliases_test()
#
#
# # # test_alias_override.py
# # import requests
# # import json
# # import time
# #
# # # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# # # –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ API
# # # BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
# # BASE_URL = "http://89.111.169.47:8005"  # –ò–ª–∏ http://89.111.169.47:8005, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# #
# # # –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ç–æ—Ç –∂–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ
# # CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# # # -----------------
# #
# # # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
# # UNIQUE_ID = int(time.time())
# #
# #
# # def print_status(ok, message):
# #     """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
# #     if ok:
# #         print(f"‚úÖ [SUCCESS] {message}")
# #     else:
# #         print(f"‚ùå [FAILURE] {message}")
# #         # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –æ—à–∏–±–∫–µ
# #         exit(1)
# #
# #
# # def run_test():
# #     """
# #     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
# #     –°–æ–∑–¥–∞–Ω–∏–µ -> –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ -> –ü—Ä–æ–≤–µ—Ä–∫–∞.
# #     """
# #     headers = {}
# #     entity_type_id = None
# #     table_system_name = f"test_projects_{UNIQUE_ID}"
# #     attribute_system_name = "project_budget"
# #
# #     try:
# #         # --- –®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
# #         print("-" * 60)
# #         print("–®–ê–ì 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
# #         user_email = f"alias_override_tester_{UNIQUE_ID}@example.com"
# #         password = "password123"
# #
# #         reg_payload = {"email": user_email, "password": password, "registration_token": CORRECT_REGISTRATION_TOKEN}
# #         reg_response = requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload)
# #         reg_response.raise_for_status()
# #
# #         auth_payload_form = {'username': user_email, 'password': password}
# #         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
# #         auth_response.raise_for_status()
# #
# #         token = auth_response.json()['access_token']
# #         headers = {'Authorization': f'Bearer {token}'}
# #         print_status(True, "–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω.")
# #
# #         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ò–°–•–û–î–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ ---
# #         print("-" * 60)
# #         print("–®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏...")
# #
# #         # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
# #         table_payload = {"name": table_system_name, "display_name": "–ò—Å—Ö–æ–¥–Ω–æ–µ –ò–º—è –¢–∞–±–ª–∏—Ü—ã"}
# #         response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_payload)
# #         response.raise_for_status()
# #         entity_type_id = response.json()['id']
# #         print(f" -> –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_system_name}' —Å ID: {entity_type_id}")
# #
# #         # –°–æ–∑–¥–∞–µ–º –≤ –Ω–µ–π –∫–æ–ª–æ–Ω–∫—É
# #         attr_payload = {"name": attribute_system_name, "display_name": "–ò—Å—Ö–æ–¥–Ω—ã–π –ë—é–¥–∂–µ—Ç", "value_type": "integer"}
# #         response = requests.post(f"{BASE_URL}/api/meta/entity-types/{entity_type_id}/attributes", headers=headers,
# #                                  json=attr_payload)
# #         response.raise_for_status()
# #         print(f" -> –í —Ç–∞–±–ª–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '{attribute_system_name}'")
# #         print_status(True, "–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
# #
# #         # --- –®–ê–ì 3: –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
# #         print("-" * 60)
# #         print("–®–ê–ì 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∏–º–µ–Ω (–ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤)...")
# #
# #         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å
# #         new_table_display_name = "–ü—Ä–æ–µ–∫—Ç—ã (—Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º)"
# #         new_attribute_display_name = "–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ (—Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º)"
# #
# #         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
# #         alias_table_payload = {"table_name": table_system_name, "display_name": new_table_display_name}
# #         response = requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers, json=alias_table_payload)
# #         response.raise_for_status()
# #         print(f" -> –¢–∞–±–ª–∏—Ü–∞ '{table_system_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_table_display_name}'")
# #
# #         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏
# #         alias_attr_payload = {"table_name": table_system_name, "attribute_name": attribute_system_name,
# #                               "display_name": new_attribute_display_name}
# #         response = requests.post(f"{BASE_URL}/api/aliases/", headers=headers, json=alias_attr_payload)
# #         response.raise_for_status()
# #         print(f" -> –ö–æ–ª–æ–Ω–∫–∞ '{attribute_system_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_attribute_display_name}'")
# #         print_status(True, "–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
# #
# #         # --- –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê ---
# #         print("-" * 60)
# #         print(f"–®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ GET /api/meta/entity-types/{entity_type_id}")
# #
# #         response = requests.get(f"{BASE_URL}/api/meta/entity-types/{entity_type_id}", headers=headers)
# #         response.raise_for_status()
# #
# #         data = response.json()
# #         print("–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
# #         print(json.dumps(data, indent=2, ensure_ascii=False))
# #
# #         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
# #         print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º...")
# #         print_status(
# #             data.get('display_name') == new_table_display_name,
# #             f"–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{data.get('display_name')}'."
# #         )
# #
# #         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏
# #         found_attribute = next((attr for attr in data.get('attributes', []) if attr['name'] == attribute_system_name),
# #                                None)
# #
# #         print_status(found_attribute is not None, f"–ö–æ–ª–æ–Ω–∫–∞ '{attribute_system_name}' –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ.")
# #
# #         if found_attribute:
# #             print_status(
# #                 found_attribute.get('display_name') == new_attribute_display_name,
# #                 f"–ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{found_attribute.get('display_name')}'."
# #             )
# #
# #         print("-" * 60)
# #         print("\nüéâüéâüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å. üéâüéâüéâ\n")
# #
# #     except requests.exceptions.HTTPError as e:
# #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
# #         print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {e.request.method} {e.request.url}")
# #         if e.request.body:
# #             try:
# #                 # –ü—ã—Ç–∞–µ–º—Å—è –∫—Ä–∞—Å–∏–≤–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
# #                 body = json.loads(e.request.body)
# #                 print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(body, indent=2, ensure_ascii=False)}")
# #             except:
# #                 print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e.request.body}")
# #         print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
# #         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# #     except Exception as e:
# #         print(f"\n‚ùå –ü–†–û–ò–ó–û–®–õ–ê –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
# #
# #
# # # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç
# # if __name__ == "__main__":
# #     run_test()
#
#
# # test_full_list_alias_fix.py
# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# # –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ API
# BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
#
# # –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ç–æ—Ç –∂–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# # -----------------
#
# UNIQUE_ID = int(time.time())
#
#
# def print_status(ok, message):
#     """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
#     if ok:
#         print(f"‚úÖ [PASS] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}")
#         exit(1)
#
#
# def run_full_list_alias_test():
#     """
#     –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ GET /api/meta/entity-types (—Å–ø–∏—Å–æ–∫)
#     –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü –∏ –∏—Ö –∫–æ–ª–æ–Ω–æ–∫.
#     """
#     headers = {}
#
#     # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
#     projects_system_name = f"test_projects_{UNIQUE_ID}"
#     tasks_system_name = f"test_tasks_{UNIQUE_ID}"
#
#     try:
#         # --- –®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
#         print("-" * 60)
#         print("–®–ê–ì 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
#         user_email = f"list_alias_tester_{UNIQUE_ID}@example.com"
#         password = "password123"
#         reg_payload = {"email": user_email, "password": password, "registration_token": CORRECT_REGISTRATION_TOKEN}
#         requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
#         auth_payload_form = {'username': user_email, 'password': password}
#         token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form).json()['access_token']
#         headers = {'Authorization': f'Bearer {token}'}
#         print_status(True, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")
#
#         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –° –ò–°–•–û–î–ù–´–ú–ò –ò–ú–ï–ù–ê–ú–ò ---
#         print("\n" + "-" * 60)
#         print("–®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏...")
#         # –¢–∞–±–ª–∏—Ü–∞ 1: –ü—Ä–æ–µ–∫—Ç—ã
#         p_payload = {"name": projects_system_name, "display_name": "–ò—Å—Ö–æ–¥–Ω—ã–µ –ü—Ä–æ–µ–∫—Ç—ã"}
#         p_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=p_payload).json()['id']
#         requests.post(f"{BASE_URL}/api/meta/entity-types/{p_id}/attributes", headers=headers,
#                       json={"name": "budget", "display_name": "–ò—Å—Ö–æ–¥–Ω—ã–π –ë—é–¥–∂–µ—Ç",
#                             "value_type": "integer"}).raise_for_status()
#         print(f" -> –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '–ü—Ä–æ–µ–∫—Ç—ã' ({projects_system_name})")
#         # –¢–∞–±–ª–∏—Ü–∞ 2: –ó–∞–¥–∞—á–∏
#         t_payload = {"name": tasks_system_name, "display_name": "–ò—Å—Ö–æ–¥–Ω—ã–µ –ó–∞–¥–∞—á–∏"}
#         t_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=t_payload).json()['id']
#         requests.post(f"{BASE_URL}/api/meta/entity-types/{t_id}/attributes", headers=headers,
#                       json={"name": "executor", "display_name": "–ò—Å—Ö–æ–¥–Ω—ã–π –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
#                             "value_type": "string"}).raise_for_status()
#         print(f" -> –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '–ó–∞–¥–∞—á–∏' ({tasks_system_name})")
#         print_status(True, "–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞.")
#
#         # --- –®–ê–ì 3: –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
#         print("\n" + "-" * 60)
#         print("–®–ê–ì 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∏–º–µ–Ω (–ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤)...")
#         NEW_PROJECTS_NAME = "–ú–æ–∏ –ü—Ä–æ–µ–∫—Ç—ã (–∞–ª–∏–∞—Å)"
#         NEW_BUDGET_NAME = "–î–µ–Ω–µ–∂–∫–∏ (–∞–ª–∏–∞—Å)"
#         NEW_TASKS_NAME = "–ú–æ–∏ –ó–∞–¥–∞—á–∏ (–∞–ª–∏–∞—Å)"
#         NEW_EXECUTOR_NAME = "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–∞–ª–∏–∞—Å)"
#
#         # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
#         requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers,
#                       json={"table_name": projects_system_name, "display_name": NEW_PROJECTS_NAME}).raise_for_status()
#         requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers,
#                       json={"table_name": tasks_system_name, "display_name": NEW_TASKS_NAME}).raise_for_status()
#         # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
#         requests.post(f"{BASE_URL}/api/aliases/", headers=headers,
#                       json={"table_name": projects_system_name, "attribute_name": "budget",
#                             "display_name": NEW_BUDGET_NAME}).raise_for_status()
#         requests.post(f"{BASE_URL}/api/aliases/", headers=headers,
#                       json={"table_name": tasks_system_name, "attribute_name": "executor",
#                             "display_name": NEW_EXECUTOR_NAME}).raise_for_status()
#         print_status(True, "–í—Å–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
#
#         # --- –®–ê–ì 4: –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
#         print("\n" + "-" * 60)
#         print("–®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ GET /api/meta/entity-types (—Å–ø–∏—Å–æ–∫)")
#
#         response = requests.get(f"{BASE_URL}/api/meta/entity-types", headers=headers)
#         response.raise_for_status()
#         all_tables_data = response.json()
#
#         print("–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
#         print(json.dumps(all_tables_data, indent=2, ensure_ascii=False))
#
#         # –ò—â–µ–º –Ω–∞—à–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
#         projects_data = next((t for t in all_tables_data if t['name'] == projects_system_name), None)
#         tasks_data = next((t for t in all_tables_data if t['name'] == tasks_system_name), None)
#
#         print_status(projects_data is not None, "–¢–∞–±–ª–∏—Ü–∞ '–ü—Ä–æ–µ–∫—Ç—ã' –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ.")
#         print_status(tasks_data is not None, "–¢–∞–±–ª–∏—Ü–∞ '–ó–∞–¥–∞—á–∏' –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ.")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è "–ü—Ä–æ–µ–∫—Ç–æ–≤"
#         if projects_data:
#             print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É '–ü—Ä–æ–µ–∫—Ç—ã':")
#             print_status(projects_data['display_name'] == NEW_PROJECTS_NAME,
#                          f" -> –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{projects_data['display_name']}'")
#             budget_attr = next((a for a in projects_data['attributes'] if a['name'] == 'budget'), None)
#             print_status(budget_attr is not None, " -> –ö–æ–ª–æ–Ω–∫–∞ 'budget' –Ω–∞–π–¥–µ–Ω–∞.")
#             if budget_attr:
#                 print_status(budget_attr['display_name'] == NEW_BUDGET_NAME,
#                              f" -> –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{budget_attr['display_name']}'")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è "–ó–∞–¥–∞—á"
#         if tasks_data:
#             print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É '–ó–∞–¥–∞—á–∏':")
#             print_status(tasks_data['display_name'] == NEW_TASKS_NAME,
#                          f" -> –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{tasks_data['display_name']}'")
#             executor_attr = next((a for a in tasks_data['attributes'] if a['name'] == 'executor'), None)
#             print_status(executor_attr is not None, " -> –ö–æ–ª–æ–Ω–∫–∞ 'executor' –Ω–∞–π–¥–µ–Ω–∞.")
#             if executor_attr:
#                 print_status(executor_attr['display_name'] == NEW_EXECUTOR_NAME,
#                              f" -> –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{executor_attr['display_name']}'")
#
#         print("\n" + "-" * 60)
#         print("üéâüéâüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –§–ò–ö–° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å. üéâüéâüéâ")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
#         print(f"URL: {e.request.method} {e.request.url}")
#         print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
#         print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
#
#
# # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç
# if __name__ == "__main__":
#     run_full_list_alias_test()
#
#
# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
#
# BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
#
# # –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
#
#
# # ----------------------------------------------------
#
# def print_status(ok, message):
#     if ok:
#         print(f"‚úÖ [PASS] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}")
#         exit(1)
#
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
#
# def register_and_login(email, password, full_name):
#     """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞."""
#     # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
#     reg_payload = {
#         "email": email,
#         "password": password,
#         "full_name": full_name,
#         "registration_token": CORRECT_REGISTRATION_TOKEN
#     }
#     reg_response = requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload)
#     if reg_response.status_code != 201:
#         raise Exception(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {email}: {reg_response.text}")
#
#     # 2. –í—Ö–æ–¥
#     auth_payload = {'username': email, 'password': password}
#     auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
#     auth_response.raise_for_status()
#
#     token = auth_response.json()['access_token']
#     return {'Authorization': f'Bearer {token}'}
#
#
# def create_custom_table(headers, table_config):
#     """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
#     response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config)
#     response.raise_for_status()
#     return response.json()
#
#
# def get_visible_tables(headers):
#     """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
#     response = requests.get(f"{BASE_URL}/api/meta/entity-types", headers=headers)
#     response.raise_for_status()
#     return response.json()
#
#
# def run_multi_tenancy_test():
#     try:
#         unique_id = int(time.time())
#
#         # --- –ö–õ–ò–ï–ù–¢ –ê ---
#         print_header("–°–û–ó–î–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –ê –ò –ï–ì–û –¢–ê–ë–õ–ò–¶–´")
#         user_a_email = f"user1@example.com"
#         user_a_password = "password_a"
#         user_a_headers = register_and_login(user_a_email, user_a_password, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê–ª—å—Ñ–∞")
#         print(f" -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_a_email}' –∏ –µ–≥–æ —Ç–µ–Ω–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω—ã.")
#
#         table_a_config = {"name": f"alpha_projects_{unique_id}", "display_name": "–ü—Ä–æ–µ–∫—Ç—ã –ê–ª—å—Ñ–∞"}
#         create_custom_table(user_a_headers, table_a_config)
#         print(f" -> –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ê —Å–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_a_config['display_name']}'.")
#
#         # --- –ö–õ–ò–ï–ù–¢ –ë ---
#         print_header("–°–û–ó–î–ê–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –ë –ò –ï–ì–û –¢–ê–ë–õ–ò–¶–´")
#         user_b_email = f"user2@example.com"
#         user_b_password = "password_b"
#         user_b_headers = register_and_login(user_b_email, user_b_password, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–µ—Ç–∞")
#         print(f" -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_b_email}' –∏ –µ–≥–æ —Ç–µ–Ω–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω—ã.")
#
#         table_b_config = {"name": f"beta_tasks_{unique_id}", "display_name": "–ó–∞–¥–∞—á–∏ –ë–µ—Ç–∞"}
#         create_custom_table(user_b_headers, table_b_config)
#         print(f" -> –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ë —Å–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_b_config['display_name']}'.")
#
#         # --- –ü–†–û–í–ï–†–ö–ê –ò–ó–û–õ–Ø–¶–ò–ò ---
#         print_header("–ü–†–û–í–ï–†–ö–ê –ò–ó–û–õ–Ø–¶–ò–ò –î–ê–ù–ù–´–•")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∏—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê
#         print(f"\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è {user_a_email}...")
#         visible_to_a = get_visible_tables(user_a_headers)
#         visible_names_a = {table['name'] for table in visible_to_a}
#
#         print(f" -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê –≤–∏–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—ã: {visible_names_a}")
#         print_status(len(visible_to_a) == 1, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê –≤–∏–¥–∏—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É.")
#         print_status(table_a_config['name'] in visible_names_a, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê –≤–∏–¥–∏—Ç —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É '–ü—Ä–æ–µ–∫—Ç—ã –ê–ª—å—Ñ–∞'.")
#         print_status(table_b_config['name'] not in visible_names_a,
#                      "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê –ù–ï –≤–∏–¥–∏—Ç —á—É–∂—É—é —Ç–∞–±–ª–∏—Ü—É '–ó–∞–¥–∞—á–∏ –ë–µ—Ç–∞'.")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∏—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë
#         print(f"\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è {user_b_email}...")
#         visible_to_b = get_visible_tables(user_b_headers)
#         visible_names_b = {table['name'] for table in visible_to_b}
#
#         print(f" -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë –≤–∏–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—ã: {visible_names_b}")
#         print_status(len(visible_to_b) == 1, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë –≤–∏–¥–∏—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É.")
#         print_status(table_b_config['name'] in visible_names_b, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë –≤–∏–¥–∏—Ç —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É '–ó–∞–¥–∞—á–∏ –ë–µ—Ç–∞'.")
#         print_status(table_a_config['name'] not in visible_names_b,
#                      "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë –ù–ï –≤–∏–¥–∏—Ç —á—É–∂—É—é —Ç–∞–±–ª–∏—Ü—É '–ü—Ä–æ–µ–∫—Ç—ã –ê–ª—å—Ñ–∞'.")
#
#         print("\n" + "=" * 60)
#         print("üéâüéâüéâ –¢–ï–°–¢ –ù–ê –ú–£–õ–¨–¢–ò-–¢–ï–ù–ê–ù–¢–ù–û–°–¢–¨ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
#         print("–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞–¥–µ–∂–Ω–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã.")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
#         print(f"URL: {e.request.method} {e.request.url}")
#         print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
#         print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
#
#
# if __name__ == "__main__":
#     run_multi_tenancy_test()


# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
#
# # BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
# BASE_URL = "http://89.111.169.47:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
#
# # –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
#
#
# # ----------------------------------------------------
#
# def print_status(ok, message):
#     if ok:
#         print(f"‚úÖ [PASS] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}")
#         exit(1)
#
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
#
# def register_and_login():
#     """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º."""
#     unique_id = int(time.time())
#     email = f"attr_tester_{unique_id}@example.com"
#     password = "password123"
#
#     reg_payload = {"email": email, "password": password, "full_name": "Attributet Tester",
#                    "registration_token": CORRECT_REGISTRATION_TOKEN}
#     requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
#
#     auth_payload = {'username': email, 'password': password}
#     token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
#     return {'Authorization': f'Bearer {token}'}
#
#
# def get_table_details(headers, table_id):
#     """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ, –≤–∫–ª—é—á–∞—è –µ–µ –∞—Ç—Ä–∏–±—É—Ç—ã."""
#     response = requests.get(f"{BASE_URL}/api/meta/entity-types/{table_id}", headers=headers)
#     response.raise_for_status()
#     return response.json()
#
#
# def run_attribute_test():
#     try:
#         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
#         print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
#         headers = register_and_login()
#
#         table_config = {"name": f"candidates_{int(time.time())}", "display_name": "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã"}
#         table_response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config)
#         table_response.raise_for_status()
#         table_id = table_response.json()['id']
#         print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã' —Å ID: {table_id}")
#
#         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ö–û–õ–û–ù–û–ö ---
#         print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–• –ö–û–õ–û–ù–û–ö")
#
#         attrs_to_create = [
#             {"name": "full_name", "display_name": "–§–ò–û", "value_type": "string"},
#             {"name": "salary_expectation", "display_name": "–û–∂–∏–¥–∞–µ–º–∞—è –ó–ü", "value_type": "integer"},
#             {"name": "contact_phone", "display_name": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", "value_type": "string"},
#         ]
#
#         for attr in attrs_to_create:
#             url = f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes"
#             requests.post(url, headers=headers, json=attr).raise_for_status()
#             print(f" -> –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '{attr['display_name']}'")
#
#         # --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø ---
#         print_header("–®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê, –ß–¢–û –í–°–ï –ö–û–õ–û–ù–ö–ò –°–û–ó–î–ê–ù–´")
#
#         table_details = get_table_details(headers, table_id)
#         # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (sms_*, phone_number, etc.)
#         custom_attributes = [attr for attr in table_details['attributes'] if
#                              not attr['name'].startswith('sms_') and attr['name'] not in (
#                              'phone_number', 'message_text', 'send_sms_trigger')]
#
#         print(f" -> –í —Ç–∞–±–ª–∏—Ü–µ –Ω–∞–π–¥–µ–Ω–æ {len(custom_attributes)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫.")
#         print_status(len(custom_attributes) == 3, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.")
#
#         created_attr_names = {attr['name'] for attr in custom_attributes}
#         print_status('salary_expectation' in created_attr_names, "–ö–æ–ª–æ–Ω–∫–∞ 'salary_expectation' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
#
#         # --- –®–ê–ì 4: –£–î–ê–õ–ï–ù–ò–ï –û–î–ù–û–ô –ö–û–õ–û–ù–ö–ò ---
#         print_header("–®–ê–ì 4: –£–î–ê–õ–ï–ù–ò–ï –ö–û–õ–û–ù–ö–ò 'contact_phone'")
#
#         # –ù–∞—Ö–æ–¥–∏–º ID –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å
#         attr_to_delete = next((attr for attr in custom_attributes if attr['name'] == 'contact_phone'), None)
#         print_status(attr_to_delete is not None, "–ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ 'contact_phone' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
#
#         if attr_to_delete:
#             attr_id_to_delete = attr_to_delete['id']
#             url = f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes/{attr_id_to_delete}"
#             delete_response = requests.delete(url, headers=headers)
#
#             print_status(delete_response.status_code == 204, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å 204).")
#
#         # --- –®–ê–ì 5: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
#         print_header("–®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê, –ß–¢–û –ö–û–õ–û–ù–ö–ê –£–î–ê–õ–ï–ù–ê, –ê –û–°–¢–ê–õ–¨–ù–´–ï –ù–ê –ú–ï–°–¢–ï")
#
#         final_table_details = get_table_details(headers, table_id)
#         final_custom_attributes = [attr for attr in final_table_details['attributes'] if
#                                    not attr['name'].startswith('sms_') and attr['name'] not in (
#                                    'phone_number', 'message_text', 'send_sms_trigger')]
#
#         print(f" -> –í —Ç–∞–±–ª–∏—Ü–µ –æ—Å—Ç–∞–ª–æ—Å—å {len(final_custom_attributes)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫.")
#         print_status(len(final_custom_attributes) == 2, "–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.")
#
#         final_attr_names = {attr['name'] for attr in final_custom_attributes}
#         print_status('contact_phone' not in final_attr_names, "–ö–æ–ª–æ–Ω–∫–∞ 'contact_phone' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
#         print_status('full_name' in final_attr_names, "–ö–æ–ª–æ–Ω–∫–∞ 'full_name' –æ—Å—Ç–∞–ª–∞—Å—å –Ω–∞ –º–µ—Å—Ç–µ.")
#         print_status('salary_expectation' in final_attr_names, "–ö–æ–ª–æ–Ω–∫–∞ 'salary_expectation' –æ—Å—Ç–∞–ª–∞—Å—å –Ω–∞ –º–µ—Å—Ç–µ.")
#
#         print("\n" + "=" * 60)
#         print("üéâüéâüéâ –¢–ï–°–¢ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ö–û–õ–û–ù–û–ö –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
#         print(f"URL: {e.request.method} {e.request.url}")
#         print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
#         print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
#
#
# if __name__ == "__main__":
#     run_attribute_test()


# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
#
# # BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
# BASE_URL = "http://89.111.169.47:8005"
#
# # –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
#
#
# # ----------------------------------------------------
#
# def print_status(ok, message):
#     if ok:
#         print(f"‚úÖ [PASS] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}")
#         exit(1)
#
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
#
# def register_and_login():
#     """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º."""
#     unique_id = int(time.time())
#     email = f"table_deleter_{unique_id}@example.com"
#     password = "password123"
#
#     reg_payload = {"email": email, "password": password, "full_name": "Table Deleter",
#                    "registration_token": CORRECT_REGISTRATION_TOKEN}
#     requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
#
#     auth_payload = {'username': email, 'password': password}
#     token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
#     return {'Authorization': f'Bearer {token}'}
#
#
# def run_table_deletion_test():
#     try:
#         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
#         print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –î–í–£–• –¢–ê–ë–õ–ò–¶")
#         headers = register_and_login()
#
#         # –¢–∞–±–ª–∏—Ü–∞ 1 (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
#         table_to_delete_config = {"name": f"projects_to_delete_{int(time.time())}",
#                                   "display_name": "–ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"}
#         response1 = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_to_delete_config)
#         response1.raise_for_status()
#         table_to_delete_id = response1.json()['id']
#         print(f" -> –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_to_delete_config['display_name']}' —Å ID: {table_to_delete_id}")
#
#         # –¢–∞–±–ª–∏—Ü–∞ 2 (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
#         table_to_keep_config = {"name": f"tasks_to_keep_{int(time.time())}", "display_name": "–ó–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"}
#         response2 = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_to_keep_config)
#         response2.raise_for_status()
#         table_to_keep_id = response2.json()['id']
#         print(f" -> –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_to_keep_config['display_name']}' —Å ID: {table_to_keep_id}")
#
#         # --- –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø ---
#         list_response = requests.get(f"{BASE_URL}/api/meta/entity-types", headers=headers)
#         all_tables = list_response.json()
#         table_names = {t['name'] for t in all_tables}
#
#         print_status(
#             table_to_delete_config['name'] in table_names and table_to_keep_config['name'] in table_names,
#             "–û–±–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ."
#         )
#
#         # --- –®–ê–ì 3: –£–î–ê–õ–ï–ù–ò–ï –û–î–ù–û–ô –¢–ê–ë–õ–ò–¶–´ ---
#         print_header(f"–®–ê–ì 3: –£–î–ê–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ ID={table_to_delete_id}")
#
#         delete_url = f"{BASE_URL}/api/meta/entity-types/{table_to_delete_id}"
#         delete_response = requests.delete(delete_url, headers=headers)
#
#         print_status(delete_response.status_code == 204, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å 204).")
#
#         # --- –®–ê–ì 4: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
#         print_header("–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–°–¢–í–ò–ô –£–î–ê–õ–ï–ù–ò–Ø")
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 404
#         print(f" -> –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ ID={table_to_delete_id}...")
#         deleted_table_response = requests.get(delete_url, headers=headers)
#         print_status(deleted_table_response.status_code == 404, "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å 404).")
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è
#         print(f" -> –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Ç–∞–±–ª–∏—Ü–µ ID={table_to_keep_id}...")
#         kept_table_response = requests.get(f"{BASE_URL}/api/meta/entity-types/{table_to_keep_id}", headers=headers)
#         print_status(kept_table_response.status_code == 200, "–í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–∞ –º–µ—Å—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞.")
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É
#         final_list_response = requests.get(f"{BASE_URL}/api/meta/entity-types", headers=headers)
#         final_all_tables = final_list_response.json()
#         final_table_names = {t['name'] for t in final_all_tables}
#
#         print(f" -> –í –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–∞–±–ª–∏—Ü—ã: {final_table_names}")
#         print_status(len(final_all_tables) == 1, "–í –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞.")
#         print_status(table_to_keep_config['name'] in final_table_names,
#                      "–û—Å—Ç–∞–≤—à–∞—è—Å—è —Ç–∞–±–ª–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
#
#         print("\n" + "=" * 60)
#         print("üéâüéâüéâ –¢–ï–°–¢ –ù–ê –£–î–ê–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
#         print(f"URL: {e.request.method} {e.request.url}")
#         print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
#         print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
#
#
# if __name__ == "__main__":
#     run_table_deletion_test()












# –ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–ø—Ç:
# –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –ø–æ–¥ user@example.com.
# –ü–æ–ª—É—á–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏).
# –í —Ü–∏–∫–ª–µ –ø—Ä–æ–π–¥–µ—Ç –ø–æ —Å–ø–∏—Å–∫—É –≤–∞—à–∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.
# –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã:
# –ü–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (GET /api/data/{table_name}).
# –ü–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å (POST /api/data/{table_name}).
# –í –∫–æ–Ω—Ü–µ –≤—ã–≤–µ–¥–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç, –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –∞ –∫–∞–∫–∏–µ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.
import requests
import json
from faker import Faker
import time
# --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---

BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞

# --- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –ø—Ä–∞–≤–∞ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º ---
USER_EMAIL = "user1@example.com"
USER_PASSWORD = "password_a"
#         user_a_email = f"user1@example.com"
#         user_a_password = "password_a"
# --- –°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
TABLES_TO_TEST = [
    "leads_custom",
    "archived_leads",
    "monitoring",
    "deals",
    "contracts",
    "founders_directors",
]

# ----------------------------------------------------------------------
fake = Faker('ru_RU')


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


def run_permission_test():
    print_header(f"–ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {USER_EMAIL}")

    try:
        # --- –®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–ê–í ---
        print("\n--- –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ ---")
        auth_payload = {'username': USER_EMAIL, 'password': USER_PASSWORD}
        auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)

        if auth_response.status_code != 200:
            print(
                f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å. –û—Ç–≤–µ—Ç: {auth_response.text}")
            return

        token = auth_response.json()['access_token']
        headers = {'Authorization': f'Bearer {token}'}

        me_response = requests.get(f"{BASE_URL}/api/users/me", headers=headers)
        user_permissions = set(me_response.json().get("permissions", []))

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {len(user_permissions)} –ø—Ä–∞–≤:")
        for perm in sorted(list(user_permissions)):
            print(f"   - {perm}")

        # --- –®–ê–ì 2: –¶–ò–ö–õ –ü–†–û–í–ï–†–ö–ò –¢–ê–ë–õ–ò–¶ ---
        for table_name in TABLES_TO_TEST:
            print_header(f"–ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´: '{table_name}'")

            # --- 2.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ü–†–û–°–ú–û–¢–† (GET) ---
            print(f"\n -> 1. –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (GET /api/data/{table_name})")
            view_permission_needed = f"data:view:{table_name}"

            get_response = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers)

            if get_response.status_code == 200:
                print(f"   ‚úÖ [–£–°–ü–ï–•] –î–æ—Å—Ç—É–ø –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –µ—Å—Ç—å (—Å—Ç–∞—Ç—É—Å 200).")
                if view_permission_needed not in user_permissions:
                    print(f"   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–æ—Å—Ç—É–ø –µ—Å—Ç—å, –Ω–æ –ø—Ä–∞–≤–∞ '{view_permission_needed}' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")
            elif get_response.status_code == 403:
                print(f"   ‚úÖ [–ö–û–†–†–ï–ö–¢–ù–û –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û] –î–æ—Å—Ç—É–ø –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–µ—â–µ–Ω (—Å—Ç–∞—Ç—É—Å 403).")
                if view_permission_needed in user_permissions:
                    print(
                        f"   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, —Ö–æ—Ç—è –ø—Ä–∞–≤–æ '{view_permission_needed}' –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")
            else:
                print(f"   ‚ùå [–û–®–ò–ë–ö–ê] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {get_response.status_code} - {get_response.text}")

            # --- 2.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –°–û–ó–î–ê–ù–ò–ï (POST) ---
            print(f"\n -> 2. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è (POST /api/data/{table_name})")
            create_permission_needed = f"data:create:{table_name}"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            post_payload = {"test_field": f"test_value_{int(time.time())}"}

            post_response = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=post_payload)

            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å - 201
            if post_response.status_code == 201:
                print(f"   ‚úÖ [–£–°–ü–ï–•] –î–æ—Å—Ç—É–ø –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å—Ç—å (—Å—Ç–∞—Ç—É—Å 201).")
                if create_permission_needed not in user_permissions:
                    print(f"   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–æ—Å—Ç—É–ø –µ—Å—Ç—å, –Ω–æ –ø—Ä–∞–≤–∞ '{create_permission_needed}' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")
            elif post_response.status_code == 403:
                print(f"   ‚úÖ [–ö–û–†–†–ï–ö–¢–ù–û –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û] –î–æ—Å—Ç—É–ø –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω (—Å—Ç–∞—Ç—É—Å 403).")
                if create_permission_needed in user_permissions:
                    print(
                        f"   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, —Ö–æ—Ç—è –ø—Ä–∞–≤–æ '{create_permission_needed}' –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")
            else:
                print(f"   ‚ùå [–û–®–ò–ë–ö–ê] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {post_response.status_code} - {post_response.text}")

        print("\n" + "=" * 60)
        print("–ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ó–ê–í–ï–†–®–ï–ù–ê.")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –°–ö–†–ò–ü–¢–ï: {e}")


if __name__ == "__main__":
    run_permission_test()