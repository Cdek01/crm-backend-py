# # test_aliases.py
# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# BASE_URL = "http://127.0.0.1:8005"
#
# # BASE_URL = "http://89.111.169.47:8005"
#
#
# # –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# # -----------------
#
# UNIQUE_ID = int(time.time())
#
#
# def print_status(ok, message):
#     """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
#     if ok:
#         print(f"‚úÖ [SUCCESS] {message}")
#     else:
#         print(f"‚ùå [FAILURE] {message}")
#         # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –æ—à–∏–±–∫–µ
#         exit(1)
#
#
# def run_aliases_test():
#     """
#     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–ª—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤.
#     """
#     token = None
#     headers = {}
#
#     try:
#         # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
#         print("-" * 50)
#         print("1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
#         user_email = f"alias_tester_{UNIQUE_ID}@example.com"
#         password = "password123"
#         reg_payload = {"email": user_email, "password": password, "registration_token": CORRECT_REGISTRATION_TOKEN}
#         requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
#
#         auth_payload_form = {'username': user_email, 'password': password}
#         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
#         auth_response.raise_for_status()
#         token = auth_response.json()['access_token']
#         headers = {'Authorization': f'Bearer {token}'}
#         print_status(True, "–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω.")
#
#         # --- –®–ê–ì 2: –ü–û–î–ì–û–¢–û–í–ö–ê –°–†–ï–î–´ (–°–û–ó–î–ê–ù–ò–ï –ö–ê–°–¢–û–ú–ù–û–ô –¢–ê–ë–õ–ò–¶–´) ---
#         print("-" * 50)
#         print("2. –ü–û–î–ì–û–¢–û–í–ö–ê –°–†–ï–î–´")
#         # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–∞–±–ª–∏—Ü—É "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã", —á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å
#         entity_payload = {"name": "candidates", "display_name": "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã"}
#         response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=entity_payload)
#         response.raise_for_status()
#         entity_type_id = response.json()['id']
#         # –°–æ–∑–¥–∞–µ–º –≤ –Ω–µ–π –∫–æ–ª–æ–Ω–∫—É
#         attr_payload = {"name": "expected_salary", "display_name": "–û–∂–∏–¥–∞–µ–º–∞—è –ó–ü", "value_type": "integer"}
#         response = requests.post(f"{BASE_URL}/api/meta/entity-types/{entity_type_id}/attributes", headers=headers,
#                                  json=attr_payload)
#         response.raise_for_status()
#         print_status(True, "–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ 'candidates' —Å –∫–æ–ª–æ–Ω–∫–æ–π 'expected_salary'.")
#
#         # --- –®–ê–ì 3: –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
#         print("-" * 50)
#         print("3. –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í (POST /api/aliases/)")
#
#         # 3.1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'leads'
#         alias1_payload = {
#             "table_name": "leads",
#             "attribute_name": "organization_name",
#             "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–º–ø–∞–Ω–∏–∏-–ö–ª–∏–µ–Ω—Ç–∞"
#         }
#         response1 = requests.post(f"{BASE_URL}/api/aliases/", headers=headers, json=alias1_payload)
#         response1.raise_for_status()
#         print_status(True, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads.organization_name'")
#
#         # 3.2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'candidates'
#         alias2_payload = {
#             "table_name": "candidates",
#             "attribute_name": "expected_salary",
#             "display_name": "–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è (—Ä—É–±.)"
#         }
#         response2 = requests.post(f"{BASE_URL}/api/aliases/", headers=headers, json=alias2_payload)
#         response2.raise_for_status()
#         print_status(True, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'candidates.expected_salary'")
#
#         # --- –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
#         print("-" * 50)
#         print("4. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –í–°–ï–• –ü–°–ï–í–î–û–ù–ò–ú–û–í (GET /api/aliases/)")
#
#         get_response = requests.get(f"{BASE_URL}/api/aliases/", headers=headers)
#         get_response.raise_for_status()
#         all_aliases = get_response.json()
#
#         print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(all_aliases, indent=2, ensure_ascii=False))
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ –Ω–∞ –º–µ—Å—Ç–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
#         expected_aliases_count = 2
#         print_status(
#             len(all_aliases) == expected_aliases_count,
#             f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_aliases)} —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_aliases_count}."
#         )
#         print_status(
#             all_aliases.get("leads", {}).get("organization_name") == alias1_payload["display_name"],
#             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
#         )
#         print_status(
#             all_aliases.get("candidates", {}).get("expected_salary") == alias2_payload["display_name"],
#             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'candidates' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
#         )
#
#         # --- –®–ê–ì 5: –£–î–ê–õ–ï–ù–ò–ï (–°–ë–†–û–°) –ü–°–ï–í–î–û–ù–ò–ú–ê ---
#         print("-" * 50)
#         print("5. –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ü–°–ï–í–î–û–ù–ò–ú–ê (DELETE /api/aliases/{table}/{attr})")
#
#         # –£–¥–∞–ª—è–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads.organization_name'
#         delete_response = requests.delete(f"{BASE_URL}/api/aliases/leads/organization_name", headers=headers)
#         print_status(
#             delete_response.status_code == 204,
#             "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ (—Å—Ç–∞—Ç—É—Å 204)."
#         )
#
#         # –°–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#         get_after_delete_response = requests.get(f"{BASE_URL}/api/aliases/", headers=headers)
#         aliases_after_delete = get_after_delete_response.json()
#
#         print("–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", json.dumps(aliases_after_delete, indent=2, ensure_ascii=False))
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' –∏—Å—á–µ–∑, –∞ –¥–ª—è 'candidates' –æ—Å—Ç–∞–ª—Å—è
#         print_status(
#             "leads" not in aliases_after_delete,
#             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞."
#         )
#         print_status(
#             "candidates" in aliases_after_delete,
#             "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'candidates' –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ."
#         )
#
#         # --- –®–ê–ì 6: –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ---
#         print("-" * 50)
#         print("6. –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
#
#         # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º
#         non_existent_delete = requests.delete(f"{BASE_URL}/api/aliases/non_existent_table/non_existent_attr",
#                                               headers=headers)
#         print_status(
#             non_existent_delete.status_code == 404,
#             "–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 404 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º."
#         )
#
#         print("-" * 50)
#         print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –î–õ–Ø API –ü–°–ï–í–î–û–ù–ò–ú–û–í –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP –Ω–∞ —à–∞–≥–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
#         print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {e.request.method} {e.request.url}")
#         if e.request.body:
#             try:
#                 body = json.loads(e.request.body)
#                 print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(body, indent=2, ensure_ascii=False)}")
#             except:
#                 print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e.request.body}")
#         print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
#         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ü–†–û–ò–ó–û–®–õ–ê –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê")
#         print(f"–û—à–∏–±–∫–∞: {e}")
#
#
# # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç
# if __name__ == "__main__":
#     run_aliases_test()


# test_table_aliases.py
import requests
import json
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://127.0.0.1:8005"
# –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ
CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# -----------------

UNIQUE_ID = int(time.time())


def print_status(ok, message):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    if ok:
        print(f"‚úÖ [SUCCESS] {message}")
    else:
        print(f"‚ùå [FAILURE] {message}")
        exit(1)


def run_table_aliases_test():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–ª—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ —Ç–∞–±–ª–∏—Ü.
    """
    token = None
    headers = {}

    try:
        # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
        print("-" * 50)
        print("1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
        user_email = f"table_alias_tester_{UNIQUE_ID}@example.com"
        password = "password123"
        reg_payload = {"email": user_email, "password": password, "registration_token": CORRECT_REGISTRATION_TOKEN}
        requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()

        auth_payload_form = {'username': user_email, 'password': password}
        auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
        auth_response.raise_for_status()
        token = auth_response.json()['access_token']
        headers = {'Authorization': f'Bearer {token}'}
        print_status(True, "–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω.")

        # --- –®–ê–ì 2: –ü–û–î–ì–û–¢–û–í–ö–ê –°–†–ï–î–´ (–°–û–ó–î–ê–ù–ò–ï –ö–ê–°–¢–û–ú–ù–û–ô –¢–ê–ë–õ–ò–¶–´) ---
        print("-" * 50)
        print("2. –ü–û–î–ì–û–¢–û–í–ö–ê –°–†–ï–î–´")
        entity_payload = {"name": f"custom_projects_{UNIQUE_ID}", "display_name": "–ü—Ä–æ–µ–∫—Ç—ã"}
        response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=entity_payload)
        response.raise_for_status()
        print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ '{entity_payload['name']}'.")

        # --- –®–ê–ì 3: –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
        print("-" * 50)
        print("3. –£–°–¢–ê–ù–û–í–ö–ê –ü–°–ï–í–î–û–ù–ò–ú–û–í (POST /api/aliases/tables)")

        # 3.1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'leads'
        alias1_payload = {"table_name": "leads", "display_name": "–í–æ—Ä–æ–Ω–∫–∞ –ü—Ä–æ–¥–∞–∂"}
        response1 = requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers, json=alias1_payload)
        response1.raise_for_status()
        print_status(True, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã 'leads'.")

        # 3.2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        alias2_payload = {"table_name": entity_payload['name'], "display_name": "–ù–∞—à–∏ –ü—Ä–æ–µ–∫—Ç—ã"}
        response2 = requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers, json=alias2_payload)
        response2.raise_for_status()
        print_status(True, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{entity_payload['name']}'.")

        # --- –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–°–ï–í–î–û–ù–ò–ú–û–í ---
        print("-" * 50)
        print("4. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –í–°–ï–• –ü–°–ï–í–î–û–ù–ò–ú–û–í (GET /api/aliases/tables)")

        get_response = requests.get(f"{BASE_URL}/api/aliases/tables", headers=headers)
        get_response.raise_for_status()
        all_aliases = get_response.json()

        print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(all_aliases, indent=2, ensure_ascii=False))

        print_status(len(all_aliases) == 2, f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_aliases)} –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤, –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å.")
        print_status(all_aliases.get("leads") == alias1_payload["display_name"], "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        print_status(all_aliases.get(entity_payload['name']) == alias2_payload["display_name"],
                     "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")

        # --- –®–ê–ì 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–°–ï–í–î–û–ù–ò–ú–ê ---
        print("-" * 50)
        print("5. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ü–°–ï–í–î–û–ù–ò–ú–ê")

        update_payload = {"table_name": "leads", "display_name": "–ù–æ–≤—ã–µ –ó–∞—è–≤–∫–∏"}
        update_response = requests.post(f"{BASE_URL}/api/aliases/tables", headers=headers, json=update_payload)
        update_response.raise_for_status()

        get_after_update = requests.get(f"{BASE_URL}/api/aliases/tables", headers=headers).json()
        print_status(
            get_after_update.get("leads") == update_payload["display_name"],
            "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."
        )

        # --- –®–ê–ì 6: –£–î–ê–õ–ï–ù–ò–ï (–°–ë–†–û–°) –ü–°–ï–í–î–û–ù–ò–ú–ê ---
        print("-" * 50)
        print("6. –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ü–°–ï–í–î–û–ù–ò–ú–ê (DELETE /api/aliases/tables/{table_name})")

        delete_response = requests.delete(f"{BASE_URL}/api/aliases/tables/leads", headers=headers)
        print_status(
            delete_response.status_code == 204,
            "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å 204)."
        )

        get_after_delete = requests.get(f"{BASE_URL}/api/aliases/tables", headers=headers).json()
        print("–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", json.dumps(get_after_delete, indent=2, ensure_ascii=False))

        print_status("leads" not in get_after_delete, "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è 'leads' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        print_status(entity_payload['name'] in get_after_delete, "–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞–ª—Å—è.")

        # --- –®–ê–ì 7: –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ---
        print("-" * 50)
        print("7. –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")

        non_existent_delete = requests.delete(f"{BASE_URL}/api/aliases/tables/non_existent_table", headers=headers)
        print_status(
            non_existent_delete.status_code == 404,
            "–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª 404 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º."
        )

        print("-" * 50)
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –î–õ–Ø –ü–°–ï–í–î–û–ù–ò–ú–û–í –¢–ê–ë–õ–ò–¶ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ")

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
        print(f"URL: {e.request.method} {e.request.url}")
        print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
    except Exception as e:
        print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")


if __name__ == "__main__":
    run_table_aliases_test()