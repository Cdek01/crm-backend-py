# # import requests
# # import json
# # import time
# # from datetime import datetime, timedelta
# #
# # # --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
# #
# # BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
# #
# # # --- –î–∞–Ω–Ω—ã–µ –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
# # USER_EMAIL = "user-b@example.com"
# # USER_PASSWORD = "password-b"
# #
# #
# #
# # # ----------------------------------------------------
# #
# # # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# # def print_status(ok, message):
# #     if ok:
# #         print(f"‚úÖ [PASS] {message}")
# #     else:
# #         print(f"‚ùå [FAIL] {message}"); exit(1)
# #
# #
# # def print_header(title):
# #     print("\n" + "=" * 60)
# #     print(f" {title} ".center(60, "="))
# #     print("=" * 60)
# #
# #
# # def login(email, password):
# #     """
# #     –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
# #     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
# #     """
# #     auth_payload = {'username': email, 'password': password}
# #     auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
# #     auth_response.raise_for_status()  # –í—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
# #     token = auth_response.json()['access_token']
# #     return {'Authorization': f'Bearer {token}'}
# #
# #
# # # --- –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ ---
# # def run_data_types_test():
# #     try:
# #         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
# #         print_header("–®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´")
# #
# #         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—Ö–æ–¥–∞
# #         headers = login(USER_EMAIL, USER_PASSWORD)
# #         print(f" -> –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {USER_EMAIL}")
# #
# #         table_name = f"typed_assets_{int(time.time())}"
# #         table_config = {"name": table_name, "display_name": "–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ê–∫—Ç–∏–≤—ã"}
# #         table_id_response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config)
# #         table_id_response.raise_for_status()
# #         table_id = table_id_response.json()['id']
# #
# #         attributes = [
# #             {"name": "asset_name", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "value_type": "string"},
# #             {"name": "inventory_number", "display_name": "–ò–Ω–≤. –Ω–æ–º–µ—Ä", "value_type": "integer"},
# #             {"name": "cost", "display_name": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "value_type": "float"},
# #             {"name": "purchase_date", "display_name": "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", "value_type": "date"},
# #             {"name": "is_active", "display_name": "–ê–∫—Ç–∏–≤–µ–Ω", "value_type": "boolean"},
# #         ]
# #         for attr in attributes:
# #             requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
# #                           json=attr).raise_for_status()
# #
# #         print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫.")
# #
# #         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–ò–°–ò ---
# #         print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ó–ê–ü–ò–°–ò")
# #
# #         date_value = datetime.now()
# #         record_payload = {
# #             "asset_name": "–ù–æ—É—Ç–±—É–∫",
# #             "inventory_number": 10512,
# #             "cost": 1500.99,
# #             "purchase_date": date_value.isoformat(),
# #             "is_active": True
# #         }
# #         create_resp = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=record_payload)
# #         create_resp.raise_for_status()
# #         created_record = create_resp.json()[0]
# #         record_id = created_record['id']
# #
# #         print(f" -> –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID: {record_id}")
# #
# #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è
# #         print_status(created_record.get('asset_name') == "–ù–æ—É—Ç–±—É–∫", "–¢–∏–ø 'string' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
# #         print_status(created_record.get('inventory_number') == 10512, "–¢–∏–ø 'integer' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
# #         print_status(created_record.get('cost') == 1500.99, "–¢–∏–ø 'float' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
# #         print_status(created_record.get('is_active') is True, "–¢–∏–ø 'boolean' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
# #         print_status(
# #             created_record.get('purchase_date', '').startswith(date_value.isoformat()[:19]),
# #             "–¢–∏–ø 'date' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
# #         )
# #
# #         # --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò –ü–û –†–ê–ó–ù–´–ú –¢–ò–ü–ê–ú ---
# #         print_header("–®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò –ü–û –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ú –ü–û–õ–Ø–ú")
# #
# #         # –î–æ–±–∞–≤–∏–º –µ—â–µ –¥–≤–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
# #         requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json={
# #             "asset_name": "–°—Ç–æ–ª", "inventory_number": 500, "cost": 350.0,
# #             "purchase_date": (datetime.now() - timedelta(days=10)).isoformat(), "is_active": True
# #         })
# #         requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json={
# #             "asset_name": "–ö—Ä–µ—Å–ª–æ", "inventory_number": 20000, "cost": 500.50,
# #             "purchase_date": (datetime.now() + timedelta(days=5)).isoformat(), "is_active": False
# #         })
# #
# #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ float
# #         params = {"sort_by": "cost", "sort_order": "desc"}
# #         resp = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params)
# #         resp.raise_for_status()
# #         sorted_by_cost = [item.get('cost') for item in resp.json()]
# #         print(f" -> –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (desc): {sorted_by_cost}")
# #         print_status(sorted_by_cost == [1500.99, 500.50, 350.0], "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ 'float' —Ä–∞–±–æ—Ç–∞–µ—Ç.")
# #
# #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ boolean
# #         params = {"sort_by": "is_active", "sort_order": "desc"}
# #         resp = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params)
# #         resp.raise_for_status()
# #         sorted_by_active = [item.get('is_active') for item in resp.json()]
# #         print(f" -> –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (desc): {sorted_by_active}")
# #         print_status(sorted_by_active == [True, True, False], "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ 'boolean' —Ä–∞–±–æ—Ç–∞–µ—Ç.")
# #
# #         print("\n" + "=" * 60)
# #         print("üéâüéâüéâ –¢–ï–°–¢ –¢–ò–ü–û–í –î–ê–ù–ù–´–• –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
# #
# #     except requests.exceptions.HTTPError as e:
# #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
# #         print(f"   URL: {e.request.method} {e.request.url}")
# #         print(f"   –°—Ç–∞—Ç—É—Å: {e.response.status_code}")
# #         print(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
# #     except Exception as e:
# #         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
# #
# #
# # if __name__ == "__main__":
# #     run_data_types_test()
#
#
# import requests
# import json
# import time
# from datetime import datetime, timedelta
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
# BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005"
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
#
#
# # -----------------
#
# # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# def print_status(ok, message):
#     if ok:
#         print(f"‚úÖ [PASS] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}"); exit(1)
#
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
#
# def register_and_login(email, password, full_name):
#     """
#     –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç) –∏ –∑–∞—Ç–µ–º –≤—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É.
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
#     """
#     reg_payload = {
#         "email": email, "password": password, "full_name": full_name,
#         "registration_token": CORRECT_REGISTRATION_TOKEN
#     }
#     reg_response = requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload)
#     if reg_response.status_code not in [201, 400]: reg_response.raise_for_status()
#     if reg_response.status_code == 400 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" not in reg_response.text: reg_response.raise_for_status()
#
#     auth_payload = {'username': email, 'password': password}
#     auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
#     auth_response.raise_for_status()
#     token = auth_response.json()['access_token']
#     return {'Authorization': f'Bearer {token}'}
#
#
# # --- –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ ---
# def run_data_types_test():
#     try:
#         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
#         print_header("–®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´")
#
#         unique_id = int(time.time())
#         test_email = f"datatype_tester_{unique_id}@example.com"
#         headers = register_and_login(test_email, "password123", "DataType Tester")
#         print(f" -> –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥: {test_email}")
#
#         table_name = f"typed_assets_{unique_id}"
#         table_config = {"name": table_name, "display_name": "–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ê–∫—Ç–∏–≤—ã"}
#         table_id_resp = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config)
#         table_id = table_id_resp.json()['id']
#
#         attributes = [
#             {"name": "asset_name", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "value_type": "string"},
#             {"name": "inventory_number", "display_name": "–ò–Ω–≤. –Ω–æ–º–µ—Ä", "value_type": "integer"},
#             {"name": "cost", "display_name": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "value_type": "float"},
#             {"name": "purchase_date", "display_name": "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", "value_type": "date"},
#             {"name": "is_active", "display_name": "–ê–∫—Ç–∏–≤–µ–Ω", "value_type": "boolean"},
#         ]
#         for attr in attributes:
#             requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
#                           json=attr).raise_for_status()
#
#         print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫.")
#
#         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–ò–°–ò ---
#         print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ó–ê–ü–ò–°–ò")
#
#         date_value = datetime.now()
#         record_payload = {
#             "asset_name": "–ù–æ—É—Ç–±—É–∫", "inventory_number": 10512, "cost": 1500.99,
#             "purchase_date": date_value.isoformat(), "is_active": True
#         }
#         create_resp = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=record_payload)
#         create_resp.raise_for_status()
#         created_record = create_resp.json()[0]
#         record_id = created_record['id']
#
#         print(f" -> –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID: {record_id}")
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π
#         print_status(created_record.get('asset_name') == "–ù–æ—É—Ç–±—É–∫", "–¢–∏–ø 'string' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
#         print_status(created_record.get('inventory_number') == 10512, "–¢–∏–ø 'integer' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
#         print_status(created_record.get('cost') == 1500.99, "–¢–∏–ø 'float' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
#         print_status(created_record.get('is_active') is True, "–¢–∏–ø 'boolean' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
#         print_status(created_record.get('purchase_date', '').startswith(date_value.isoformat()[:19]),
#                      "–¢–∏–ø 'date' —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª–µ–π
#         print_status(created_record.get('created_at') is not None, "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–ª–µ 'created_at' –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
#         print_status(created_record.get('updated_at') is None,
#                      "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–ª–µ 'updated_at' –ø—É—Å—Ç–æ–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (—ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ).")
#
#         # --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---
#         print_header("–®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
#
#         requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json={
#             "asset_name": "–°—Ç–æ–ª", "inventory_number": 500, "cost": 350.0,
#             "purchase_date": (datetime.now() - timedelta(days=10)).isoformat(), "is_active": True
#         })
#         requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json={
#             "asset_name": "–ö—Ä–µ—Å–ª–æ", "inventory_number": 20000, "cost": 500.50,
#             "purchase_date": (datetime.now() + timedelta(days=5)).isoformat(), "is_active": False
#         })
#
#         params = {"sort_by": "cost", "sort_order": "desc"}
#         resp = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params)
#         sorted_by_cost = [item.get('cost') for item in resp.json()]
#         print(f" -> –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (desc): {sorted_by_cost}")
#         print_status(sorted_by_cost == [1500.99, 500.50, 350.0], "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ 'float' —Ä–∞–±–æ—Ç–∞–µ—Ç.")
#
#         print("\n -> –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è 'updated_at'...")
#         time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–ª–∏—á–∞–ª–æ—Å—å
#         update_payload = {"asset_name": "–ù–æ—É—Ç–±—É–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)"}
#         requests.put(f"{BASE_URL}/api/data/{table_name}/{record_id}", headers=headers,
#                      json=update_payload).raise_for_status()
#
#         updated_record_resp = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id}", headers=headers).json()
#
#         print_status(updated_record_resp.get('updated_at') is not None,
#                      "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–ª–µ 'updated_at' –∑–∞–ø–æ–ª–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
#         print_status(
#             updated_record_resp.get('updated_at') > updated_record_resp.get('created_at'),
#             "–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è."
#         )
#
#         print("\n" + "=" * 60)
#         print("üéâüéâüéâ –¢–ï–°–¢ –¢–ò–ü–û–í –î–ê–ù–ù–´–• –ò –°–ò–°–¢–ï–ú–ù–´–• –ü–û–õ–ï–ô –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
#         print(f"   URL: {e.request.method} {e.request.url}")
#         print(f"   –°—Ç–∞—Ç—É—Å: {e.response.status_code}")
#         print(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
#
#
# if __name__ == "__main__":
#     run_data_types_test()


import requests
import json
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
# BASE_URL = "http://127.0.0.1:8005"
CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
BASE_URL = "http://89.111.169.47:8005"

# -----------------

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}"); exit(1)


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


def register_and_login(email, password, full_name):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç) –∏ –∑–∞—Ç–µ–º –≤—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    reg_payload = {
        "email": email, "password": password, "full_name": full_name,
        "registration_token": CORRECT_REGISTRATION_TOKEN
    }
    reg_response = requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload)
    if reg_response.status_code not in [201, 400]: reg_response.raise_for_status()
    if reg_response.status_code == 400 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" not in reg_response.text: reg_response.raise_for_status()

    auth_payload = {'username': email, 'password': password}
    auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
    auth_response.raise_for_status()
    token = auth_response.json()['access_token']
    return {'Authorization': f'Bearer {token}'}

def get_table_details(headers, table_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ, –≤–∫–ª—é—á–∞—è –µ–µ –∞—Ç—Ä–∏–±—É—Ç—ã."""
    response = requests.get(f"{BASE_URL}/api/meta/entity-types/{table_id}", headers=headers)
    response.raise_for_status()
    return response.json()


# --- –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ ---
def run_ordering_test():
    try:
        # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
        print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –° –ö–û–õ–û–ù–ö–ê–ú–ò")
        headers = register_and_login()

        table_name = f"assets_order_{int(time.time())}"
        table_config = {"name": table_name, "display_name": "–ê–∫—Ç–∏–≤—ã"}
        table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å—Ä–∞–∑—É —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö ID –∏ –∏–º–µ–Ω–∞
        created_attributes = {}  # –°–ª–æ–≤–∞—Ä—å {name: id}
        attributes_to_create = [
            {"name": "title", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "value_type": "string"},
            {"name": "price", "display_name": "–¶–µ–Ω–∞", "value_type": "float"},
            {"name": "status", "display_name": "–°—Ç–∞—Ç—É—Å", "value_type": "string"},
        ]
        for attr in attributes_to_create:
            url = f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes"
            resp = requests.post(url, headers=headers, json=attr).json()
            created_attributes[resp['name']] = resp['id']

        print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å 3 –∫–æ–ª–æ–Ω–∫–∞–º–∏.")

        # --- –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ì–û –ü–û–†–Ø–î–ö–ê ---
        print_header("–®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ì–û –ü–û–†–Ø–î–ö–ê (–ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ)")

        initial_details = get_table_details(headers, table_id)
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        initial_custom_attrs = [a for a in initial_details['attributes'] if a['name'] in created_attributes]
        initial_order_names = [a['name'] for a in initial_custom_attrs]

        print(f" -> –ü–æ–ª—É—á–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: {initial_order_names}")
        expected_initial_order = ["title", "price", "status"]
        print_status(
            initial_order_names == expected_initial_order,
            "–ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—è–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ ID)."
        )

        # --- –®–ê–ì 3: –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–û–í–û–ì–û –ü–û–†–Ø–î–ö–ê ---
        print_header("–®–ê–ì 3: –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–û–í–û–ì–û –ü–û–†–Ø–î–ö–ê")

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º: –°—Ç–∞—Ç—É—Å, –¶–µ–Ω–∞, –ù–∞–∑–≤–∞–Ω–∏–µ
        new_order_ids = [
            created_attributes['status'],
            created_attributes['price'],
            created_attributes['title']
        ]

        order_payload = {"attribute_ids": new_order_ids}
        order_url = f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes/order"

        print(f" -> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –Ω–∞ {order_url} —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º ID: {new_order_ids}")
        order_response = requests.post(order_url, headers=headers, json=order_payload)
        order_response.raise_for_status()

        print_status(order_response.status_code == 200, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.")

        # --- –®–ê–ì 4: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
        print_header("–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê, –ß–¢–û –ù–û–í–´–ô –ü–û–†–Ø–î–û–ö –ü–†–ò–ú–ï–ù–ò–õ–°–Ø")

        final_details = get_table_details(headers, table_id)
        final_custom_attrs = [a for a in final_details['attributes'] if a['name'] in created_attributes]
        final_order_names = [a['name'] for a in final_custom_attrs]

        print(f" -> –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: {final_order_names}")
        expected_final_order = ["status", "price", "title"]
        print_status(
            final_order_names == expected_final_order,
            "–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É."
        )

        print("\n" + "=" * 60)
        print("üéâüéâüéâ –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–û–†–Ø–î–ö–ê –ö–û–õ–û–ù–û–ö –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")

    except requests.exceptions.HTTPError as e:
        print("‚ùå –û–®–ò–ë–ö–ê HTTP:")
    except Exception as e:
        print("‚ùå –û–®–ò–ë–ö–ê HTTP:")


# ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Ä–∞–±–æ—á—É—é —Ñ—É–Ω–∫—Ü–∏—é register_and_login
def register_and_login():
    unique_id = int(time.time())
    email = f"order_tester_{unique_id}@example.com"
    password = "password123"
    reg_payload = {"email": email, "password": password, "full_name": "Order Tester",
                   "registration_token": CORRECT_REGISTRATION_TOKEN}
    requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
    auth_payload = {'username': email, 'password': password}
    token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
    return {'Authorization': f'Bearer {token}'}


if __name__ == "__main__":
    run_ordering_test()