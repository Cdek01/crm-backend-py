# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005"
# REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
#
# # --- –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ---
# OWNER_A_EMAIL = "owner-a@example.com"
# OWNER_A_PASS = "password-a"
# OWNER_A_TABLE_NAME = "reports_a"
# OWNER_A_TABLE_DISPLAY_NAME = "–û—Ç—á–µ—Ç—ã –ö–æ–º–ø–∞–Ω–∏–∏ –ê"
#
# USER_B_EMAIL = "user-b@example.com"
# USER_B_PASS = "password-b"
# USER_B_TABLE_NAME = "tasks_b"
# USER_B_TABLE_DISPLAY_NAME = "–ó–∞–¥–∞—á–∏ –ö–æ–º–ø–∞–Ω–∏–∏ –ë"
#
#
# # -----------------
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
#
# def register(email, password, full_name):
#     print(f" -> –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}...")
#     payload = {"email": email, "password": password, "full_name": full_name, "registration_token": REGISTRATION_TOKEN}
#     resp = requests.post(f"{BASE_URL}/api/auth/register", json=payload)
#     if resp.status_code == 400 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in resp.text:
#         print(f" -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
#         return False  # –ù–µ –Ω–æ–≤—ã–π
#     resp.raise_for_status()
#     print(f" -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
#     return True  # –ù–æ–≤—ã–π
#
#
# def login(email, password):
#     payload = {'username': email, 'password': password}
#     resp = requests.post(f"{BASE_URL}/api/auth/token", data=payload)
#     resp.raise_for_status()
#     token = resp.json()['access_token']
#     return {'Authorization': f'Bearer {token}'}
#
#
# def create_table(headers, name, display_name):
#     print(f" -> –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã '{display_name}' ({name})...")
#     payload = {"name": name, "display_name": display_name}
#     resp = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=payload)
#     if resp.status_code == 400 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in resp.text:
#         print(f" -> –¢–∞–±–ª–∏—Ü–∞ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
#         return
#     resp.raise_for_status()
#     table_id = resp.json()['id']
#     # –î–æ–±–∞–≤–∏–º –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
#     attr_payload = {"name": "title", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "value_type": "string"}
#     requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
#                   json=attr_payload).raise_for_status()
#     print(f" -> –¢–∞–±–ª–∏—Ü–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")
#
#
# def populate_data(headers, table_name, count):
#     print(f" -> –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}' –¥–∞–Ω–Ω—ã–º–∏...")
#     for i in range(count):
#         data = {"title": f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å #{i + 1} –¥–ª—è {table_name}"}
#         requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=data).raise_for_status()
#     print(f" -> –î–æ–±–∞–≤–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π.")
#
#
# def prepare_environment():
#     print_header("–≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´")
#
#     # --- –°–æ–∑–¥–∞–µ–º –í–ª–∞–¥–µ–ª—å—Ü–∞ –ê –∏ –µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ---
#     print("\n--- –°–æ–∑–¥–∞–Ω–∏–µ –í–ª–∞–¥–µ–ª—å—Ü–∞ –ê ---")
#     register(OWNER_A_EMAIL, OWNER_A_PASS, "–í–ª–∞–¥–µ–ª–µ—Ü –ê")
#     owner_a_headers = login(OWNER_A_EMAIL, OWNER_A_PASS)
#     create_table(owner_a_headers, OWNER_A_TABLE_NAME, OWNER_A_TABLE_DISPLAY_NAME)
#     populate_data(owner_a_headers, OWNER_A_TABLE_NAME, 3)  # –î–æ–±–∞–≤–∏–º 3 –∑–∞–ø–∏—Å–∏
#
#     # --- –°–æ–∑–¥–∞–µ–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë –∏ –µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ---
#     print("\n--- –°–æ–∑–¥–∞–Ω–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë ---")
#     register(USER_B_EMAIL, USER_B_PASS, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë")
#     user_b_headers = login(USER_B_EMAIL, USER_B_PASS)
#     create_table(user_b_headers, USER_B_TABLE_NAME, USER_B_TABLE_DISPLAY_NAME)
#     populate_data(user_b_headers, USER_B_TABLE_NAME, 2)  # –î–æ–±–∞–≤–∏–º 2 –∑–∞–ø–∏—Å–∏
#
#     print("\n" + "=" * 60)
#     print("‚úÖ –°—Ä–µ–¥–∞ –≥–æ—Ç–æ–≤–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
#     print("\n–ó–ê–î–ê–ß–ê:")
#     print(f"1. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É.")
#     print(f"2. –°–æ–∑–¥–∞–π—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞ '–ö–æ–º–ø–∞–Ω–∏—è {USER_B_EMAIL}'.")
#     print(
#         f"3. –î–∞–π—Ç–µ —ç—Ç–æ–π —Ä–æ–ª–∏ –ø—Ä–∞–≤–æ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã –í–ª–∞–¥–µ–ª—å—Ü–∞ –ê. –ò–º—è –ø—Ä–∞–≤–∞ –±—É–¥–µ—Ç: 'data:view:{OWNER_A_TABLE_NAME}'")
#     print(f"4. –ù–∞–∑–Ω–∞—á—å—Ç–µ —ç—Ç—É —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '{USER_B_EMAIL}'.")
#
#
# if __name__ == "__main__":
#     prepare_environment()

import requests
import json

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–î–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏) ---
BASE_URL = "http://127.0.0.1:8005"

OWNER_A_TABLE_NAME = "reports_a"
USER_B_EMAIL = "user-b@example.com"
USER_B_PASS = "password-b"
USER_B_TABLE_NAME = "tasks_b"


# -----------------

def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}"); exit(1)


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


def login(email, password):
    payload = {'username': email, 'password': password}
    resp = requests.post(f"{BASE_URL}/api/auth/token", data=payload)
    resp.raise_for_status()
    token = resp.json()['access_token']
    return {'Authorization': f'Bearer {token}'}

def verify_access():
    print_header(f"–≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –î–õ–Ø {USER_B_EMAIL}")

    try:
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ë
        user_b_headers = login(USER_B_EMAIL, USER_B_PASS)
        print(" -> –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ë —É—Å–ø–µ—à–Ω–∞.")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä —Ç–∞–±–ª–∏—Ü
        print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü ---")
        meta_resp = requests.get(f"{BASE_URL}/api/meta/entity-types", headers=user_b_headers)
        meta_resp.raise_for_status()
        visible_tables = meta_resp.json()
        visible_names = {t['name'] for t in visible_tables}

        print(f" -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—ã: {visible_names}")
        print_status(USER_B_TABLE_NAME in visible_names, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –°–í–û–Æ —Ç–∞–±–ª–∏—Ü—É.")
        print_status(OWNER_A_TABLE_NAME in visible_names, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –û–ë–©–£–Æ —Ç–∞–±–ª–∏—Ü—É –í–ª–∞–¥–µ–ª—å—Ü–∞ –ê.")

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –î–ê–ù–ù–´–ú
        print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö ---")

        # 3.1 –î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü–µ
        own_data_resp = requests.get(f"{BASE_URL}/api/data/{USER_B_TABLE_NAME}", headers=user_b_headers)
        own_data_resp.raise_for_status()
        print_status(
            len(own_data_resp.json()) == 2,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ({len(own_data_resp.json())} –∏–∑ 2 –∑–∞–ø–∏—Å–µ–π)."
        )

        # 3.2 –î–æ—Å—Ç—É–ø –∫ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        shared_data_resp = requests.get(f"{BASE_URL}/api/data/{OWNER_A_TABLE_NAME}", headers=user_b_headers)
        if shared_data_resp.status_code == 403:
            print_status(False, "–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –û–ë–©–ï–ô —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—Ä–µ—â–µ–Ω (403). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –≤ —Ä–æ–ª–∏.")
        shared_data_resp.raise_for_status()

        print_status(
            len(shared_data_resp.json()) == 3,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –û–ë–©–ï–ô —Ç–∞–±–ª–∏—Ü—ã ({len(shared_data_resp.json())} –∏–∑ 3 –∑–∞–ø–∏—Å–µ–π)."
        )

        print("\n" + "=" * 60)
        print("üéâüéâüéâ –¢–ï–°–¢ –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–Ø –î–û–°–¢–£–ü–ê –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")


# ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ñ—É–Ω–∫—Ü–∏—é login()
def login(email, password):
    payload = {'username': email, 'password': password}
    resp = requests.post(f"{BASE_URL}/api/auth/token", data=payload)
    resp.raise_for_status()
    token = resp.json()['access_token']
    return {'Authorization': f'Bearer {token}'}


if __name__ == "__main__":
    verify_access()