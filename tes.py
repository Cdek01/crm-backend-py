# # import requests
# # import json
# # import time
# #
# # # --- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
# # BASE_URL = "http://89.111.169.47:8005"
# # # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# # UNIQUE_ID = int(time.time())
# # USER_EMAIL = f"testuser_{UNIQUE_ID}@example.com"
# # USER_PASSWORD = "a_very_secure_password"
# # # ---------------------------------
# #
# # try:
# #     # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
# #     print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {USER_EMAIL}...")
# #     register_payload = {
# #         "email": USER_EMAIL,
# #         "password": USER_PASSWORD
# #         # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, full_name)
# #     }
# #
# #     # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/auth/register
# #     # –ï—Å–ª–∏ –æ–Ω –¥—Ä—É–≥–æ–π - –∏–∑–º–µ–Ω–∏—Ç–µ URL
# #     register_response = requests.post(f"{BASE_URL}/api/auth/register", json=register_payload)
# #
# #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–æ–±—ã—á–Ω–æ –∫–æ–¥ 201 Created)
# #     if register_response.status_code == 201:
# #         print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
# #     elif register_response.status_code == 400 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in register_response.text:
# #         # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–≤–∞–∂–¥—ã –≤ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É
# #         print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
# #     else:
# #         # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
# #         register_response.raise_for_status()
# #
# #     # --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê (–í–•–û–î) ---
# #     print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
# #     auth_payload_form = {'username': USER_EMAIL, 'password': USER_PASSWORD}
# #
# #     auth_response = requests.post(
# #         f"{BASE_URL}/api/auth/token",
# #         data=auth_payload_form
# #     )
# #     auth_response.raise_for_status()
# #     token = auth_response.json()['access_token']
# #     print("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
# #
# #     # --- –®–ê–ì 3: –ó–ê–ü–†–û–° –ù–ê –ü–û–õ–£–ß–ï–ù–ò–ï –õ–ò–î–û–í ---
# #     print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ 100 –ª–∏–¥–æ–≤...")
# #     headers = {'Authorization': f'Bearer {token}'}
# #     params = {'skip': 0, 'limit': 100}
# #
# #     leads_response = requests.get(f"{BASE_URL}/api/leads/", headers=headers, params=params)
# #     leads_response.raise_for_status()
# #
# #     leads_data = leads_response.json()
# #
# #     print(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(leads_data)} –ª–∏–¥–æ–≤.")
# #     if leads_data:
# #         print("\n–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –ª–∏–¥–∞:")
# #         print(json.dumps(leads_data[0], indent=2, ensure_ascii=False))
# #     else:
# #         print("–°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –ø—É—Å—Ç.")
# #
# # except requests.exceptions.HTTPError as e:
# #     print(f"\n--- –û—à–∏–±–∫–∞ HTTP ---")
# #     print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
# #     print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# # except requests.exceptions.RequestException as e:
# #     print(f"\n--- –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---")
# #     print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
#
#
# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
# BASE_URL = "http://89.111.169.47:8005"  # IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
#
# # –ú—ã –±—É–¥–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
# UNIQUE_ID = int(time.time())
# USER_EMAIL = f"testuser_{UNIQUE_ID}@example.com"
# USER_PASSWORD = "a_very_secure_password_123!"
#
#
# # ---------------------------------
#
# def run_test():
#     """
#     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:
#     1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#     2. –í—Ö–æ–¥ (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞).
#     3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞.
#     4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤.
#     """
#     token = None
#
#     try:
#         # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
#         print("-" * 50)
#         print(f"1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {USER_EMAIL}")
#
#         register_payload = {
#             "email": USER_EMAIL,
#             "password": USER_PASSWORD,
#             "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # –î–æ–±–∞–≤—å—Ç–µ/—É–¥–∞–ª–∏—Ç–µ –ø–æ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π —Å—Ö–µ–º–æ–π UserCreate
#         }
#
#         # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/auth/register. –ï—Å–ª–∏ –æ–Ω –¥—Ä—É–≥–æ–π, –∏–∑–º–µ–Ω–∏—Ç–µ.
#         register_response = requests.post(f"{BASE_URL}/api/auth/register", json=register_payload)
#
#         if register_response.status_code == 201:
#             print("‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
#             # print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", json.dumps(register_response.json(), indent=2))
#         else:
#             # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
#             register_response.raise_for_status()
#
#         # --- –®–ê–ì 2: –í–•–û–î (–ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê) ---
#         print("-" * 50)
#         print(f"2. –í–•–û–î –í –°–ò–°–¢–ï–ú–£: {USER_EMAIL}")
#
#         auth_payload_form = {'username': USER_EMAIL, 'password': USER_PASSWORD}
#
#         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
#         auth_response.raise_for_status()
#
#         token = auth_response.json()['access_token']
#         print("‚úÖ –£–°–ü–ï–•: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
#         # print("–¢–æ–∫–µ–Ω:", token[:30] + "...")
#
#         # --- –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –õ–ò–î–ê ---
#         print("-" * 50)
#         print("3. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –õ–ò–î–ê")
#
#         headers = {'Authorization': f'Bearer {token}'}
#
#         lead_payload = {
#             # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –ø–æ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π —Å—Ö–µ–º–æ–π LeadCreate
#             "organization_name": f"–¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è {UNIQUE_ID}",
#             "inn": "1234567890",
#             "contact_number": "+79991234567",
#             "email": f"contact_{UNIQUE_ID}@company.com",
#             "source": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç",
#             "lead_status": "New",
#             "rating": 5,
#             "rejection_reason": "–ù–µ—Ç",
#             "responsible_manager_id": 1  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ
#         }
#
#         create_lead_response = requests.post(f"{BASE_URL}/api/leads/", headers=headers, json=lead_payload)
#         create_lead_response.raise_for_status()
#
#         created_lead = create_lead_response.json()
#         print("‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
#         print("–î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞:", json.dumps(created_lead, indent=2, ensure_ascii=False))
#
#         # --- –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ò–î–û–í ---
#         print("-" * 50)
#         print("4. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ò–î–û–í")
#
#         leads_response = requests.get(f"{BASE_URL}/api/leads/", headers=headers)
#         leads_response.raise_for_status()
#
#         leads_data = leads_response.json()
#
#         print(f"‚úÖ –£–°–ü–ï–•: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(leads_data)} –ª–∏–¥–æ–≤.")
#
#         if leads_data:
#             print("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏–¥ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
#         else:
#             print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –ø—É—Å—Ç, —Ö–æ—Ç—è –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –æ–¥–∏–Ω.")
#
#         print("-" * 50)
#         print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ")
#
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP –Ω–∞ —à–∞–≥–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
#         print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {e.request.method} {e.request.url}")
#         print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e.request.body}")
#         print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
#         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
#     except requests.exceptions.RequestException as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
#         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
#
#
# # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç
# if __name__ == "__main__":
#     run_test()


import requests
import json
import time

# --- –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
BASE_URL = "http://89.111.169.47:8005"  # IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

# –ú—ã –±—É–¥–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
UNIQUE_ID = int(time.time())
USER_EMAIL = f"testuser_{UNIQUE_ID}@example.com"
USER_PASSWORD = "a_very_secure_password_123!"


# ---------------------------------

def run_test():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–ª—è –ª–∏–¥–æ–≤:
    1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.
    2. –í—Ö–æ–¥.
    3. –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞.
    4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤.
    5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞ –ø–æ ID.
    6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞.
    7. –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥–∞.
    """
    token = None
    created_lead_id = None

    try:
        # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ---
        print("-" * 50)
        print(f"1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {USER_EMAIL}")
        register_payload = {"email": USER_EMAIL, "password": USER_PASSWORD, "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
        register_response = requests.post(f"{BASE_URL}/api/auth/register", json=register_payload)
        register_response.raise_for_status()
        print("‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        # --- –®–ê–ì 2: –í–•–û–î ---
        print("-" * 50)
        print(f"2. –í–•–û–î –í –°–ò–°–¢–ï–ú–£: {USER_EMAIL}")
        auth_payload_form = {'username': USER_EMAIL, 'password': USER_PASSWORD}
        auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
        auth_response.raise_for_status()
        token = auth_response.json()['access_token']
        headers = {'Authorization': f'Bearer {token}'}
        print("‚úÖ –£–°–ü–ï–•: –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.")

        # --- –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –õ–ò–î–ê ---
        print("-" * 50)
        print("3. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –õ–ò–î–ê")
        lead_payload = {
            "organization_name": f"Initial Company {UNIQUE_ID}",
            "inn": "1234567890",
            "contact_number": "+79991234567",
            "email": f"contact_{UNIQUE_ID}@company.com",
            "source": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç",
            "lead_status": "New",
        }
        create_lead_response = requests.post(f"{BASE_URL}/api/leads/", headers=headers, json=lead_payload)
        create_lead_response.raise_for_status()
        created_lead = create_lead_response.json()
        created_lead_id = created_lead['id']
        print(f"‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —Å ID={created_lead_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

        # --- –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ò–î–û–í ---
        print("-" * 50)
        print("4. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ò–î–û–í")
        leads_response = requests.get(f"{BASE_URL}/api/leads/", headers=headers)
        leads_response.raise_for_status()
        leads_data = leads_response.json()
        print(f"‚úÖ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω–æ {len(leads_data)} –ª–∏–¥–æ–≤.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –ª–∏–¥ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        found = any(lead['id'] == created_lead_id for lead in leads_data)
        if not found:
            raise Exception("–°–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ!")

        # --- –®–ê–ì 5: –ü–û–õ–£–ß–ï–ù–ò–ï –õ–ò–î–ê –ü–û ID ---
        print("-" * 50)
        print(f"5. –ü–û–õ–£–ß–ï–ù–ò–ï –õ–ò–î–ê –ü–û ID: {created_lead_id}")
        get_lead_response = requests.get(f"{BASE_URL}/api/leads/{created_lead_id}", headers=headers)
        get_lead_response.raise_for_status()
        fetched_lead = get_lead_response.json()
        assert fetched_lead['id'] == created_lead_id
        print(f"‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —Å ID={created_lead_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")

        # --- –®–ê–ì 6: –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ò–î–ê ---
        print("-" * 50)
        print(f"6. –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ò–î–ê –° ID: {created_lead_id}")
        update_payload = {
            "organization_name": f"Updated Company Name {UNIQUE_ID}",
            "lead_status": "In Progress"
        }
        update_lead_response = requests.put(f"{BASE_URL}/api/leads/{created_lead_id}", headers=headers,
                                            json=update_payload)
        update_lead_response.raise_for_status()
        updated_lead = update_lead_response.json()

        assert updated_lead['organization_name'] == update_payload['organization_name']
        assert updated_lead['lead_status'] == update_payload['lead_status']
        print("‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        print("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(updated_lead, indent=2, ensure_ascii=False))

        # --- –®–ê–ì 7: –£–î–ê–õ–ï–ù–ò–ï –õ–ò–î–ê ---
        print("-" * 50)
        print(f"7. –£–î–ê–õ–ï–ù–ò–ï –õ–ò–î–ê –° ID: {created_lead_id}")
        delete_lead_response = requests.delete(f"{BASE_URL}/api/leads/{created_lead_id}", headers=headers)
        # –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ 204 No Content
        if delete_lead_response.status_code != 204:
            raise Exception(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {delete_lead_response.status_code}, –û—Ç–≤–µ—Ç: {delete_lead_response.text}")
        print(f"‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —Å ID={created_lead_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ª–∏–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω (–¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É 404)
        get_deleted_lead_response = requests.get(f"{BASE_URL}/api/leads/{created_lead_id}", headers=headers)
        if get_deleted_lead_response.status_code == 404:
            print("‚úÖ –£–°–ü–ï–•: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞, —á—Ç–æ –ª–∏–¥ —É–¥–∞–ª–µ–Ω (–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 404).")
        else:
            raise Exception("–õ–∏–¥ –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ID!")

        print("-" * 50)
        print("\nüéâ –í–°–ï CRUD-–¢–ï–°–¢–´ –î–õ–Ø –õ–ò–î–û–í –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ")

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP –Ω–∞ —à–∞–≥–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
        print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {e.request.method} {e.request.url}")
        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–ª–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if e.request.body:
            print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e.request.body}")
        print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
    except Exception as e:
        print(f"\n‚ùå –ü–†–û–ò–ó–û–®–õ–ê –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê")
        print(f"–û—à–∏–±–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç
if __name__ == "__main__":
    run_test()
