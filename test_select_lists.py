import requests
import json
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
BASE_URL = "http://127.0.0.1:8005"
CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"


# -----------------

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}"); exit(1)


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


def register_and_login():
    unique_id = int(time.time())
    email = f"select_tester_{unique_id}@example.com"
    password = "password123"
    reg_payload = {"email": email, "password": password, "full_name": "Select Tester",
                   "registration_token": CORRECT_REGISTRATION_TOKEN}
    requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
    auth_payload = {'username': email, 'password': password}
    token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
    return {'Authorization': f'Bearer {token}'}


# --- –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ ---
def run_select_lists_test():
    list_id = None
    options = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π {name: id}

    try:
        # --- –®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
        print_header("–®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
        headers = register_and_login()

        # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –°–ü–ò–°–ö–ê ---
        print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –°–ü–ò–°–ö–ê '–°—Ç–∞—Ç—É—Å—ã –ü—Ä–æ–µ–∫—Ç–∞'")
        list_payload = {"name": "–°—Ç–∞—Ç—É—Å—ã –ü—Ä–æ–µ–∫—Ç–∞"}
        resp = requests.post(f"{BASE_URL}/api/meta/select-lists/", headers=headers, json=list_payload)
        resp.raise_for_status()
        list_data = resp.json()
        list_id = list_data['id']
        print_status(True, f"–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {list_id}")

        # --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –í –û–ë–©–ï–ú –°–ü–ò–°–ö–ï ---
        resp = requests.get(f"{BASE_URL}/api/meta/select-lists/", headers=headers)
        all_lists = resp.json()
        found = any(l['id'] == list_id and l['name'] == "–°—Ç–∞—Ç—É—Å—ã –ü—Ä–æ–µ–∫—Ç–∞" for l in all_lists)
        print_status(found, "–°–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º –ø–µ—Ä–µ—á–Ω–µ.")

        # --- –®–ê–ì 4: –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–¶–ò–ô ---
        print_header(f"–®–ê–ì 4: –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–¶–ò–ô –í –°–ü–ò–°–û–ö ID={list_id}")
        options_to_add = ["–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"]
        for option_value in options_to_add:
            payload = {"value": option_value}
            url = f"{BASE_URL}/api/meta/select-lists/{list_id}/options"
            resp = requests.post(url, headers=headers, json=payload)
            resp.raise_for_status()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            options[option_value] = resp.json()['id']
            print(f" -> –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø—Ü–∏—è '{option_value}' —Å ID: {options[option_value]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–ø—Ü–∏–∏ –¥–æ–±–∞–≤–∏–ª–∏—Å—å
        resp = requests.get(f"{BASE_URL}/api/meta/select-lists/{list_id}", headers=headers).json()
        option_values = {opt['value'] for opt in resp['options']}
        print_status(len(option_values) == 3, f"–í —Å–ø–∏—Å–∫–µ —Ç–µ–ø–µ—Ä—å {len(option_values)} –æ–ø—Ü–∏–∏.")

        # --- –®–ê–ì 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ü–¶–ò–ò ---
        print_header("–®–ê–ì 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ü–¶–ò–ò '–í —Ä–∞–±–æ—Ç–µ'")
        option_id_to_update = options["–í —Ä–∞–±–æ—Ç–µ"]
        new_value = "–í –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        update_payload = {"value": new_value}
        url = f"{BASE_URL}/api/meta/select-lists/{list_id}/options/{option_id_to_update}"
        resp = requests.put(url, headers=headers, json=update_payload)
        resp.raise_for_status()
        print_status(resp.json()['value'] == new_value, "–¢–µ–∫—Å—Ç –æ–ø—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")

        # --- –®–ê–ì 6: –£–î–ê–õ–ï–ù–ò–ï –û–ü–¶–ò–ò ---
        print_header("–®–ê–ì 6: –£–î–ê–õ–ï–ù–ò–ï –û–ü–¶–ò–ò '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'")
        option_id_to_delete = options["–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"]
        url = f"{BASE_URL}/api/meta/select-lists/{list_id}/options/{option_id_to_delete}"
        resp = requests.delete(url, headers=headers)
        print_status(resp.status_code == 204, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å 204).")

        # --- –®–ê–ì 7: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
        print_header("–®–ê–ì 7: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–ê–í–ê –°–ü–ò–°–ö–ê")
        final_resp = requests.get(f"{BASE_URL}/api/meta/select-lists/{list_id}", headers=headers).json()
        final_option_values = {opt['value'] for opt in final_resp['options']}

        print(f" -> –í —Å–ø–∏—Å–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å –æ–ø—Ü–∏–∏: {final_option_values}")
        print_status(len(final_option_values) == 2, "–í —Å–ø–∏—Å–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–π (2).")
        print_status("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" not in final_option_values, "–û–ø—Ü–∏—è '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' —É–¥–∞–ª–µ–Ω–∞.")
        print_status("–í –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" in final_option_values,
                     "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ–ø—Ü–∏—è '–í –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' –Ω–∞ –º–µ—Å—Ç–µ.")

        print("\n" + "=" * 60)
        print("üéâüéâüéâ –¢–ï–°–¢ CRUD-–û–ü–ï–†–ê–¶–ò–ô –î–õ–Ø –í–´–ü–ê–î–ê–Æ–©–ò–• –°–ü–ò–°–ö–û–í –ü–†–û–ô–î–ï–ù! üéâüéâüéâ")

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
        print(f"   URL: {e.request.method} {e.request.url}")
        print(f"   –°—Ç–∞—Ç—É—Å: {e.response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
    except Exception as e:
        print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")


# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Ä–∞–±–æ—á—É—é —Ñ—É–Ω–∫—Ü–∏—é register_and_login


if __name__ == "__main__":
    run_select_lists_test()