# test_bulk_load.py
import requests
import time
import json

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# BASE_URL = "http://127.0.0.1:8005"
BASE_URL = "http://89.111.169.47:8005"
CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
# -----------------

UNIQUE_ID = int(time.time())


def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}"); exit(1)


def run_test():
    # --- –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ ---
    print("--- 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---")
    user_email = f"bulk_loader_{UNIQUE_ID}@example.com"
    password = "password123"
    reg_payload = {"email": user_email, "password": password, "registration_token": CORRECT_REGISTRATION_TOKEN}
    requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()

    auth_payload = {"username": user_email, "password": password}
    token_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
    token_response.raise_for_status()
    token = token_response.json()['access_token']
    headers = {'Authorization': f'Bearer {token}'}
    print_status(True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")

    # --- –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ---
    print("\n--- 2. –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–æ–≤ ---")
    leads_to_load = [
        {"organization_name": f"Bulk Company A {UNIQUE_ID}", "rating": 5},
        {"organization_name": f"Bulk Company B {UNIQUE_ID}", "rating": 4, "lead_status": "In Progress"},
        {"organization_name": f"Bulk Company C {UNIQUE_ID}", "rating": 3, "source": "Import"},
    ]

    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(leads_to_load)} –∑–∞–ø–∏—Å–µ–π –Ω–∞ /api/leads/bulk-load...")
    bulk_response = requests.post(f"{BASE_URL}/api/leads/bulk-load", headers=headers, json=leads_to_load)

    print(f"–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {bulk_response.status_code}")
    print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {bulk_response.text}")

    bulk_response.raise_for_status()
    created_count = bulk_response.json().get("created_count")

    print_status(
        created_count == len(leads_to_load),
        f"–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {created_count}"
    )

    # --- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    print("\n--- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---")
    list_response = requests.get(f"{BASE_URL}/api/leads/", headers=headers)
    list_response.raise_for_status()
    total_leads_in_db = len(list_response.json())

    print(f"–í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_leads_in_db}")
    print_status(
        total_leads_in_db == len(leads_to_load),
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö."
    )

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    run_test()