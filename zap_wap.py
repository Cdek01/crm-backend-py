import requests
import json
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ API
BASE_URL = "http://127.0.0.1:8005"  # –ò–ª–∏ http://89.111.169.47:8005, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# BASE_URL = "http://89.111.169.47:8005"  # –ò–ª–∏ http://89.111.169.47:8005, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ ---
test_state = {
    "token": None,
    "headers": {},
    "project_type_id": None,
    "task_type_id": None,
}


def print_status(ok, message):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    if ok:
        print(f"‚úÖ [SUCCESS] {message}")
    else:
        print(f"‚ùå [FAILURE] {message}")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –æ—à–∏–±–∫–µ
        exit(1)


def test_delete_attribute_flow(base_url, headers):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É–¥–∞–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ (–∫–æ–ª–æ–Ω–∫–∏).
    """
    print("\n--- –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ê–¢–†–ò–ë–£–¢–ê ---")

    # --- –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∫–æ–ª–æ–Ω–∫–∏) ---
    print("\n--- –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã ---")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã"
        response = requests.post(f"{base_url}/api/meta/entity-types", headers=headers,
                                 json={"name": "candidates", "display_name": "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã"})
        assert response.status_code == 201
        entity_type = response.json()
        entity_type_id = entity_type["id"]
        print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã' —Å ID: {entity_type_id}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "–û–∂–∏–¥–∞–µ–º–∞—è –ó–ü" (–æ—Å—Ç–∞–Ω–µ—Ç—Å—è)
        response = requests.post(f"{base_url}/api/meta/entity-types/{entity_type_id}/attributes", headers=headers,
                                 json={"name": "expected_salary", "display_name": "–û–∂–∏–¥–∞–µ–º–∞—è –ó–ü",
                                       "value_type": "integer"})
        assert response.status_code == 201
        salary_attr = response.json()
        print_status(True, "–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–û–∂–∏–¥–∞–µ–º–∞—è –ó–ü'")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "–°—Ç–∞—Ç—É—Å" (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞)
        response = requests.post(f"{base_url}/api/meta/entity-types/{entity_type_id}/attributes", headers=headers,
                                 json={"name": "status", "display_name": "–°—Ç–∞—Ç—É—Å", "value_type": "string"})
        assert response.status_code == 201
        status_attr = response.json()
        status_attr_id = status_attr["id"]
        print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–°—Ç–∞—Ç—É—Å' —Å ID: {status_attr_id}")

    except (requests.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {e}")
        return

    # --- –®–∞–≥ 2: –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ ---
    print("\n--- –®–∞–≥ 2: –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏ ---")
    entity1_id, entity2_id = None, None
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        payload1 = {"expected_salary": 150000, "status": "–í —Ä–∞–±–æ—Ç–µ"}
        response = requests.post(f"{base_url}/api/data/candidates", headers=headers, json=payload1)
        assert response.status_code == 201
        entity1_id = response.json()['id']
        print_status(True, "–°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏.")

        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É
        payload2 = {"expected_salary": 200000, "status": "–û—Ç–∫–∞–∑"}
        response = requests.post(f"{base_url}/api/data/candidates", headers=headers, json=payload2)
        assert response.status_code == 201
        entity2_id = response.json()['id']
        print_status(True, "–°–æ–∑–¥–∞–Ω–∞ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏.")

    except (requests.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏: {e}")
        return

    # --- –®–∞–≥ 3: –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ ---
    print("\n--- –®–∞–≥ 3: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '–°—Ç–∞—Ç—É—Å' ---")
    try:
        response = requests.delete(f"{base_url}/api/meta/entity-types/{entity_type_id}/attributes/{status_attr_id}",
                                   headers=headers)
        assert response.status_code == 204
        print_status(True, "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '–°—Ç–∞—Ç—É—Å'.")

    except (requests.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")
        return

    # --- –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π ---
    print("\n--- –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π —É–¥–∞–ª–µ–Ω–∏—è ---")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã - –∫–æ–ª–æ–Ω–∫–∏ "–°—Ç–∞—Ç—É—Å" –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
        response = requests.get(f"{base_url}/api/meta/entity-types/{entity_type_id}", headers=headers)
        assert response.status_code == 200
        updated_entity_type = response.json()
        attribute_names = {attr['name'] for attr in updated_entity_type['attributes']}
        assert 'status' not in attribute_names
        assert 'expected_salary' in attribute_names
        print_status(True, "–ö–æ–ª–æ–Ω–∫–∞ '–°—Ç–∞—Ç—É—Å' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ - –ø–æ–ª—è "status" –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
        response = requests.get(f"{base_url}/api/data/candidates/{entity1_id}", headers=headers)
        assert response.status_code == 200
        entity_data = response.json()
        assert 'status' not in entity_data
        assert 'expected_salary' in entity_data
        assert entity_data['expected_salary'] == 150000
        print_status(True, "–ü–æ–ª–µ 'status' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ).")

    except (requests.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π: {e}")
        return

    # --- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ---
    print("\n--- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ ---")
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ 'sms_status'
        sms_status_attr_id = next(
            (attr['id'] for attr in updated_entity_type['attributes'] if attr['name'] == 'sms_status'), None)
        assert sms_status_attr_id is not None

        response = requests.delete(f"{base_url}/api/meta/entity-types/{entity_type_id}/attributes/{sms_status_attr_id}",
                                   headers=headers)
        # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç–∞, –∞ –Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
        assert response.status_code == 400
        print_status(True, "–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 400 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–ª–æ–Ω–∫—É.")

    except (requests.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—â–∏—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {e}")
        return

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("--- –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø META API ---")

    # --- –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –í—Ö–æ–¥ ---
    print("\n--- –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---")
    import time

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    UNIQUE_ID = int(time.time())
    USER_EMAIL = f"meta_tester_{UNIQUE_ID}@example.com"
    USER_PASSWORD = "a_very_secure_password_123!"
    CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        register_payload = {
            "email": USER_EMAIL,
            "password": USER_PASSWORD,
            "full_name": f"Meta Tester {UNIQUE_ID}",
            "registration_token": CORRECT_REGISTRATION_TOKEN
        }
        reg_response = requests.post(f"{BASE_URL}/api/auth/register", json=register_payload)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        assert reg_response.status_code == 201, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_response.text}"

        # –í—Ö–æ–¥
        auth_payload_form = {'username': USER_EMAIL, 'password': USER_PASSWORD}
        auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
        assert auth_response.status_code == 200, f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {auth_response.text}"

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ì–õ–û–ë–ê–õ–¨–ù–´–ô test_state
        token = auth_response.json()["access_token"]
        test_state["token"] = token
        test_state["headers"] = {"Authorization": f"Bearer {token}"}
        # -------------------------

        print_status(True, "–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è

    # --- –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¢–∏–ø–æ–≤ –°—É—â–Ω–æ—Å—Ç–µ–π ---
    print("\n--- –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö '—Ç–∞–±–ª–∏—Ü' (Entity Types) ---")
    try:
        # –¢–µ–ø–µ—Ä—å test_state["headers"] —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        headers = test_state["headers"]

        # –°–æ–∑–¥–∞–µ–º "–ü—Ä–æ–µ–∫—Ç—ã"
        project_payload = {"name": f"projects_{UNIQUE_ID}", "display_name": f"–ü—Ä–æ–µ–∫—Ç—ã {UNIQUE_ID}"}
        response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=project_payload)
        assert response.status_code == 201, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '–ü—Ä–æ–µ–∫—Ç–æ–≤': {response.text}"
        project_data = response.json()
        test_state["project_type_id"] = project_data["id"]
        print_status(True, f"–°–æ–∑–¥–∞–Ω —Ç–∏–ø '–ü—Ä–æ–µ–∫—Ç—ã' —Å ID: {test_state['project_type_id']}")

        # –°–æ–∑–¥–∞–µ–º "–ó–∞–¥–∞—á–∏"
        task_payload = {"name": f"tasks_{UNIQUE_ID}", "display_name": f"–ó–∞–¥–∞—á–∏ {UNIQUE_ID}"}
        response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=task_payload)
        assert response.status_code == 201, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '–ó–∞–¥–∞—á': {response.text}"
        task_data = response.json()
        test_state["task_type_id"] = task_data["id"]
        print_status(True, f"–°–æ–∑–¥–∞–Ω —Ç–∏–ø '–ó–∞–¥–∞—á–∏' —Å ID: {test_state['task_type_id']}")

    except (requests.exceptions.RequestException, AssertionError) as e:
        # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
        return

    # --- –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¢–∏–ø–æ–≤ –°—É—â–Ω–æ—Å—Ç–µ–π ---
    print("\n--- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ '—Ç–∞–±–ª–∏—Ü' (GET /api/meta/entity-types) ---")
    try:
        response = requests.get(f"{BASE_URL}/api/meta/entity-types", headers=test_state["headers"])
        assert response.status_code == 200
        all_types = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert isinstance(all_types, list)
        # –í–ê–ñ–ù–û: –¢–µ—Å—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
        assert len(all_types) == 2

        type_names = {t['name'] for t in all_types}
        assert "prottoooeqqr" in type_names and "tasttoooeqqr" in type_names

        print_status(True, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞–º–∏ '—Ç–∞–±–ª–∏—Ü—ã'.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

    # --- –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¢–∏–ø–∞ –°—É—â–Ω–æ—Å—Ç–∏ –ø–æ ID ---
    print("\n--- –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π '—Ç–∞–±–ª–∏—Ü—ã' –ø–æ ID (GET /api/meta/entity-types/{id}) ---")
    try:
        project_id = test_state["project_type_id"]
        response = requests.get(f"{BASE_URL}/api/meta/entity-types/{project_id}", headers=test_state["headers"])

        assert response.status_code == 200
        project_details = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert project_details["id"] == project_id
        assert project_details["name"] == "prottoooeqqr"
        assert project_details["display_name"] == "–ü—Ä–ættoooeqqr"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        assert isinstance(project_details["attributes"], list)
        assert len(project_details["attributes"]) > 0
        attribute_names = {attr['name'] for attr in project_details['attributes']}
        assert "phone_number" in attribute_names
        assert "sms_status" in attribute_names

        print_status(True, "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ '–ü—Ä–æ–µ–∫—Ç—ã' –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞: {e}")

    # --- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID ---
    print("\n--- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π '—Ç–∞–±–ª–∏—Ü—ã' (–æ–∂–∏–¥–∞–µ–º 404) ---")
    try:
        non_existent_id = 999999
        response = requests.get(f"{BASE_URL}/api/meta/entity-types/{non_existent_id}", headers=test_state["headers"])
        assert response.status_code == 404

        print_status(True, f"–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID {non_existent_id}.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID: {e}")

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è Meta API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")

    # --- –®–∞–≥ 6: –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π ---
    print("\n--- –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è '—Ç–∞–±–ª–∏—Ü—ã' (DELETE /api/meta/entity-types/{id}) ---")
    try:
        # –ë—É–¥–µ–º —É–¥–∞–ª—è—Ç—å '–ó–∞–¥–∞—á–∏'
        task_id_to_delete = test_state["task_type_id"]
        response = requests.delete(
            f"{BASE_URL}/api/meta/entity-types/{task_id_to_delete}",
            headers=test_state["headers"]
        )
        # –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        assert response.status_code == 204

        print_status(True, f"–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å ID {task_id_to_delete}.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞: {e}")

    # --- –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π —É–¥–∞–ª–µ–Ω–∏—è ---
    print("\n--- –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ '—Ç–∞–±–ª–∏—Ü–∞' –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ---")
    try:
        # ... (–∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 404 –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

        # 7.2. –í –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø
        response_list_after_delete = requests.get(
            f"{BASE_URL}/api/meta/entity-types",
            headers=test_state["headers"]
        )
        assert response_list_after_delete.status_code == 200
        list_after_delete = response_list_after_delete.json()
        assert len(list_after_delete) == 1
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Ç–∞–±–ª–∏—Ü—ã - 'prott', –∫–∞–∫ –º—ã –∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
        assert list_after_delete[0]["name"] == "prottoooeqqr"
        print_status(True, "–û–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –æ—Å—Ç–∞–≤—à—É—é—Å—è '—Ç–∞–±–ª–∏—Ü—É'.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π —É–¥–∞–ª–µ–Ω–∏—è: {e}")


    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    # ... (–∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–µ—Ä–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤) ...
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ test_state["headers"] —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
    test_delete_attribute_flow(BASE_URL, test_state["headers"])

print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")

if __name__ == "__main__":
    main()