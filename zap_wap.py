import requests
import json
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ API
BASE_URL = "http://127.0.0.1:8005"  # –ò–ª–∏ http://89.111.169.47:8005, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ ---
test_state = {
    "token": None,
    "headers": {},
    "project_type_id": None,
    "task_type_id": None,
}


def print_status(ok, message):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    if ok:
        print(f"‚úÖ [SUCCESS] {message}")
    else:
        print(f"‚ùå [FAILURE] {message}")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –æ—à–∏–±–∫–µ
        exit(1)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("--- –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø META API ---")

    # --- –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –í—Ö–æ–¥ ---
    print("\n--- –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---")
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
    unique_email = f"testuser_{int(datetime.now().timestamp())}@test.com"
    password = "superstrongpassword123"

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        reg_response = requests.post(
            f"{BASE_URL}/api/auth/register",
            json={"email": unique_email, "password": password, "full_name": "Meta Tester"}
        )
        assert reg_response.status_code == 201
        print_status(True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unique_email} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        # –í—Ö–æ–¥
        login_response = requests.post(
            f"{BASE_URL}/api/auth/token",
            data={"username": unique_email, "password": password}
        )
        assert login_response.status_code == 200
        token = login_response.json()["access_token"]
        test_state["token"] = token
        test_state["headers"] = {"Authorization": f"Bearer {token}"}
        print_status(True, "–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω JWT —Ç–æ–∫–µ–Ω.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return

    # --- –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¢–∏–ø–æ–≤ –°—É—â–Ω–æ—Å—Ç–µ–π ---
    print("\n--- –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö '—Ç–∞–±–ª–∏—Ü' (Entity Types) ---")
    try:
        # –°–æ–∑–¥–∞–µ–º "–ü—Ä–æ–µ–∫—Ç—ã"
        project_payload = {"name": "projects", "display_name": "–ü—Ä–æ–µ–∫—Ç—ã"}
        response = requests.post(
            f"{BASE_URL}/api/meta/entity-types",
            headers=test_state["headers"],
            json=project_payload
        )
        assert response.status_code == 201
        project_data = response.json()
        test_state["project_type_id"] = project_data["id"]
        print_status(True, f"–°–æ–∑–¥–∞–Ω —Ç–∏–ø '–ü—Ä–æ–µ–∫—Ç—ã' —Å ID: {test_state['project_type_id']}")

        # –°–æ–∑–¥–∞–µ–º "–ó–∞–¥–∞—á–∏"
        task_payload = {"name": "tasks", "display_name": "–ó–∞–¥–∞—á–∏"}
        response = requests.post(
            f"{BASE_URL}/api/meta/entity-types",
            headers=test_state["headers"],
            json=task_payload
        )
        assert response.status_code == 201
        task_data = response.json()
        test_state["task_type_id"] = task_data["id"]
        print_status(True, f"–°–æ–∑–¥–∞–Ω —Ç–∏–ø '–ó–∞–¥–∞—á–∏' —Å ID: {test_state['task_type_id']}")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")

    # --- –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¢–∏–ø–æ–≤ –°—É—â–Ω–æ—Å—Ç–µ–π ---
    print("\n--- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ '—Ç–∞–±–ª–∏—Ü' (GET /api/meta/entity-types) ---")
    try:
        response = requests.get(f"{BASE_URL}/api/meta/entity-types", headers=test_state["headers"])
        assert response.status_code == 200
        all_types = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert isinstance(all_types, list)
        # –í–ê–ñ–ù–û: –¢–µ—Å—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
        assert len(all_types) == 2

        type_names = {t['name'] for t in all_types}
        assert "projects" in type_names and "tasks" in type_names

        print_status(True, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞–º–∏ '—Ç–∞–±–ª–∏—Ü—ã'.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

    # --- –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¢–∏–ø–∞ –°—É—â–Ω–æ—Å—Ç–∏ –ø–æ ID ---
    print("\n--- –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π '—Ç–∞–±–ª–∏—Ü—ã' –ø–æ ID (GET /api/meta/entity-types/{id}) ---")
    try:
        project_id = test_state["project_type_id"]
        response = requests.get(f"{BASE_URL}/api/meta/entity-types/{project_id}", headers=test_state["headers"])

        assert response.status_code == 200
        project_details = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert project_details["id"] == project_id
        assert project_details["name"] == "projects"
        assert project_details["display_name"] == "–ü—Ä–æ–µ–∫—Ç—ã"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        assert isinstance(project_details["attributes"], list)
        assert len(project_details["attributes"]) > 0
        attribute_names = {attr['name'] for attr in project_details['attributes']}
        assert "phone_number" in attribute_names
        assert "sms_status" in attribute_names

        print_status(True, "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ '–ü—Ä–æ–µ–∫—Ç—ã' –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞: {e}")

    # --- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID ---
    print("\n--- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π '—Ç–∞–±–ª–∏—Ü—ã' (–æ–∂–∏–¥–∞–µ–º 404) ---")
    try:
        non_existent_id = 999999
        response = requests.get(f"{BASE_URL}/api/meta/entity-types/{non_existent_id}", headers=test_state["headers"])
        assert response.status_code == 404

        print_status(True, f"–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID {non_existent_id}.")

    except (requests.exceptions.RequestException, AssertionError) as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID: {e}")

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è Meta API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")


if __name__ == "__main__":
    main()