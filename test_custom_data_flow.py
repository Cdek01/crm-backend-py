# # test_custom_data_flow.py
# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# # BASE_URL = "http://127.0.0.1:8005"  # –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
# BASE_URL = "http://89.111.169.47:8005"  # –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
#
# # –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –≤–∞—à —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ .env
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# # -----------------
#
# UNIQUE_ID = int(time.time())
#
#
# def print_status(ok, message):
#     """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
#     if ok:
#         print(f"‚úÖ [SUCCESS] {message}")
#     else:
#         print(f"‚ùå [FAILURE] {message}")
#         exit(1)
#
#
# def run_custom_table_test():
#     """
#     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–∞–±–ª–∏—Ü—É:
#     1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
#     2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'vacancies' —á–µ—Ä–µ–∑ /meta API.
#     3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–µ–µ –∫–æ–ª–æ–Ω–æ–∫ 'title', 'salary', 'is_remote'.
#     4. –ó–∞–ø–∏—Å—å –¥–≤—É—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ /data API.
#     5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
#     """
#     headers = {}
#
#     try:
#         # --- –®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
#         print("-" * 50)
#         print("1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
#         user_email = f"custom_data_tester@example.com"
#         password = "password123"
#         reg_payload = {"email": user_email, "password": password, "registration_token": CORRECT_REGISTRATION_TOKEN}
#         requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
#
#         auth_payload = {"username": user_email, "password": password}
#         token_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
#         token_response.raise_for_status()
#         token = token_response.json()['access_token']
#         headers = {'Authorization': f'Bearer {token}'}
#         print_status(True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
#
#         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ ---
#         print("-" * 50)
#         print("2. –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ 'vacancies'")
#
#         table_name = f"vacancies_{UNIQUE_ID}"
#         entity_payload = {"name": table_name, "display_name": "–í–∞–∫–∞–Ω—Å–∏–∏"}
#         response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=entity_payload)
#         response.raise_for_status()
#         entity_type_id = response.json()['id']
#         print(f" -> –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å ID={entity_type_id}")
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
#         attributes_to_create = [
#             {"name": "title", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", "value_type": "string"},
#             {"name": "salary", "display_name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "value_type": "integer"},
#             {"name": "is_remote", "display_name": "–£–¥–∞–ª–µ–Ω–∫–∞", "value_type": "boolean"},
#         ]
#         for attr_payload in attributes_to_create:
#             response = requests.post(f"{BASE_URL}/api/meta/entity-types/{entity_type_id}/attributes", headers=headers,
#                                      json=attr_payload)
#             response.raise_for_status()
#             print(f" -> –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '{attr_payload['name']}'")
#         print_status(True, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
#
#         # --- –®–ê–ì 3: –ó–ê–ü–ò–°–¨ –î–ê–ù–ù–´–• –í –ö–ê–°–¢–û–ú–ù–£–Æ –¢–ê–ë–õ–ò–¶–£ ---
#         print("-" * 50)
#         print(f"3. –ó–ê–ü–ò–°–¨ –î–ê–ù–ù–´–• –í '{table_name}' (POST /api/data/{table_name})")
#
#         # –ó–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
#         vacancy1_data = {
#             "title": "Python Developer",
#             "salary": 200000,
#             "is_remote": True,
#             "phone_number": "+79990000001"  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–ª–µ
#         }
#         response1 = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=vacancy1_data)
#         response1.raise_for_status()
#         print_status(response1.status_code == 201, f"–ó–∞–ø–∏—Å—å '{vacancy1_data['title']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
#
#         # –ó–∞–ø–∏—Å—å –≤—Ç–æ—Ä–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
#         vacancy2_data = {
#             "title": "Frontend Developer",
#             "salary": 180000,
#             "is_remote": False,
#         }
#         response2 = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=vacancy2_data)
#         response2.raise_for_status()
#         print_status(response2.status_code == 201, f"–ó–∞–ø–∏—Å—å '{vacancy2_data['title']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
#
#         # --- –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–ò–°–ê–ù–ù–´–• –î–ê–ù–ù–´–• ---
#         print("-" * 50)
#         print(f"4. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• (GET /api/data/{table_name})")
#
#         response = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers)
#         response.raise_for_status()
#         all_vacancies = response.json()
#
#         print_status(len(all_vacancies) == 2, f"–í —Ç–∞–±–ª–∏—Ü–µ –Ω–∞–π–¥–µ–Ω–æ {len(all_vacancies)} –∑–∞–ø–∏—Å–∏, –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å.")
#
#         # –ò—â–µ–º –Ω–∞—à—É –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤ –æ—Ç–≤–µ—Ç–µ
#         python_dev = next((v for v in all_vacancies if v.get("title") == "Python Developer"), None)
#
#         print_status(python_dev is not None, "–í–∞–∫–∞–Ω—Å–∏—è 'Python Developer' –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.")
#
#         if python_dev:
#             print_status(
#                 python_dev.get("salary") == vacancy1_data["salary"],
#                 "–ü–æ–ª–µ 'salary' –¥–ª—è Python Developer —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
#             )
#             print_status(
#                 python_dev.get("is_remote") == vacancy1_data["is_remote"],
#                 "–ü–æ–ª–µ 'is_remote' –¥–ª—è Python Developer —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
#             )
#             print_status(
#                 python_dev.get("phone_number") == vacancy1_data["phone_number"],
#                 "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–ª–µ 'phone_number' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
#             )
#
#         print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
#         print(f"URL: {e.request.method} {e.request.url}")
#         print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
#         print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
#
#
# if __name__ == "__main__":
#     run_custom_table_test()


# view_custom_data.py
import requests
import json

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://127.0.0.1:8005"  # –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

# --- –î–ê–ù–ù–´–ï –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ---
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —Ç–∞–±–ª–∏—Ü—É
USER_EMAIL = "custom1.com"  # <--- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô EMAIL
USER_PASSWORD = "password123"

# --- –ò–ú–Ø –ö–ê–°–¢–û–ú–ù–û–ô –¢–ê–ë–õ–ò–¶–´ ---
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
TABLE_NAME_TO_VIEW = "vacancies_1754478335"  # <--- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ò–ú–Ø –í–ê–®–ï–ô –¢–ê–ë–õ–ò–¶–´


# ------------------------------------

def get_auth_token(email, password):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    try:
        auth_payload = {"username": email, "password": password}
        response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
        response.raise_for_status()
        token = response.json().get("access_token")
        if not token:
            raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞.")
        print("   ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        return token
    except Exception as e:
        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: {e}")
        return None


def view_custom_table_data(token, table_name):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    print(f"\n2. –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª –ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—à–∏–±–∫—É
        if response.status_code == 404:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ —Å –∏–º–µ–Ω–µ–º '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404 Not Found).")
            print("   -> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
            return

        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—Ä—É–≥–∏–µ HTTP –æ—à–∏–±–∫–∏ (401, 500 –∏ —Ç.–¥.)

        data = response.json()

        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π.")

        if not data:
            print("   -> –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
            return

        print("\n--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã ---")
        # –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        for i, record in enumerate(data, 1):
            print(f"\n--- –ó–∞–ø–∏—Å—å #{i} ---")
            print(json.dumps(record, indent=2, ensure_ascii=False))
        print("\n--------------------------")

    except requests.exceptions.HTTPError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print(f"   ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":

        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        access_token = get_auth_token(USER_EMAIL, USER_PASSWORD)

        # 2. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if access_token:
            view_custom_table_data(access_token, TABLE_NAME_TO_VIEW)