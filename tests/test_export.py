import requests
import sys
import json
import time
import pandas as pd
import io
from typing import Dict, Any, Optional
from urllib.parse import quote_plus

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://89.111.169.47:8005"
EMAIL = "1@example.com"
PASSWORD = "string"

# --- –ü–ê–†–ê–ú–ï–¢–†–´ –¢–ï–°–¢–ê (–í–ê–ñ–ù–û –ù–ê–°–¢–†–û–ò–¢–¨!) ---
# –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "leads" –∏–ª–∏ "my_custom_table")
TARGET_TABLE_NAME = "deals_ai_test_1730449557"  # <-- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ò–ú–Ø –í–ê–®–ï–ô –¢–ê–ë–õ–ò–¶–´
# ID –æ–¥–Ω–æ–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
KNOWN_ID_IN_TABLE = 1  # <-- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô ID

# -----------------

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
test_failed = False


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def print_status(ok: bool, message: str, data: Optional[Any] = None):
    global test_failed
    if ok:
        print(f"‚úÖ [OK] {message}")
    else:
        test_failed = True
        print(f"‚ùå [FAIL] {message}")
        if data:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∫—Ä–∞—Å–∏–≤–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å JSON, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                print(f"  ‚îî‚îÄ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
            except (TypeError, json.JSONDecodeError):
                print(f"  ‚îî‚îÄ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")
        print("")


def print_header(title: str):
    print("\n" + "=" * 80)
    print(f" {title} ".center(80, "="))
    print("=" * 80)


def login() -> Optional[Dict[str, str]]:
    print_header("–≠—Ç–∞–ø 0: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    try:
        url = f"{BASE_URL}/api/auth/token"
        r = requests.post(url, data={'username': EMAIL, 'password': PASSWORD})
        r.raise_for_status()
        token = r.json()["access_token"]
        print_status(True, f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.")
        return {'Authorization': f'Bearer {token}'}
    except Exception as e:
        response_text = getattr(e, 'response', 'N/A')
        if hasattr(response_text, 'text'):
            response_text = response_text.text
        print_status(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", response_text)
        return None


# --- –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def test_export(headers: Dict[str, str], table_name: str, format: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
    """
    print_header(f"–¢–µ—Å—Ç: –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã '{table_name}' –≤ —Ñ–æ—Ä–º–∞—Ç {format.upper()}")
    try:
        # 1. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        url = f"{BASE_URL}/api/data/{table_name}/export?format={format}"
        print(f"-> –ó–∞–ø—Ä–æ—Å –Ω–∞ URL: {url}")
        r = requests.get(url, headers=headers)

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥
        if r.status_code != 200:
            print_status(False, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ 200, –ø–æ–ª—É—á–µ–Ω {r.status_code}", r.json())
            return
        print_status(True, f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ 200 OK.")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
        content_type = r.headers.get("Content-Type", "")
        expected_type = "text/csv" if format == "csv" else "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        if expected_type not in content_type:
            print_status(False, f"–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type. –û–∂–∏–¥–∞–ª—Å—è '{expected_type}', –ø–æ–ª—É—á–µ–Ω '{content_type}'")
        else:
            print_status(True, f"Content-Type –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: '{content_type}'")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
        file_content = r.content
        if not file_content:
            print_status(False, "–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–µ, —Ñ–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
            return

        stream = io.BytesIO(file_content)
        if format == "csv":
            df = pd.read_csv(stream)
        else:  # xlsx
            df = pd.read_excel(stream, engine='openpyxl')

        print_status(True,
                     f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –ø–æ–º–æ—â—å—é pandas. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}, –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}.")
        print("-> –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
        print(df.head())

    except Exception as e:
        print_status(False, f"–í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def test_export_with_filter(headers: Dict[str, str], table_name: str, known_id: int):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞.
    """
    print_header(f"–¢–µ—Å—Ç: –≠–∫—Å–ø–æ—Ä—Ç —Å —Ñ–∏–ª—å—Ç—Ä–æ–º (ID = {known_id})")
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∫–æ–¥–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è URL
        filters_obj = [{"field": "id", "op": "eq", "value": known_id}]
        filters_str = quote_plus(json.dumps(filters_obj))

        url = f"{BASE_URL}/api/data/{table_name}/export?format=csv&filters={filters_str}"
        print(f"-> –ó–∞–ø—Ä–æ—Å –Ω–∞ URL: {url}")
        r = requests.get(url, headers=headers)
        r.raise_for_status()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_csv(io.BytesIO(r.content))
        if len(df) == 1:
            print_status(True, f"–§–∏–ª—å—Ç—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í —Ñ–∞–π–ª–µ –Ω–∞–π–¥–µ–Ω–∞ 1 –∑–∞–ø–∏—Å—å —Å ID={df.iloc[0]['ID']}.")
        else:
            print_status(False, f"–§–∏–ª—å—Ç—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û–∂–∏–¥–∞–ª–∞—Å—å 1 –∑–∞–ø–∏—Å—å, –ø–æ–ª—É—á–µ–Ω–æ {len(df)}.", df.to_dict())

    except Exception as e:
        print_status(False, f"–í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", getattr(e, 'response', 'N/A'))


def test_error_scenarios(headers: Dict[str, str], table_name: str):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏.
    """
    print_header("–¢–µ—Å—Ç: –°—Ü–µ–Ω–∞—Ä–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏")

    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞
    try:
        bad_table = "nonexistent_table_12345"
        url = f"{BASE_URL}/api/data/{bad_table}/export?format=csv"
        r = requests.get(url, headers=headers)
        if r.status_code == 404:
            print_status(True, f"–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª 404 Not Found –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã.")
        else:
            print_status(False, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 404, –Ω–æ –ø–æ–ª—É—á–µ–Ω {r.status_code}", r.text)
    except Exception as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")

    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    try:
        url = f"{BASE_URL}/api/data/{table_name}/export?format=pdf"
        r = requests.get(url, headers=headers)
        if r.status_code == 422:
            print_status(True, f"–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª 422 Unprocessable Entity –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.")
        else:
            print_status(False, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 422, –Ω–æ –ø–æ–ª—É—á–µ–Ω {r.status_code}", r.text)
    except Exception as e:
        print_status(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    auth_headers = login()
    if not auth_headers:
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_export(auth_headers, TARGET_TABLE_NAME, "csv")
    test_export(auth_headers, TARGET_TABLE_NAME, "xlsx")
    test_export_with_filter(auth_headers, TARGET_TABLE_NAME, KNOWN_ID_IN_TABLE)
    test_error_scenarios(auth_headers, TARGET_TABLE_NAME)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_header("–ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    if not test_failed:
        print("üéâ ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("üö® ‚ùå –í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏.")
        sys.exit(1)


if __name__ == "__main__":
    main()