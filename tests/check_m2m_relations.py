import requests
import time
import sys
import json
from typing import Set

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://89.111.169.47:8005"
EMAIL = "1@example.com"
PASSWORD = "string"
# -----------------

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
test_failed = False


def print_status(ok, message):
    global test_failed
    if ok:
        print(f"‚úÖ [OK] {message}")
    else:
        print(f"‚ùå [FAIL] {message}\n"); test_failed = True


def print_header(title):
    print("\n" + "=" * 60);
    print(f" {title} ".center(60, "="));
    print("=" * 60)


def login():
    try:
        r = requests.post(f"{BASE_URL}/api/auth/token", data={'username': EMAIL, 'password': PASSWORD})
        r.raise_for_status()
        return {'Authorization': f'Bearer {r.json()["access_token"]}'}
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}"); return None


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ---
def run_m2m_test():
    headers = login()
    if not headers: return

    ids = {}

    try:
        # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
        print_header("–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü '–°—Ç—É–¥–µ–Ω—Ç—ã' –∏ '–ö—É—Ä—Å—ã'")
        students_name = f"students_m2m_{int(time.time())}"
        courses_name = f"courses_m2m_{int(time.time())}"
        resp = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers,
                             json={"name": students_name, "display_name": "–°—Ç—É–¥–µ–Ω—Ç—ã (M2M)"})
        resp.raise_for_status();
        ids['students_table'] = resp.json()
        resp = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers,
                             json={"name": courses_name, "display_name": "–ö—É—Ä—Å—ã (M2M)"})
        resp.raise_for_status();
        ids['courses_table'] = resp.json()
        resp = requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['students_table']['id']}/attributes",
                             headers=headers,
                             json={"name": "student_name", "display_name": "–ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞", "value_type": "string"})
        resp.raise_for_status();
        ids['student_name_attr'] = resp.json()
        resp = requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['courses_table']['id']}/attributes",
                             headers=headers,
                             json={"name": "course_title", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", "value_type": "string"})
        resp.raise_for_status();
        ids['course_title_attr'] = resp.json()
        print_status(True, "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω.")

        # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï M2M –°–í–Ø–ó–ò ---
        print_header("–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π M2M —Å–≤—è–∑–∏")
        payload = {
            "name": "student_courses", "display_name": "–ö—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞", "value_type": "relation",
            "relation_type": "many-to-many",  # <--- –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
            "target_entity_type_id": ids['courses_table']['id'],
            "display_attribute_id": ids['course_title_attr']['id'],
            "create_back_relation": True,
            "back_relation_name": "course_students", "back_relation_display_name": "–°—Ç—É–¥–µ–Ω—Ç—ã –Ω–∞ –∫—É—Ä—Å–µ",
            "back_relation_display_attribute_id": ids['student_name_attr']['id']
        }
        resp = requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['students_table']['id']}/attributes",
                             headers=headers, json=payload)
        resp.raise_for_status();
        ids['student_courses_attr'] = resp.json()
        print_status(True, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ M2M —Å–≤—è–∑–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

        # --- –®–ê–ì 3: –ù–ê–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ---
        print_header("–®–∞–≥ 3: –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–∞–Ω–Ω—ã–º–∏")
        resp = requests.post(f"{BASE_URL}/api/data/{students_name}", headers=headers, json={"student_name": "–ò–≤–∞–Ω"});
        resp.raise_for_status();
        ids['ivan'] = resp.json()['data'][0]
        resp = requests.post(f"{BASE_URL}/api/data/{students_name}", headers=headers, json={"student_name": "–ú–∞—Ä–∏—è"});
        resp.raise_for_status();
        ids['maria'] = resp.json()['data'][0]
        resp = requests.post(f"{BASE_URL}/api/data/{courses_name}", headers=headers,
                             json={"course_title": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"});
        resp.raise_for_status();
        ids['math'] = resp.json()['data'][0]
        resp = requests.post(f"{BASE_URL}/api/data/{courses_name}", headers=headers, json={"course_title": "–ò—Å—Ç–æ—Ä–∏—è"});
        resp.raise_for_status();
        ids['history'] = resp.json()['data'][0]
        print_status(True, "–°–æ–∑–¥–∞–Ω—ã 2 —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ 2 –∫—É—Ä—Å–∞.")

        # --- –®–ê–ì 4: –£–°–¢–ê–ù–û–í–ö–ê –°–í–Ø–ó–ï–ô ---
        print_header("–®–∞–≥ 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ M2M —Å–≤—è–∑–µ–π")
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ò–≤–∞–Ω–∞ –Ω–∞ –ú–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –ò—Å—Ç–æ—Ä–∏—é
        ivan_courses_ids = [ids['math']['id'], ids['history']['id']]
        resp = requests.put(f"{BASE_URL}/api/data/{students_name}/{ids['ivan']['id']}", headers=headers,
                            json={"student_courses": ivan_courses_ids})
        resp.raise_for_status();
        print_status(True, "–ò–≤–∞–Ω –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ 2 –∫—É—Ä—Å–∞.")
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ú–∞—Ä–∏—é —Ç–æ–ª—å–∫–æ –Ω–∞ –ú–∞—Ç–µ–º–∞—Ç–∏–∫—É
        maria_courses_ids = [ids['math']['id']]
        resp = requests.put(f"{BASE_URL}/api/data/{students_name}/{ids['maria']['id']}", headers=headers,
                            json={"student_courses": maria_courses_ids})
        resp.raise_for_status();
        print_status(True, "–ú–∞—Ä–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ 1 –∫—É—Ä—Å.")

        # --- –®–ê–ì 5: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
        print_header("–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è M2M —Å–≤—è–∑–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–≤–∞–Ω–∞
        resp = requests.get(f"{BASE_URL}/api/data/{students_name}/{ids['ivan']['id']}", headers=headers);
        ivan_details = resp.json()
        ivan_courses: Set[str] = set(ivan_details.get('student_courses', []))
        print(f" -> –ö—É—Ä—Å—ã –ò–≤–∞–Ω–∞: {ivan_courses}")
        print_status(ivan_courses == {"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"}, "–£ –ò–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è 2 –∫—É—Ä—Å–∞.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ú–∞—Ä–∏—é
        resp = requests.get(f"{BASE_URL}/api/data/{students_name}/{ids['maria']['id']}", headers=headers);
        maria_details = resp.json()
        maria_courses: Set[str] = set(maria_details.get('student_courses', []))
        print(f" -> –ö—É—Ä—Å—ã –ú–∞—Ä–∏–∏: {maria_courses}")
        print_status(maria_courses == {"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}, "–£ –ú–∞—Ä–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 1 –∫—É—Ä—Å.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å)
        resp = requests.get(f"{BASE_URL}/api/data/{courses_name}/{ids['math']['id']}", headers=headers);
        math_details = resp.json()
        math_students: Set[str] = set(math_details.get('course_students', []))
        print(f" -> –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–∞ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ: {math_students}")
        print_status(math_students == {"–ò–≤–∞–Ω", "–ú–∞—Ä–∏—è"}, "–ù–∞ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è 2 —Å—Ç—É–¥–µ–Ω—Ç–∞.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å –ò—Å—Ç–æ—Ä–∏–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å)
        resp = requests.get(f"{BASE_URL}/api/data/{courses_name}/{ids['history']['id']}", headers=headers);
        history_details = resp.json()
        history_students: Set[str] = set(history_details.get('course_students', []))
        print(f" -> –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–∞ –ò—Å—Ç–æ—Ä–∏–∏: {history_students}")
        print_status(history_students == {"–ò–≤–∞–Ω"}, "–ù–∞ –ò—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 1 —Å—Ç—É–¥–µ–Ω—Ç.")

    except requests.exceptions.HTTPError as e:
        print_status(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HTTP: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print_status(False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # --- –û–ß–ò–°–¢–ö–ê ---
        print_header("–û—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü)")
        if 'students_table' in ids:
            requests.delete(f"{BASE_URL}/api/meta/entity-types/{ids['students_table']['id']}", headers=headers)
            print(f" -> –¢–∞–±–ª–∏—Ü–∞ '–°—Ç—É–¥–µ–Ω—Ç—ã (M2M)' —É–¥–∞–ª–µ–Ω–∞.")
        if 'courses_table' in ids:
            requests.delete(f"{BASE_URL}/api/meta/entity-types/{ids['courses_table']['id']}", headers=headers)
            print(f" -> –¢–∞–±–ª–∏—Ü–∞ '–ö—É—Ä—Å—ã (M2M)' —É–¥–∞–ª–µ–Ω–∞.")

        if not test_failed:
            print("\n" + "üéâ" * 20 + "\n –í—Å–µ —Ç–µ—Å—Ç—ã Many-to-Many —Å–≤—è–∑–µ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! \n" + "üéâ" * 20)
        else:
            sys.exit(1)


if __name__ == "__main__":
    run_m2m_test()