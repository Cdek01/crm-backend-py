# # # # # import requests
# # # # # import json
# # # # # import time
# # # # #
# # # # # # --- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
# # # # # BASE_URL = "http://89.111.169.47:8005"
# # # # # # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# # # # # UNIQUE_ID = int(time.time())
# # # # # USER_EMAIL = f"testuser_{UNIQUE_ID}@example.com"
# # # # # USER_PASSWORD = "a_very_secure_password"
# # # # # # ---------------------------------
# # # # #
# # # # # try:
# # # # #     # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
# # # # #     print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {USER_EMAIL}...")
# # # # #     register_payload = {
# # # # #         "email": USER_EMAIL,
# # # # #         "password": USER_PASSWORD
# # # # #         # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, full_name)
# # # # #     }
# # # # #
# # # # #     # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/auth/register
# # # # #     # –ï—Å–ª–∏ –æ–Ω –¥—Ä—É–≥–æ–π - –∏–∑–º–µ–Ω–∏—Ç–µ URL
# # # # #     register_response = requests.post(f"{BASE_URL}/api/auth/register", json=register_payload)
# # # # #
# # # # #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–æ–±—ã—á–Ω–æ –∫–æ–¥ 201 Created)
# # # # #     if register_response.status_code == 201:
# # # # #         print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
# # # # #     elif register_response.status_code == 400 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in register_response.text:
# # # # #         # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–≤–∞–∂–¥—ã –≤ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É
# # # # #         print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
# # # # #     else:
# # # # #         # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
# # # # #         register_response.raise_for_status()
# # # # #
# # # # #     # --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê (–í–•–û–î) ---
# # # # #     print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
# # # # #     auth_payload_form = {'username': USER_EMAIL, 'password': USER_PASSWORD}
# # # # #
# # # # #     auth_response = requests.post(
# # # # #         f"{BASE_URL}/api/auth/token",
# # # # #         data=auth_payload_form
# # # # #     )
# # # # #     auth_response.raise_for_status()
# # # # #     token = auth_response.json()['access_token']
# # # # #     print("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
# # # # #
# # # # #     # --- –®–ê–ì 3: –ó–ê–ü–†–û–° –ù–ê –ü–û–õ–£–ß–ï–ù–ò–ï –õ–ò–î–û–í ---
# # # # #     print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ 100 –ª–∏–¥–æ–≤...")
# # # # #     headers = {'Authorization': f'Bearer {token}'}
# # # # #     params = {'skip': 0, 'limit': 100}
# # # # #
# # # # #     leads_response = requests.get(f"{BASE_URL}/api/leads/", headers=headers, params=params)
# # # # #     leads_response.raise_for_status()
# # # # #
# # # # #     leads_data = leads_response.json()
# # # # #
# # # # #     print(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(leads_data)} –ª–∏–¥–æ–≤.")
# # # # #     if leads_data:
# # # # #         print("\n–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –ª–∏–¥–∞:")
# # # # #         print(json.dumps(leads_data[0], indent=2, ensure_ascii=False))
# # # # #     else:
# # # # #         print("–°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –ø—É—Å—Ç.")
# # # # #
# # # # # except requests.exceptions.HTTPError as e:
# # # # #     print(f"\n--- –û—à–∏–±–∫–∞ HTTP ---")
# # # # #     print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
# # # # #     print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# # # # # except requests.exceptions.RequestException as e:
# # # # #     print(f"\n--- –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---")
# # # # #     print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
# # # #
# # # #
# # # # import requests
# # # # import json
# # # # import time
# # # #
# # # # # --- –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
# # # # BASE_URL = "http://89.111.169.47:8005"  # IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
# # # #
# # # # # –ú—ã –±—É–¥–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
# # # # UNIQUE_ID = int(time.time())
# # # # USER_EMAIL = f"testuser_{UNIQUE_ID}@example.com"
# # # # USER_PASSWORD = "a_very_secure_password_123!"
# # # #
# # # #
# # # # # ---------------------------------
# # # #
# # # # def run_test():
# # # #     """
# # # #     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:
# # # #     1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# # # #     2. –í—Ö–æ–¥ (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞).
# # # #     3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞.
# # # #     4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤.
# # # #     """
# # # #     token = None
# # # #
# # # #     try:
# # # #         # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
# # # #         print("-" * 50)
# # # #         print(f"1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {USER_EMAIL}")
# # # #
# # # #         register_payload = {
# # # #             "email": USER_EMAIL,
# # # #             "password": USER_PASSWORD,
# # # #             "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # –î–æ–±–∞–≤—å—Ç–µ/—É–¥–∞–ª–∏—Ç–µ –ø–æ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π —Å—Ö–µ–º–æ–π UserCreate
# # # #         }
# # # #
# # # #         # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/auth/register. –ï—Å–ª–∏ –æ–Ω –¥—Ä—É–≥–æ–π, –∏–∑–º–µ–Ω–∏—Ç–µ.
# # # #         register_response = requests.post(f"{BASE_URL}/api/auth/register", json=register_payload)
# # # #
# # # #         if register_response.status_code == 201:
# # # #             print("‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
# # # #             # print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", json.dumps(register_response.json(), indent=2))
# # # #         else:
# # # #             # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
# # # #             register_response.raise_for_status()
# # # #
# # # #         # --- –®–ê–ì 2: –í–•–û–î (–ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê) ---
# # # #         print("-" * 50)
# # # #         print(f"2. –í–•–û–î –í –°–ò–°–¢–ï–ú–£: {USER_EMAIL}")
# # # #
# # # #         auth_payload_form = {'username': USER_EMAIL, 'password': USER_PASSWORD}
# # # #
# # # #         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
# # # #         auth_response.raise_for_status()
# # # #
# # # #         token = auth_response.json()['access_token']
# # # #         print("‚úÖ –£–°–ü–ï–•: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
# # # #         # print("–¢–æ–∫–µ–Ω:", token[:30] + "...")
# # # #
# # # #         # --- –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –õ–ò–î–ê ---
# # # #         print("-" * 50)
# # # #         print("3. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –õ–ò–î–ê")
# # # #
# # # #         headers = {'Authorization': f'Bearer {token}'}
# # # #
# # # #         lead_payload = {
# # # #             # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –ø–æ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π —Å—Ö–µ–º–æ–π LeadCreate
# # # #             "organization_name": f"–¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è {UNIQUE_ID}",
# # # #             "inn": "1234567890",
# # # #             "contact_number": "+79991234567",
# # # #             "email": f"contact_{UNIQUE_ID}@company.com",
# # # #             "source": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç",
# # # #             "lead_status": "New",
# # # #             "rating": 5,
# # # #             "rejection_reason": "–ù–µ—Ç",
# # # #             "responsible_manager_id": 1  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ
# # # #         }
# # # #
# # # #         create_lead_response = requests.post(f"{BASE_URL}/api/leads/", headers=headers, json=lead_payload)
# # # #         create_lead_response.raise_for_status()
# # # #
# # # #         created_lead = create_lead_response.json()
# # # #         print("‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
# # # #         print("–î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞:", json.dumps(created_lead, indent=2, ensure_ascii=False))
# # # #
# # # #         # --- –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ò–î–û–í ---
# # # #         print("-" * 50)
# # # #         print("4. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ò–î–û–í")
# # # #
# # # #         leads_response = requests.get(f"{BASE_URL}/api/leads/", headers=headers)
# # # #         leads_response.raise_for_status()
# # # #
# # # #         leads_data = leads_response.json()
# # # #
# # # #         print(f"‚úÖ –£–°–ü–ï–•: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(leads_data)} –ª–∏–¥–æ–≤.")
# # # #
# # # #         if leads_data:
# # # #             print("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏–¥ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
# # # #         else:
# # # #             print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ –ø—É—Å—Ç, —Ö–æ—Ç—è –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –æ–¥–∏–Ω.")
# # # #
# # # #         print("-" * 50)
# # # #         print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ")
# # # #
# # # #
# # # #     except requests.exceptions.HTTPError as e:
# # # #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP –Ω–∞ —à–∞–≥–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
# # # #         print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {e.request.method} {e.request.url}")
# # # #         print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e.request.body}")
# # # #         print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
# # # #         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# # # #     except requests.exceptions.RequestException as e:
# # # #         print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
# # # #         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
# # # #
# # # #
# # # # # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç
# # # # if __name__ == "__main__":
# # # #     run_test()
# # #
# # #
# # # import requests
# # # import json
# # # import time
# # #
# # # # --- –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
# # # BASE_URL = "http://89.111.169.47:8005"  # IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
# # #
# # # # –ú—ã –±—É–¥–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
# # # UNIQUE_ID = int(time.time())
# # # USER_EMAIL = f"testuser_{UNIQUE_ID}@example.com"
# # # USER_PASSWORD = "a_very_secure_password_123!"
# # #
# # #
# # # # ---------------------------------
# # #
# # # def run_test():
# # #     """
# # #     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–ª—è –ª–∏–¥–æ–≤:
# # #     1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.
# # #     2. –í—Ö–æ–¥.
# # #     3. –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞.
# # #     4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤.
# # #     5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞ –ø–æ ID.
# # #     6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞.
# # #     7. –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥–∞.
# # #     """
# # #     token = None
# # #     created_lead_id = None
# # #
# # #     try:
# # #         # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ---
# # #         print("-" * 50)
# # #         print(f"1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {USER_EMAIL}")
# # #         register_payload = {"email": USER_EMAIL, "password": USER_PASSWORD, "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
# # #         register_response = requests.post(f"{BASE_URL}/api/auth/register", json=register_payload)
# # #         register_response.raise_for_status()
# # #         print("‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
# # #
# # #         # --- –®–ê–ì 2: –í–•–û–î ---
# # #         print("-" * 50)
# # #         print(f"2. –í–•–û–î –í –°–ò–°–¢–ï–ú–£: {USER_EMAIL}")
# # #         auth_payload_form = {'username': USER_EMAIL, 'password': USER_PASSWORD}
# # #         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
# # #         auth_response.raise_for_status()
# # #         token = auth_response.json()['access_token']
# # #         headers = {'Authorization': f'Bearer {token}'}
# # #         print("‚úÖ –£–°–ü–ï–•: –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.")
# # #
# # #         # --- –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –õ–ò–î–ê ---
# # #         print("-" * 50)
# # #         print("3. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –õ–ò–î–ê")
# # #         lead_payload = {
# # #             "organization_name": f"Initial Company {UNIQUE_ID}",
# # #             "inn": "1234567890",
# # #             "contact_number": "+79991234567",
# # #             "email": f"contact_{UNIQUE_ID}@company.com",
# # #             "source": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç",
# # #             "lead_status": "New",
# # #         }
# # #         create_lead_response = requests.post(f"{BASE_URL}/api/leads/", headers=headers, json=lead_payload)
# # #         create_lead_response.raise_for_status()
# # #         created_lead = create_lead_response.json()
# # #         created_lead_id = created_lead['id']
# # #         print(f"‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —Å ID={created_lead_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
# # #
# # #         # --- –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ò–î–û–í ---
# # #         print("-" * 50)
# # #         print("4. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –õ–ò–î–û–í")
# # #         leads_response = requests.get(f"{BASE_URL}/api/leads/", headers=headers)
# # #         leads_response.raise_for_status()
# # #         leads_data = leads_response.json()
# # #         print(f"‚úÖ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω–æ {len(leads_data)} –ª–∏–¥–æ–≤.")
# # #
# # #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –ª–∏–¥ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
# # #         found = any(lead['id'] == created_lead_id for lead in leads_data)
# # #         if not found:
# # #             raise Exception("–°–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ!")
# # #
# # #         # --- –®–ê–ì 5: –ü–û–õ–£–ß–ï–ù–ò–ï –õ–ò–î–ê –ü–û ID ---
# # #         print("-" * 50)
# # #         print(f"5. –ü–û–õ–£–ß–ï–ù–ò–ï –õ–ò–î–ê –ü–û ID: {created_lead_id}")
# # #         get_lead_response = requests.get(f"{BASE_URL}/api/leads/{created_lead_id}", headers=headers)
# # #         get_lead_response.raise_for_status()
# # #         fetched_lead = get_lead_response.json()
# # #         assert fetched_lead['id'] == created_lead_id
# # #         print(f"‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —Å ID={created_lead_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
# # #
# # #         # --- –®–ê–ì 6: –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ò–î–ê ---
# # #         print("-" * 50)
# # #         print(f"6. –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ò–î–ê –° ID: {created_lead_id}")
# # #         update_payload = {
# # #             "organization_name": f"Updated Company Name {UNIQUE_ID}",
# # #             "lead_status": "In Progress"
# # #         }
# # #         update_lead_response = requests.put(f"{BASE_URL}/api/leads/{created_lead_id}", headers=headers,
# # #                                             json=update_payload)
# # #         update_lead_response.raise_for_status()
# # #         updated_lead = update_lead_response.json()
# # #
# # #         assert updated_lead['organization_name'] == update_payload['organization_name']
# # #         assert updated_lead['lead_status'] == update_payload['lead_status']
# # #         print("‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
# # #         print("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", json.dumps(updated_lead, indent=2, ensure_ascii=False))
# # #
# # #         # --- –®–ê–ì 7: –£–î–ê–õ–ï–ù–ò–ï –õ–ò–î–ê ---
# # #         print("-" * 50)
# # #         print(f"7. –£–î–ê–õ–ï–ù–ò–ï –õ–ò–î–ê –° ID: {created_lead_id}")
# # #         delete_lead_response = requests.delete(f"{BASE_URL}/api/leads/{created_lead_id}", headers=headers)
# # #         # –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ 204 No Content
# # #         if delete_lead_response.status_code != 204:
# # #             raise Exception(
# # #                 f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {delete_lead_response.status_code}, –û—Ç–≤–µ—Ç: {delete_lead_response.text}")
# # #         print(f"‚úÖ –£–°–ü–ï–•: –õ–∏–¥ —Å ID={created_lead_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
# # #
# # #         # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ª–∏–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω (–¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É 404)
# # #         get_deleted_lead_response = requests.get(f"{BASE_URL}/api/leads/{created_lead_id}", headers=headers)
# # #         if get_deleted_lead_response.status_code == 404:
# # #             print("‚úÖ –£–°–ü–ï–•: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞, —á—Ç–æ –ª–∏–¥ —É–¥–∞–ª–µ–Ω (–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 404).")
# # #         else:
# # #             raise Exception("–õ–∏–¥ –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ID!")
# # #
# # #         print("-" * 50)
# # #         print("\nüéâ –í–°–ï CRUD-–¢–ï–°–¢–´ –î–õ–Ø –õ–ò–î–û–í –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ")
# # #
# # #     except requests.exceptions.HTTPError as e:
# # #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP –Ω–∞ —à–∞–≥–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
# # #         print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {e.request.method} {e.request.url}")
# # #         # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–ª–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
# # #         if e.request.body:
# # #             print(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e.request.body}")
# # #         print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
# # #         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# # #     except Exception as e:
# # #         print(f"\n‚ùå –ü–†–û–ò–ó–û–®–õ–ê –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê")
# # #         print(f"–û—à–∏–±–∫–∞: {e}")
# # #
# # #
# # # # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç
# # # if __name__ == "__main__":
# # #     run_test()
# #
# #
# # import requests
# # import json
# # import time
# #
# # # --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
# #
# # # –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ API
# # # BASE_URL = "http://127.0.0.1:8005"  # –ò–õ–ò "http://89.111.169.47:8005" –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
# # BASE_URL = "http://89.111.169.47:8005"
# # # –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ç–æ—Ç –∂–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, —á—Ç–æ –∏ –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ
# # CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# #
# # # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã ---
# # # name - —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, '_'), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ URL
# # # display_name - —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# # TABLE_CONFIG = {
# #     "name": f"contracts_{int(time.time())}",  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
# #     "display_name": "–î–æ–≥–æ–≤–æ—Ä—ã"
# # }
# #
# # # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã ---
# # # value_type –º–æ–∂–µ—Ç –±—ã—Ç—å: "string", "integer", "float", "date", "boolean"
# # ATTRIBUTES_CONFIG = [
# #     {"name": "contract_number", "display_name": "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", "value_type": "string"},
# #     {"name": "contract_sum", "display_name": "–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞", "value_type": "float"},
# #     {"name": "is_signed", "display_name": "–ü–æ–¥–ø–∏—Å–∞–Ω", "value_type": "boolean"},
# #     {"name": "signing_date", "display_name": "–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "value_type": "date"}
# # ]
# #
# #
# # # ----------------------------------------------------
# #
# # def print_status(ok, message):
# #     """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
# #     if ok:
# #         print(f"‚úÖ [SUCCESS] {message}")
# #     else:
# #         print(f"‚ùå [FAILURE] {message}")
# #         exit(1)
# #
# #
# # def run_creation_script():
# #     """
# #     –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -> –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è -> –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–æ–∫.
# #     """
# #     headers = {}
# #
# #     try:
# #         # --- –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
# #         print("-" * 60)
# #         print("–®–ê–ì 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
# #
# #         # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# #         unique_id = int(time.time())
# #         user_email = f"table_creator_{unique_id}@example.com"
# #         user_password = "a_very_secure_password_123!"
# #
# #         # 1.1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# #         register_payload = {
# #             "email": user_email,
# #             "password": user_password,
# #             "full_name": f"Table Creator {unique_id}",
# #             "registration_token": CORRECT_REGISTRATION_TOKEN
# #         }
# #         reg_response = requests.post(f"{BASE_URL}/api/auth/register", json=register_payload)
# #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–∫–æ–¥ 201)
# #         if reg_response.status_code != 201:
# #             print_status(False, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_response.text}")
# #
# #         # 1.2. –í—Ö–æ–¥ (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)
# #         auth_payload_form = {'username': user_email, 'password': user_password}
# #         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
# #         auth_response.raise_for_status()
# #
# #         token = auth_response.json()['access_token']
# #         headers = {'Authorization': f'Bearer {token}'}
# #         print_status(True, f"–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_email}")
# #
# #         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ ---
# #         print("\n" + "-" * 60)
# #         print(f"–®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã '{TABLE_CONFIG['display_name']}' (POST /api/meta/entity-types)")
# #
# #         response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=TABLE_CONFIG)
# #         response.raise_for_status()
# #
# #         entity_type_data = response.json()
# #         entity_type_id = entity_type_data['id']
# #
# #         print_status(True, f"–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {entity_type_id}")
# #         print("–ë—ç–∫–µ–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–ª –¥–ª—è –Ω–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (permissions)...")
# #
# #         # --- –®–ê–ì 3: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–õ–û–ù–û–ö ---
# #         print("\n" + "-" * 60)
# #         print(f"–®–ê–ì 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É (ID: {entity_type_id})...")
# #
# #         if not ATTRIBUTES_CONFIG:
# #             print(" -> –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥.")
# #         else:
# #             for attr_payload in ATTRIBUTES_CONFIG:
# #                 url = f"{BASE_URL}/api/meta/entity-types/{entity_type_id}/attributes"
# #                 attr_response = requests.post(url, headers=headers, json=attr_payload)
# #                 attr_response.raise_for_status()
# #                 print(f" -> –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: '{attr_payload['display_name']}'")
# #             print_status(True, f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(ATTRIBUTES_CONFIG)} –∫–æ–ª–æ–Ω–æ–∫.")
# #
# #         print("\n" + "-" * 60)
# #         print("\nüéâüéâüéâ –í–°–ï –ì–û–¢–û–í–û! üéâüéâüéâ")
# #         print(f"–¢–∞–±–ª–∏—Ü–∞ '{TABLE_CONFIG['display_name']}' —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏–º–µ–Ω–µ–º '{TABLE_CONFIG['name']}' —Å–æ–∑–¥–∞–Ω–∞.")
# #         print("\n–ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:")
# #         print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞—à FastAPI —Å–µ—Ä–≤–µ—Ä (uvicorn).")
# #         print("2. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å -> –†–æ–ª–∏.")
# #         print("3. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–æ–ª–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:")
# #         print(f"   - data:view:{TABLE_CONFIG['name']}")
# #         print(f"   - data:edit:{TABLE_CONFIG['name']}")
# #         print("4. –ù–∞–∑–Ω–∞—á—å—Ç–µ —ç—Ç–∏ –ø—Ä–∞–≤–∞ –Ω—É–∂–Ω—ã–º —Ä–æ–ª—è–º, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ.")
# #
# #     except requests.exceptions.HTTPError as e:
# #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
# #         print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {e.request.method} {e.request.url}")
# #         print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
# #         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# #     except Exception as e:
# #         print(f"\n‚ùå –ü–†–û–ò–ó–û–®–õ–ê –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
# #
# #
# # if __name__ == "__main__":
# #     run_creation_script()
#
#
# # import requests
# # import json
# #
# # # --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
# #
# # # –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ API
# # BASE_URL = "http://127.0.0.1:8005"
# # # BASE_URL = "http://89.111.169.47:8005"
# #
# # # --- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø ---   SELECT id, email FROM users WHERE email = 'user@example.com';
# # USER_EMAIL = "user2@example.com"
# # USER_PASSWORD = "password_b"
# #
# # # --- –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---
# # # –≠—Ç–æ –ø–æ–ª–µ 'name', –∞ –Ω–µ 'display_name'
# # # TABLE_NAME_TO_VIEW = "klienty"  # <--- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ò–ú–Ø –í–ê–®–ï–ô –¢–ê–ë–õ–ò–¶–´
# #
#
#
# # ----------------------------------------------------
#
# # def print_status(ok, message):
# #     """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
# #     if ok:
# #         print(f"‚úÖ [SUCCESS] {message}")
# #     else:
# #         print(f"‚ùå [FAILURE] {message}")
# #         exit(1)
# #
# #
# # def list_accessible_tables():
# #     """
# #     –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è, –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ
# #     —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ.
# #     """
# #     headers = {}
# #
# #     try:
# #         # --- –®–ê–ì 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–ê–í ---
# #         print("-" * 60)
# #         print(f"–®–ê–ì 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è {USER_EMAIL}...")
# #
# #         # 1.1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
# #         auth_payload_form = {'username': USER_EMAIL, 'password': USER_PASSWORD}
# #         auth_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload_form)
# #         auth_response.raise_for_status()
# #         token = auth_response.json()['access_token']
# #         headers = {'Authorization': f'Bearer {token}'}
# #
# #         # 1.2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
# #         me_response = requests.get(f"{BASE_URL}/api/users/me", headers=headers)
# #         me_response.raise_for_status()
# #         user_data = me_response.json()
# #         user_permissions = set(user_data.get("permissions", []))
# #
# #         print_status(True, f"–ü–æ–ª—É—á–µ–Ω–æ {len(user_permissions)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.")
# #         # print("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user_permissions)
# #
# #         # --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –û–ë–©–ï–ì–û –°–ü–ò–°–ö–ê –í–°–ï–• –¢–ê–ë–õ–ò–¶ ---
# #         print("\n" + "-" * 60)
# #         print("–®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
# #
# #         # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —Ç–µ–Ω–∞–Ω—Ç–µ
# #         meta_response = requests.get(f"{BASE_URL}/api/meta/entity-types", headers=headers)
# #         meta_response.raise_for_status()
# #         all_custom_tables = meta_response.json()
# #
# #         print(f" -> –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Ç–µ–Ω–∞–Ω—Ç–µ: {len(all_custom_tables)}")
# #
# #         # --- –®–ê–ì 3: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–ê ---
# #         print("\n" + "-" * 60)
# #         print("–®–ê–ì 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
# #
# #         accessible_tables = []
# #
# #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å—É—â–Ω–æ—Å—Ç—è–º
# #         if "leads:view" in user_permissions:
# #             accessible_tables.append({"display_name": "–õ–∏–¥—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)", "system_name": "leads"})
# #         if "legal_entities:view" in user_permissions:
# #             accessible_tables.append({"display_name": "–Æ—Ä. –ª–∏—Ü–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)", "system_name": "legal-entities"})
# #         if "individuals:view" in user_permissions:
# #             accessible_tables.append({"display_name": "–§–∏–∑. –ª–∏—Ü–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)", "system_name": "individuals"})
# #
# #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
# #         for table in all_custom_tables:
# #             view_permission_name = f"data:view:{table['name']}"
# #             if view_permission_name in user_permissions:
# #                 accessible_tables.append({
# #                     "display_name": table['display_name'],
# #                     "system_name": table['name']
# #                 })
# #
# #         print_status(True, f"–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü: {len(accessible_tables)}")
# #
# #         # --- –®–ê–ì 4: –í–´–í–û–î –°–ü–ò–°–ö–ê ---
# #         print("\n" + "-" * 60)
# #         print("–°–ü–ò–°–û–ö –¢–ê–ë–õ–ò–¶, –î–û–°–¢–£–ü–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ:")
# #
# #         if not accessible_tables:
# #             print("\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ.")
# #         else:
# #             for table in accessible_tables:
# #                 print(f"  - {table['display_name']} (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: {table['system_name']})")
# #
# #         print("\n" + "-" * 60)
# #
# #     except requests.exceptions.HTTPError as e:
# #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
# #         print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
# #         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# #     except Exception as e:
# #         print(f"\n‚ùå –ü–†–û–ò–ó–û–®–õ–ê –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
# #
# #
# # if __name__ == "__main__":
# #     list_accessible_tables()
#
#
# import requests
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# # BASE_URL = "http://127.0.0.1:8005"
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
#
# BASE_URL = "http://89.111.169.47:8005"
#
# # -----------------
#
# def print_status(ok, message):
#     if ok:
#         print(f"‚úÖ [PASS] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}")
#         exit(1)
#
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
#
# # ... (—Ñ—É–Ω–∫—Ü–∏—è register_and_login –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
#
# def run_rename_test():
#     try:
#         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
#         print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
#         headers = register_and_login()
#
#         initial_name = "–°—Ç–∞—Ä–æ–µ –ò–º—è"
#         table_config = {"name": f"rename_test_{int(time.time())}", "display_name": initial_name}
#
#         response = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config)
#         response.raise_for_status()
#         table_id = response.json()['id']
#         print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{initial_name}' —Å ID: {table_id}")
#
#         # --- –®–ê–ì 2: –ò–ó–ú–ï–ù–ï–ù–ò–ï –ò–ú–ï–ù–ò ---
#         print_header("–®–ê–ì 2: –ò–ó–ú–ï–ù–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ê–ï–ú–û–ì–û –ò–ú–ï–ù–ò")
#
#         new_name = "–ù–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –ò–ú–Ø"
#         update_payload = {"display_name": new_name}
#
#         url = f"{BASE_URL}/api/meta/entity-types/{table_id}"
#         update_response = requests.put(url, headers=headers, json=update_payload)
#         update_response.raise_for_status()
#
#         updated_table_data = update_response.json()
#         print_status(update_response.status_code == 200, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å 200).")
#         print_status(
#             updated_table_data.get('display_name') == new_name,
#             f"API –≤ –æ—Ç–≤–µ—Ç–µ –≤–µ—Ä–Ω—É–ª–æ –Ω–æ–≤–æ–µ –∏–º—è: '{updated_table_data.get('display_name')}'"
#         )
#
#         # --- –®–ê–ì 3: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
#         print_header("–®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê, –ß–¢–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–•–†–ê–ù–ò–õ–ò–°–¨")
#
#         get_response = requests.get(url, headers=headers)
#         get_response.raise_for_status()
#         final_table_data = get_response.json()
#
#         print(f" -> –ü–æ–≤—Ç–æ—Ä–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –∏–º—è: '{final_table_data.get('display_name')}'")
#         print_status(
#             final_table_data.get('display_name') == new_name,
#             "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã."
#         )
#
#         print("\n" + "=" * 60)
#         print("üéâüéâüéâ –¢–ï–°–¢ –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–ï –ò–ú–ï–ù–ò –¢–ê–ë–õ–ò–¶–´ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
#         print(f"URL: {e.request.method} {e.request.url}")
#         print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
#         print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
#
#
# # (–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ñ—É–Ω–∫—Ü–∏—é register_and_login –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
# def register_and_login():
#     unique_id = int(time.time())
#     email = f"rename_tester_{unique_id}@example.com"
#     password = "password123"
#     reg_payload = {"email": email, "password": password, "full_name": "Rename Tester",
#                    "registration_token": CORRECT_REGISTRATION_TOKEN}
#     requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
#     auth_payload = {'username': email, 'password': password}
#     token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
#     return {'Authorization': f'Bearer {token}'}
#
#
# if __name__ == "__main__":
#     run_rename_test()


