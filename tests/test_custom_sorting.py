import requests
import json
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://127.0.0.1:8005"
CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"


# -----------------

def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}"); exit(1)


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


# ... (–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é `register_and_login` –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)

def run_sorting_test():
    try:
        # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
        print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´")
        headers = register_and_login()

        table_name = f"candidates_sort_{int(time.time())}"
        table_config = {"name": table_name, "display_name": "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)"}
        table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']

        attributes = [
            {"name": "full_name", "display_name": "–§–ò–û", "value_type": "string"},
            {"name": "rating", "display_name": "–†–µ–π—Ç–∏–Ω–≥", "value_type": "integer"},
            {"name": "interview_date", "display_name": "–î–∞—Ç–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è", "value_type": "date"},
        ]
        for attr in attributes:
            requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
                          json=attr).raise_for_status()

        print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏.")

        # --- –®–ê–ì 2: –ù–ê–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò (–í –ü–ï–†–ï–ú–ï–®–ê–ù–ù–û–ú –ü–û–†–Ø–î–ö–ï) ---
        print_header("–®–ê–ì 2: –ù–ê–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò")

        data_to_create = [
            {"full_name": "–í–∏–∫—Ç–æ—Ä", "rating": 5, "interview_date": "2025-08-10T12:00:00"},
            {"full_name": "–ê–Ω–Ω–∞", "rating": 10, "interview_date": "2025-08-12T15:00:00"},
            {"full_name": "–ë–æ—Ä–∏—Å", "rating": 8, "interview_date": "2025-08-11T10:00:00"},
        ]
        for item in data_to_create:
            requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=item).raise_for_status()

        print_status(True, "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")

        # --- –®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–†–¢–ò–†–û–í–ö–ò ---
        print_header("–®–ê–ì 3: –¢–ï–°–¢–´ –°–û–†–¢–ò–†–û–í–ö–ò")

        # –¢–µ—Å—Ç 1: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∏—Å–ª—É (—Ä–µ–π—Ç–∏–Ω–≥—É) –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        print("\n -> –¢–µ—Å—Ç 1: sort_by=rating, sort_order=desc")
        params1 = {"sort_by": "rating", "sort_order": "desc"}
        response1 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params1)
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–∞—Ä—Å–∏—Ç—å JSON
        if response1.status_code != 200:
            print_status(False, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å {response1.status_code}) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {response1.text}")
        response1.raise_for_status() # –≠—Ç–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 4xx/5xx
        # ------------------------
        data1 = response1.json()
        ratings_order = [item.get('rating') for item in data1]
        print(f"    –ü–æ–ª—É—á–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {ratings_order}")
        print_status(ratings_order == [10, 8, 5], "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (desc) –≤–µ—Ä–Ω–∞.")

        # –¢–µ—Å—Ç 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ (–∏–º–µ–Ω–∏) –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        print("\n -> –¢–µ—Å—Ç 2: sort_by=full_name, sort_order=asc")
        params2 = {"sort_by": "full_name", "sort_order": "asc"}
        response2 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params2)
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–∞—Ä—Å–∏—Ç—å JSON
        if response2.status_code != 200:
            print_status(False, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å {response2.status_code}) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {response1.text}")
        response2.raise_for_status() # –≠—Ç–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 4xx/5xx
        # ------------------------
        data2 = response2.json()
        names_order = [item.get('full_name') for item in data2]
        print(f"    –ü–æ–ª—É—á–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∏–º–µ–Ω: {names_order}")
        print_status(names_order == ["–ê–Ω–Ω–∞", "–ë–æ—Ä–∏—Å", "–í–∏–∫—Ç–æ—Ä"], "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (asc) –≤–µ—Ä–Ω–∞.")

        # –¢–µ—Å—Ç 3: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        print("\n -> –¢–µ—Å—Ç 3: sort_by=interview_date, sort_order=desc")
        params3 = {"sort_by": "interview_date", "sort_order": "desc"}
        response3 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params3)
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–∞—Ä—Å–∏—Ç—å JSON
        if response3.status_code != 200:
            print_status(False, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å {response3.status_code}) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {response1.text}")
        response3.raise_for_status() # –≠—Ç–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 4xx/5xx
        # ------------------------
        data3 = response3.json()
        dates_order_names = [item.get('full_name') for item in data3]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∞–º, —Ç.–∫. –∏—Ö –ø–æ—Ä—è–¥–æ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω
        print(f"    –ü–æ–ª—É—á–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ: {dates_order_names}")
        print_status(dates_order_names == ["–ê–Ω–Ω–∞", "–ë–æ—Ä–∏—Å", "–í–∏–∫—Ç–æ—Ä"], "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (desc) –≤–µ—Ä–Ω–∞.")

        print("\n" + "=" * 60)
        print("üéâüéâüéâ –¢–ï–°–¢ –°–û–†–¢–ò–†–û–í–ö–ò –î–ê–ù–ù–´–• –í –ö–ê–°–¢–û–ú–ù–´–• –¢–ê–ë–õ–ò–¶–ê–• –ü–†–û–ô–î–ï–ù! üéâüéâüéâ")

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP.")
        print(f"URL: {e.request.method} {e.request.url}")
        print(f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {e.response.text}")
    except Exception as e:
        print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")


# (–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é register_and_login)
def register_and_login():
    unique_id = int(time.time())
    email = f"sort_tester_{unique_id}@example.com"
    password = "password123"
    reg_payload = {"email": email, "password": password, "full_name": "Sort Tester",
                   "registration_token": CORRECT_REGISTRATION_TOKEN}
    requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
    auth_payload = {'username': email, 'password': password}
    token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
    return {'Authorization': f'Bearer {token}'}


if __name__ == "__main__":
    run_sorting_test()