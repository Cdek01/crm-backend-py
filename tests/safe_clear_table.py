# import requests
# import time
# from tqdm import tqdm
# import sys
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
# BASE_URL = "http://89.111.169.47:8005"
# EMAIL = "1@example.com"
# PASSWORD = "string"
#
# # –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª.
# # –ù–µ –¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å GET-–∑–∞–ø—Ä–æ—Å.
# BATCH_SIZE = 100
# # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É DELETE-–∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö), —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.
# # 0.05 = 50 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã –≤ –º–æ—â–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.
# DELAY_BETWEEN_DELETES = 0
# # ---------------------------------------------------
#
# # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# def print_status(ok, message):
#     if ok:
#         print(f"‚úÖ [INFO] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}")
#         sys.exit(1)
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
# def login():
#     """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
#     print_header("–®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
#     try:
#         auth_payload = {'username': EMAIL, 'password': PASSWORD}
#         token_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
#         token_response.raise_for_status()
#         token = token_response.json()['access_token']
#         print_status(True, f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {EMAIL}")
#         return {'Authorization': f'Bearer {token}'}
#     except Exception as e:
#         print_status(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
#
#
# # --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
# def clear_table_safely():
#     total_deleted_count = 0
#     headers = login()
#
#     # --- –ù–û–í–´–ô –ë–õ–û–ö: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã ---
#     print_header("–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
#     try:
#         get_types_url = f"{BASE_URL}/api/meta/entity-types"
#         types_response = requests.get(get_types_url, headers=headers)
#         types_response.raise_for_status()
#
#         available_tables = types_response.json()
#         if not available_tables:
#             print_status(False, "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.")
#
#         print("–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
#         for i, table in enumerate(available_tables):
#             print(f"  {i + 1}. {table['display_name']} (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: {table['name']})")
#
#     except requests.exceptions.HTTPError as e:
#         print_status(False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: {e.response.status_code} - {e.response.text}")
#
#     # --- –ù–û–í–´–ô –ë–õ–û–ö: –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
#     chosen_table = None
#     while not chosen_table:
#         try:
#             choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–æ—Ç 1 –¥–æ {len(available_tables)}): ")
#             choice_index = int(choice) - 1
#             if 0 <= choice_index < len(available_tables):
#                 chosen_table = available_tables[choice_index]
#             else:
#                 print("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
#         except ValueError:
#             print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
#
#     table_name = chosen_table['name']
#     print_status(True, f"–í—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: '{chosen_table['display_name']}'")
#
#     # --- –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ---
#     print_header(f"–®–∞–≥ 3: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")
#
#     while True:
#         try:
#             print(f"\n–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –∏–∑ {BATCH_SIZE} –∑–∞–ø–∏—Å–µ–π...")
#             get_url = f"{BASE_URL}/api/data/{table_name}?limit={BATCH_SIZE}"
#             get_response = requests.get(get_url, headers=headers)
#             get_response.raise_for_status()
#
#             json_data = get_response.json()
#             records = json_data.get('data', json_data) if isinstance(json_data, dict) else json_data
#
#             if not records:
#                 print_status(True, "–í —Ç–∞–±–ª–∏—Ü–µ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π.")
#                 break
#
#             entity_ids = [entity['id'] for entity in records]
#             print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(entity_ids)} ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
#
#             for entity_id in tqdm(entity_ids, desc=f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏ (–≤—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ {total_deleted_count})"):
#                 delete_url = f"{BASE_URL}/api/data/{table_name}/{entity_id}"
#                 requests.delete(delete_url, headers=headers)  # –û—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å
#                 total_deleted_count += 1
#                 time.sleep(DELAY_BETWEEN_DELETES)
#
#         except requests.exceptions.HTTPError as e:
#             print_status(False,
#                          f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e.response.status_code} - {e.response.text}")
#         except Exception as e:
#             print_status(False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
#
#     print("\n" + "=" * 60)
#     print("üéâüéâüéâ –ü–†–û–¶–ï–°–° –û–ß–ò–°–¢–ö–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù! üéâüéâüéâ")
#     print(f"–í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_deleted_count}")
#
#
# if __name__ == "__main__":
#     clear_table_safely()


import requests
import time
from tqdm import tqdm
import sys

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
BASE_URL = "http://89.111.169.47:8005"
EMAIL = "1@example.com"
PASSWORD = "string"

# –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª.
# –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∏ —Ä–∞–∑–º–µ—Ä GET-–∑–∞–ø—Ä–æ—Å–∞, –∏ —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ BULK-DELETE –∑–∞–ø—Ä–æ—Å–∞.
BATCH_SIZE = 500
# –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–Ω—ã–º–∏ —É–¥–∞–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—É "–ø–µ—Ä–µ–¥—ã—à–∫—É".
DELAY_BETWEEN_BATCHES = 0.5  # –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã


# ---------------------------------------------------

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def print_status(ok, message):
    if ok:
        print(f"‚úÖ [INFO] {message}")
    else:
        print(f"‚ùå [FAIL] {message}")
        sys.exit(1)


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


def login():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    print_header("–®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    try:
        auth_payload = {'username': EMAIL, 'password': PASSWORD}
        token_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
        token_response.raise_for_status()
        token = token_response.json()['access_token']
        print_status(True, f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {EMAIL}")
        return {'Authorization': f'Bearer {token}'}
    except Exception as e:
        print_status(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def clear_table_by_batches():
    total_deleted_count = 0
    headers = login()

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    print_header("–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
    try:
        get_types_url = f"{BASE_URL}/api/meta/entity-types"
        types_response = requests.get(get_types_url, headers=headers)
        types_response.raise_for_status()
        available_tables = types_response.json()
        if not available_tables:
            print_status(False, "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.")

        print("–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for i, table in enumerate(available_tables):
            print(f"  {i + 1}. {table['display_name']} (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: {table['name']})")
    except requests.exceptions.HTTPError as e:
        print_status(False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: {e.response.status_code} - {e.response.text}")

    chosen_table = None
    while not chosen_table:
        try:
            choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–æ—Ç 1 –¥–æ {len(available_tables)}): ")
            choice_index = int(choice) - 1
            if 0 <= choice_index < len(available_tables):
                chosen_table = available_tables[choice_index]
            else:
                print("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except ValueError:
            print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    table_name = chosen_table['name']
    print_status(True, f"–í—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: '{chosen_table['display_name']}'")

    # --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –£–î–ê–õ–ï–ù–ò–Ø ---
    print_header(f"–®–∞–≥ 3: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ '{table_name}' –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ {BATCH_SIZE}")

    # –û–±–µ—Ä–Ω–µ–º —Ü–∏–∫–ª –≤ tqdm –¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    with tqdm(total=None, desc="–í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ", unit=" –∑–∞–ø–∏—Å–µ–π") as pbar:
        while True:
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                get_url = f"{BASE_URL}/api/data/{table_name}?limit={BATCH_SIZE}"
                get_response = requests.get(get_url, headers=headers)
                get_response.raise_for_status()

                json_data = get_response.json()
                records = json_data.get('data', json_data) if isinstance(json_data, dict) else json_data

                if not records:
                    print_status(True, "\n–í —Ç–∞–±–ª–∏—Ü–µ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π.")
                    break

                entity_ids = [entity['id'] for entity in records]

                # --- 2. –£–¥–∞–ª—è–µ–º –≤—Å—é –ø–æ—Ä—Ü–∏—é –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º ---
                delete_url = f"{BASE_URL}/api/data/{table_name}/bulk-delete"
                delete_payload = {"ids": entity_ids}

                delete_resp = requests.post(delete_url, headers=headers, json=delete_payload)

                if delete_resp.status_code == 200:
                    deleted_count = delete_resp.json().get('deleted_count', len(entity_ids))
                    total_deleted_count += deleted_count
                    pbar.update(deleted_count)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                else:
                    print(
                        f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç. –°—Ç–∞—Ç—É—Å: {delete_resp.status_code}, –û—Ç–≤–µ—Ç: {delete_resp.text}")

                time.sleep(DELAY_BETWEEN_BATCHES)

            except requests.exceptions.HTTPError as e:
                print_status(False,
                             f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e.response.status_code} - {e.response.text}")
            except Exception as e:
                print_status(False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 60)
    print("üéâüéâüéâ –ü–†–û–¶–ï–°–° –û–ß–ò–°–¢–ö–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù! üéâüéâüéâ")
    print(f"–í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_deleted_count}")


if __name__ == "__main__":
    clear_table_by_batches()