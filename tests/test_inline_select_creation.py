# # # # -*- coding: utf-8 -*-
# # #
# # #
# # #
# # # # import requests
# # # # import json
# # # # import time
# # # #
# # # # # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# # # # BASE_URL = "http://127.0.0.1:8000"
# # # # # BASE_URL = "http://89.111.169.47:8005"
# # # #
# # # # CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
# # # #
# # # #
# # # # def print_status(ok, message):
# # # #     if ok:
# # # #         print(f"‚úÖ [PASS] {message}")
# # # #     else:
# # # #         print(f"‚ùå [FAIL] {message}"); exit(1)
# # # # def print_header(title):
# # # #     print("\n" + "=" * 60)
# # # #     print(f" {title} ".center(60, "="))
# # # #     print("=" * 60)
# # # #
# # # # def register_and_login():
# # # #     email = f"976@example.com"
# # # #     password = "sdsgsgbsdfbvsdf"
# # # #     reg_payload = {"email": email, "password": password, "full_name": "Select Tester",
# # # #                    "registration_token": CORRECT_REGISTRATION_TOKEN}
# # # #     requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
# # # #     auth_payload = {'username': email, 'password': password}
# # # #     token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
# # # #     return {'Authorization': f'Bearer {token}'}
# # # #
# # # #
# # # # def run_text_select_test():
# # # #     try:
# # # #         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
# # # #         print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
# # # #         headers = register_and_login()
# # # #
# # # #         table_name = f"requests_{int(time.time())}"
# # # #         table_config = {"name": table_name, "display_name": "–ó–∞—è–≤–∫–∏ (text select)"}
# # # #         table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']
# # # #
# # # #         options_to_create = ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]
# # # #         attribute_payload = {
# # # #             "name": "request_type",
# # # #             "display_name": "–¢–∏–ø –∑–∞—è–≤–∫–∏",
# # # #             "value_type": "select",
# # # #             "list_items": options_to_create
# # # #         }
# # # #         requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
# # # #                       json=attribute_payload).raise_for_status()
# # # #         print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å –∫–æ–ª–æ–Ω–∫–æ–π-—Å–ø–∏—Å–∫–æ–º.")
# # # #
# # # #         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê ---
# # # #         print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò –° –¢–ï–ö–°–¢–û–í–´–ú –ó–ù–ê–ß–ï–ù–ò–ï–ú")
# # # #
# # # #         payload1 = {"request_type": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"}
# # # #         record_id_1 = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=payload1).json()[0]['id']
# # # #
# # # #         payload2 = {"request_type": "–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ"}
# # # #         requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=payload2).raise_for_status()
# # # #
# # # #         record_1_data = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id_1}", headers=headers).json()
# # # #
# # # #         print(f" -> –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å #{record_id_1}. –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{record_1_data.get('request_type')}'")
# # # #         print_status(record_1_data.get('request_type') == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
# # # #
# # # #         # --- –®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï ---
# # # #         print_header("–®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò")
# # # #
# # # #         update_payload = {"request_type": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"}
# # # #         requests.put(f"{BASE_URL}/api/data/{table_name}/{record_id_1}", headers=headers,
# # # #                      json=update_payload).raise_for_status()
# # # #
# # # #         updated_record_data = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id_1}", headers=headers).json()
# # # #         print(f" -> –ó–∞–ø–∏—Å—å #{record_id_1} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{updated_record_data.get('request_type')}'")
# # # #         print_status(updated_record_data.get('request_type') == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
# # # #
# # # #         # --- –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò ---
# # # #         print_header("–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò (–ù–ï–ì–ê–¢–ò–í–ù–´–ô –¢–ï–°–¢)")
# # # #
# # # #         invalid_payload = {"request_type": "–°–ø–∞–º"}
# # # #         invalid_resp = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=invalid_payload)
# # # #
# # # #         print(f" -> –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '–°–ø–∞–º'. –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {invalid_resp.status_code}")
# # # #         print(f" -> –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {invalid_resp.text}")
# # # #         print_status(
# # # #             invalid_resp.status_code == 400,
# # # #             "–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (—Å—Ç–∞—Ç—É—Å 400)."
# # # #         )
# # # #
# # # #         # --- –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò ---
# # # #         print_header("–®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –¢–ï–ö–°–¢–£")
# # # #
# # # #         print("\n -> –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' (–æ–∂–∏–¥–∞–µ—Ç—Å—è 1)")
# # # #         filters1 = [{"field": "request_type", "value": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"}]
# # # #         resp1 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers,
# # # #                              params={"filters": json.dumps(filters1)}).json()
# # # #         print_status(len(resp1) == 1, f"–ù–∞–π–¥–µ–Ω–æ {len(resp1)} –∑–∞–ø–∏—Å–µ–π.")
# # # #
# # # #         print("\n -> –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0)")
# # # #         filters2 = [{"field": "request_type", "value": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"}]
# # # #         resp2 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers,
# # # #                              params={"filters": json.dumps(filters2)}).json()
# # # #         print_status(len(resp2) == 0, f"–ù–∞–π–¥–µ–Ω–æ {len(resp2)} –∑–∞–ø–∏—Å–µ–π.")
# # # #
# # # #         print("\n" + "=" * 60)
# # # #         print("üéâüéâüéâ –¢–ï–°–¢ –í–´–ü–ê–î–ê–Æ–©–ò–• –°–ü–ò–°–ö–û–í –° –¢–ï–ö–°–¢–û–ú –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
# # # #
# # # #     except requests.exceptions.HTTPError as e:
# # # #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP: {e.response.status_code} - {e.response.text}")
# # # #     except Exception as e:
# # # #         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
# # # #
# # # #
# # # # # ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ `register_and_login`, `print_status`, `print_header`)
# # # #
# # # # if __name__ == "__main__":
# # # #     run_text_select_test()
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # #
# # # # # def run_inline_select_test():
# # # # #     try:
# # # # #         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
# # # # #         print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
# # # # #         headers = register_and_login()
# # # # #
# # # # #         table_name = f"tasks_inline_select_{int(time.time())}"
# # # # #         table_config = {"name": table_name, "display_name": "–ó–∞–¥–∞—á–∏ (inline select —Ç–µ—Å—Ç)"}
# # # # #         table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']
# # # # #
# # # # #         print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å ID: {table_id}")
# # # # #
# # # # #         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ö–û–õ–û–ù–ö–ò-–°–ü–ò–°–ö–ê –û–î–ù–ò–ú –ó–ê–ü–†–û–°–û–ú ---
# # # # #         print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ö–û–õ–û–ù–ö–ò –° –û–ü–¶–ò–Ø–ú–ò")
# # # # #
# # # # #         options_to_create = ["To Do", "In Progress", "Done"]
# # # # #         attribute_payload = {
# # # # #             "name": "task_status",
# # # # #             "display_name": "–°—Ç–∞—Ç—É—Å",
# # # # #             "value_type": "select",
# # # # #             "list_items": options_to_create
# # # # #         }
# # # # #
# # # # #         url = f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes"
# # # # #         create_attr_response = requests.post(url, headers=headers, json=attribute_payload)
# # # # #         create_attr_response.raise_for_status()
# # # # #
# # # # #         created_attribute = create_attr_response.json()
# # # # #         print_status(True, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.{created_attribute}")
# # # # #
# # # # #         # --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ö–û–õ–û–ù–ö–ò ---
# # # # #         print_header("–®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ô –ö–û–õ–û–ù–ö–ò")
# # # # #
# # # # #         # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
# # # # #         table_details = requests.get(f"{BASE_URL}/api/meta/entity-types/{table_id}", headers=headers).json()
# # # # #
# # # # #         # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à –∞—Ç—Ä–∏–±—É—Ç
# # # # #         status_attribute = next((attr for attr in table_details['attributes'] if attr['name'] == 'task_status'), None)
# # # # #
# # # # #         print_status(status_attribute is not None, "–ö–æ–ª–æ–Ω–∫–∞ 'task_status' –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã.")
# # # # #
# # # # #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–ø–∏—Å–∫–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω
# # # # #         select_list_id = status_attribute.get('select_list_id')
# # # # #         print(f" -> ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {select_list_id}")
# # # # #         print_status(
# # # # #             select_list_id is not None and isinstance(select_list_id, int),
# # # # #             "–ö–æ–ª–æ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–ø—Ü–∏–π (select_list_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)."
# # # # #         )
# # # # #
# # # # #         # --- –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –°–ü–ò–°–ö–ê ---
# # # # #         print_header("–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ù–ù–û–ì–û –°–ü–ò–°–ö–ê –û–ü–¶–ò–ô")
# # # # #
# # # # #         list_details_url = f"{BASE_URL}/api/meta/select-lists/{select_list_id}"
# # # # #         list_details_response = requests.get(list_details_url, headers=headers)
# # # # #         list_details_response.raise_for_status()
# # # # #         list_data = list_details_response.json()
# # # # #
# # # # #         print(f" -> –ü–æ–ª—É—á–µ–Ω—ã –æ–ø—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ ID={select_list_id}: {list_data}")
# # # # #
# # # # #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# # # # #         print_status(
# # # # #             len(list_data.get('options', [])) == len(options_to_create),
# # # # #             f"–°–æ–∑–¥–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–π ({len(options_to_create)})."
# # # # #         )
# # # # #
# # # # #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
# # # # #         option_values = {opt['value'] for opt in list_data.get('options', [])}
# # # # #         print_status(
# # # # #             option_values == set(options_to_create),
# # # # #             "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–ø—Ü–∏–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –≤ `list_items`."
# # # # #         )
# # # # #
# # # # #         print("\n" + "=" * 60)
# # # # #         print("üéâüéâüéâ –¢–ï–°–¢ –ê–í–¢–û–°–û–ó–î–ê–ù–ò–Ø –°–ü–ò–°–ö–û–í –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
# # # # #
# # # # #     except requests.exceptions.HTTPError as e:
# # # # #         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP: {e.response.status_code} - {e.response.text}")
# # # # #     except Exception as e:
# # # # #         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
# # # # #
# # # # #
# # # # # # ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ `register_and_login`, `print_status`, `print_header`)
# # # # #
# # # # # if __name__ == "__main__":
# # # # #     run_inline_select_test()
# # #
# # # TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkYW5pa2JlbGF2aW4yMDA2QGdtYWlsLmNvbSIsImV4cCI6MjA3NTcwNTExNH0.JXxPMrye8Vigv684SmBMF6uqt6fxd9WHajwM3j8Jj8c"
# # #
# # #
# # #
# # #
# # #
# # # import json
# # # import requests
# # #
# # #
# # # def update_crm_data(payload: dict, entity_type_name: str, api_token: str):
# # #     """
# # #     –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ —Å JSON.
# # #     –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Python 3.7 –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É.
# # #     """
# # #     BASE_URL = f"http://89.111.169.47:8005/api/data/{entity_type_name}"
# # #
# # #     # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ASCII
# # #     headers = {
# # #         "Accept": "application/json",
# # #         "Content-Type": "application/json",  # UTF-8 –¥–ª—è JSON
# # #         "Authorization": f"Bearer {api_token}"  # —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ASCII
# # #     }
# # #
# # #     try:
# # #         # –ò—Å–ø–æ–ª—å–∑—É–µ–º json=payload, —á—Ç–æ–±—ã requests —Å–∞–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª JSON –≤ UTF-8
# # #         response = requests.post(BASE_URL, json=payload, headers=headers)
# # #         print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
# # #         print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
# # #         response.raise_for_status()
# # #     except requests.exceptions.RequestException as e:
# # #         print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
# # #         return None
# # #
# # #     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
# # #     try:
# # #         return response.json()
# # #     except ValueError:
# # #         # JSON –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
# # #         print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç")
# # #         return response.text
# # #
# # #
# # # if __name__ == "__main__":
# # #     API_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkYW5pa2JlbGF2aW4yMDA2QGdtYWlsLmNvbSIsImV4cCI6MjA3NTcwNTExNH0.JXxPMrye8Vigv684SmBMF6uqt6fxd9WHajwM3j8Jj8c"
# # #
# # #     payload = {
# # #         # --- string ---
# # #         "naimenovanie_str": "¬´–§—Ä–∏ –ú–æ—É—à–Ω¬ª",
# # #         "nds_str": "",
# # #         "dogovory_str": "–ò–ú-–†–§-–û9–†-5",
# # #         "inn_str": "7704818042",
# # #         "deyatelnost_str": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–∏–Ω–æ—Ñ–∏–ª—å–º–æ–≤, –≤–∏–¥–µ–æ—Ñ–∏–ª—å–º–æ–≤ –∏ —Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º",
# # #         "fio_initsiatora_str": "–®–ª–∏–ø—Å –ê–Ω—Ç–æ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
# # #         "adres_str": "",
# # #         "identifikator_edo_str": "2BM-7704818042-770401001-201508230326178080771",
# # #         "nomer_telefona_str": "79033474107",
# # #         "el_pochtu_str": "info@kvartirniki.com",
# # #         "sayty_v_ek5_str": "kvartirniki.com",
# # #         "status_sayta_str": "301",
# # #         "vyruchka_za_proshlyy_god_str": "280928",
# # #         "kategoriya_tovarov_str": "–±–∏–ª–µ—Ç—ã",
# # #         "storona_dogovora_str": "–ò–ü –®–ª–∏–ø—Å –ê–Ω—Ç–æ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
# # #         "etapy_klienta_str": "–û—Ç–¥–µ–ª —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è",
# # #         "zadacha_str": "",
# # #         "plan_razvitiya_str": "",
# # #         "menedzher_posledniy_pozvonivshiy_str": "",
# # #         "kommentariy_po_zvonku_str": "",
# # #         "plan_sleduyushchego_zvonka_str": "",
# # #         "status_str": "",
# # #         "status_dogovora_str": "",
# # #         "status_po_rassylkam_str": "",
# # #         "status_sayta_str": "301",
# # #         "status_sayta_str": "301",
# # #         "vse_telefony_v_ek5_str": "",
# # #         "uvod_vyruchki_ukazat_dogovor_zapodozrennyy_v_uvode_vyruchki_str": "",
# # #         "primechanie_str": "",
# # #
# # #         # --- integer ---
# # #         "prioritet": 5,
# # #         "vozrast_dogovora_mes": None,
# # #         "kreditnyy_limit": None,
# # #
# # #         # --- boolean ---
# # #         "edo": True,
# # #         "chestnyy_znak": False,
# # #         "vedet_biznes_ili_net": False,
# # #         "integratsiya": False,
# # #         "instrumenty_avtomatizatsii": False,
# # #         "marketpleysy": False,
# # #         "sdek_dokumenty": False,
# # #         "ved": False,
# # #         "ltl": False,
# # #         "ff": False,
# # #         "publikatsiya_otcheta_danet": False,
# # #         "rabotaet_s_konkurentami": False,
# # #         "otpravki_fizicheskim_litsom_nakladnye": False,
# # #         "otpravki_s_drugogo_dogovora_danet": False,
# # #         "peresechenie_po_nomeru_telefona": False,
# # #         "peresechenie_po_e_mail": False,
# # #         "peresechenie_po_inn": False,
# # #         "peresechenie_po_saytu": False,
# # #
# # #         # --- date ---
# # #         "data_podpisaniya_dogovora": "2021-03-05T00:00:00",
# # #         "data_pdz": None,
# # #         "data_zvonka": None,
# # #         "data_sleduyushchego_kontakta_pri_neobhodimosti": None,
# # #         "data_omp_robot": None,
# # #         "data_otpravki_soobshcheniya_po_promo_aktsii": None,
# # #
# # #         # --- required ---
# # #         "tenant_id": 2
# # #     }
# # #
# # #     result = update_crm_data(payload=payload, entity_type_name="kontragenty", api_token=API_TOKEN)
# # #     print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result)
# # #
# #
# #
# #
# # # –ö–ê–°–ö–ê–î–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô –° –¢–ê–ë–õ–ò–¶–´
# #
# # API_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkYW5pa2JlbGF2aW4yMDA2QGdtYWlsLmNvbSIsImV4cCI6MjA3NTcwNTExNH0.JXxPMrye8Vigv684SmBMF6uqt6fxd9WHajwM3j8Jj8c"
# # import requests
# # import json
# #
# # # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# # API_BASE_URL = "http://89.111.169.47:8005"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ API
# # TABLE_NAME = "kontragenty"                     # –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
# #
# #
# # auth_token = API_TOKEN
# # def clear_table(token, table_name):
# #     """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö."""
# #     headers = {"Authorization": f"Bearer {token}"}
# #
# #     # 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏—Ö ID
# #     try:
# #         print(f"–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")
# #         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–π limit, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
# #         get_response = requests.get(f"{API_BASE_URL}/api/data/{table_name}?limit=1000", headers=headers)
# #         get_response.raise_for_status()
# #         entities = get_response.json()
# #
# #         if not entities:
# #             print("–¢–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø—É—Å—Ç–∞. –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.")
# #             return
# #
# #         entity_ids = [entity["id"] for entity in entities]
# #         print(f"–ù–∞–π–¥–µ–Ω–æ {len(entity_ids)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
# #
# #     except requests.exceptions.RequestException as e:
# #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
# #         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# #         return
# #
# #     # 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
# #     try:
# #         print(f"–®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ {len(entity_ids)} –∑–∞–ø–∏—Å–µ–π...")
# #         delete_response = requests.post(
# #             f"{API_BASE_URL}/api/data/{table_name}/bulk-delete",
# #             headers=headers,
# #             json={"ids": entity_ids}
# #         )
# #         delete_response.raise_for_status()
# #         result = delete_response.json()
# #         print(f"–£—Å–ø–µ—à–Ω–æ! API –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç: {result}")
# #
# #     except requests.exceptions.RequestException as e:
# #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
# #         print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
# # if __name__ == "__main__":
# #
# #     if auth_token:
# #         clear_table(auth_token, TABLE_NAME)
#
#
# import requests
# from typing import List
#
# # --- –ì–õ–ê–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
# # URL –≤–∞—à–µ–≥–æ API
# API_BASE_URL = "http://89.111.169.47:8005"
#
# # –í–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
# API_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkYW5pa2JlbGF2aW4yMDA2QGdtYWlsLmNvbSIsImV4cCI6MjA3NTcwNTExNH0.JXxPMrye8Vigv684SmBMF6uqt6fxd9WHajwM3j8Jj8c"
# # -------------------------
#
# # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# HEADERS = {"Authorization": f"Bearer {API_TOKEN}"}
# TABLE_NAME = "demo_formula_update_table"
#
#
# def cleanup_test_tables(table_names: List[str]):
#     """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
#     print("\n--- –®–∞–≥ 0: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü ---")
#     try:
#         response = requests.get(f"{API_BASE_URL}/api/meta/entity-types", headers=HEADERS)
#         if response.status_code == 200:
#             for et in response.json():
#                 if et['name'] in table_names:
#                     print(f"–û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã '{et['name']}' (ID: {et['id']})")
#                     requests.delete(f"{API_BASE_URL}/api/meta/entity-types/{et['id']}", headers=HEADERS)
#     except requests.exceptions.RequestException as e:
#         print(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏: {e}")
#
#
# def run_demo():
#     """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã."""
#     ids = {}
#
#     try:
#         # --- –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–æ–∫ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π ---
#         print("\n--- –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ---")
#
#         type_resp = requests.post(
#             f"{API_BASE_URL}/api/meta/entity-types", headers=HEADERS,
#             json={"name": TABLE_NAME, "display_name": "–î–µ–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª"}
#         )
#         type_resp.raise_for_status()
#         ids["type_id"] = type_resp.json()["id"]
#
#         requests.post(f"{API_BASE_URL}/api/meta/entity-types/{ids['type_id']}/attributes", headers=HEADERS,
#                       json={"name": "price", "display_name": "–¶–µ–Ω–∞", "value_type": "float"}).raise_for_status()
#         requests.post(f"{API_BASE_URL}/api/meta/entity-types/{ids['type_id']}/attributes", headers=HEADERS,
#                       json={"name": "quantity", "display_name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
#                             "value_type": "integer"}).raise_for_status()
#
#         initial_formula = "{price} * {quantity}"
#         total_resp = requests.post(
#             f"{API_BASE_URL}/api/meta/entity-types/{ids['type_id']}/attributes", headers=HEADERS,
#             json={"name": "total", "display_name": "–ò—Ç–æ–≥–æ", "value_type": "formula", "formula_text": initial_formula}
#         )
#         total_resp.raise_for_status()
#         ids["total_attr_id"] = total_resp.json()["id"]
#
#         print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (—Ç–∞–±–ª–∏—Ü–∞ –∏ –∫–æ–ª–æ–Ω–∫–∏) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
#
#         # --- –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
#         print("\n--- –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–¶–µ–Ω–∞=100, –ö–æ–ª-–≤–æ=2) ---")
#         requests.post(f"{API_BASE_URL}/api/data/{TABLE_NAME}", headers=HEADERS,
#                       json={"price": 100.0, "quantity": 2}).raise_for_status()
#         print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
#
#         # --- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
#         print("\n--- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –ù–ê–ß–ê–õ–¨–ù–û–ô —Ñ–æ—Ä–º—É–ª–µ ---")
#         get_resp_1 = requests.get(f"{API_BASE_URL}/api/data/{TABLE_NAME}", headers=HEADERS)
#         get_resp_1.raise_for_status()
#         initial_result = get_resp_1.json()[0]['total']
#         print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {initial_result}")
#         assert initial_result == 200.0
#
#         # --- –®–∞–≥ 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–û–†–ú–£–õ–´ ---
#         print("\n--- –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ PUT-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã ---")
#         new_formula = "({price} * {quantity}) * 1.2"
#         update_payload = {"formula_text": new_formula}
#
#         update_resp = requests.put(
#             f"{API_BASE_URL}/api/meta/entity-types/{ids['type_id']}/attributes/{ids['total_attr_id']}",
#             headers=HEADERS, json=update_payload
#         )
#         update_resp.raise_for_status()
#         print(f"‚úÖ –§–æ—Ä–º—É–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: '{new_formula}'")
#
#         # --- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
#         print("\n--- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–æ –ù–û–í–û–ô —Ñ–æ—Ä–º—É–ª–µ ---")
#         get_resp_2 = requests.get(f"{API_BASE_URL}/api/data/{TABLE_NAME}", headers=HEADERS)
#         get_resp_2.raise_for_status()
#         final_result = get_resp_2.json()[0]['total']
#         print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_result}")
#         assert final_result == 240.0
#
#         print("\nüéâüéâüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. üéâüéâüéâ")
#
#     except requests.exceptions.RequestException as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
#         if e.response is not None:
#             print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e.response.status_code}")
#             print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
#     except (AssertionError, KeyError, IndexError):
#         print("\n‚ùå –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É.")
#     finally:
#         # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
#         cleanup_test_tables([TABLE_NAME])
#
#
# if __name__ == "__main__":
#     run_demo()


print(56+7)