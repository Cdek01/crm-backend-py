import requests
import json
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://127.0.0.1:8000"
# BASE_URL = "http://89.111.169.47:8005"

CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"


def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}"); exit(1)
def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)

def register_and_login():
    unique_id = int(time.time())
    email = f"976@example.com"
    password = "AntonShlips97(1985)"
    reg_payload = {"email": email, "password": password, "full_name": "Select Tester",
                   "registration_token": CORRECT_REGISTRATION_TOKEN}
    requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
    auth_payload = {'username': email, 'password': password}
    token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
    return {'Authorization': f'Bearer {token}'}


def run_text_select_test():
    try:
        # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
        print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
        headers = register_and_login()

        table_name = f"requests_{int(time.time())}"
        table_config = {"name": table_name, "display_name": "–ó–∞—è–≤–∫–∏ (text select)"}
        table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']

        options_to_create = ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]
        attribute_payload = {
            "name": "request_type",
            "display_name": "–¢–∏–ø –∑–∞—è–≤–∫–∏",
            "value_type": "select",
            "list_items": options_to_create
        }
        requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
                      json=attribute_payload).raise_for_status()
        print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å –∫–æ–ª–æ–Ω–∫–æ–π-—Å–ø–∏—Å–∫–æ–º.")

        # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê ---
        print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò –° –¢–ï–ö–°–¢–û–í–´–ú –ó–ù–ê–ß–ï–ù–ò–ï–ú")

        payload1 = {"request_type": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"}
        record_id_1 = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=payload1).json()[0]['id']

        payload2 = {"request_type": "–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ"}
        requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=payload2).raise_for_status()

        record_1_data = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id_1}", headers=headers).json()

        print(f" -> –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å #{record_id_1}. –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{record_1_data.get('request_type')}'")
        print_status(record_1_data.get('request_type') == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

        # --- –®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï ---
        print_header("–®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò")

        update_payload = {"request_type": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"}
        requests.put(f"{BASE_URL}/api/data/{table_name}/{record_id_1}", headers=headers,
                     json=update_payload).raise_for_status()

        updated_record_data = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id_1}", headers=headers).json()
        print(f" -> –ó–∞–ø–∏—Å—å #{record_id_1} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{updated_record_data.get('request_type')}'")
        print_status(updated_record_data.get('request_type') == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

        # --- –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò ---
        print_header("–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò (–ù–ï–ì–ê–¢–ò–í–ù–´–ô –¢–ï–°–¢)")

        invalid_payload = {"request_type": "–°–ø–∞–º"}
        invalid_resp = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=invalid_payload)

        print(f" -> –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '–°–ø–∞–º'. –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {invalid_resp.status_code}")
        print(f" -> –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {invalid_resp.text}")
        print_status(
            invalid_resp.status_code == 400,
            "–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (—Å—Ç–∞—Ç—É—Å 400)."
        )

        # --- –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò ---
        print_header("–®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –¢–ï–ö–°–¢–£")

        print("\n -> –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' (–æ–∂–∏–¥–∞–µ—Ç—Å—è 1)")
        filters1 = [{"field": "request_type", "value": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"}]
        resp1 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers,
                             params={"filters": json.dumps(filters1)}).json()
        print_status(len(resp1) == 1, f"–ù–∞–π–¥–µ–Ω–æ {len(resp1)} –∑–∞–ø–∏—Å–µ–π.")

        print("\n -> –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0)")
        filters2 = [{"field": "request_type", "value": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"}]
        resp2 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers,
                             params={"filters": json.dumps(filters2)}).json()
        print_status(len(resp2) == 0, f"–ù–∞–π–¥–µ–Ω–æ {len(resp2)} –∑–∞–ø–∏—Å–µ–π.")

        print("\n" + "=" * 60)
        print("üéâüéâüéâ –¢–ï–°–¢ –í–´–ü–ê–î–ê–Æ–©–ò–• –°–ü–ò–°–ö–û–í –° –¢–ï–ö–°–¢–û–ú –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")


# ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ `register_and_login`, `print_status`, `print_header`)

if __name__ == "__main__":
    run_text_select_test()




















# def run_inline_select_test():
#     try:
#         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
#         print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
#         headers = register_and_login()
#
#         table_name = f"tasks_inline_select_{int(time.time())}"
#         table_config = {"name": table_name, "display_name": "–ó–∞–¥–∞—á–∏ (inline select —Ç–µ—Å—Ç)"}
#         table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']
#
#         print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å ID: {table_id}")
#
#         # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ö–û–õ–û–ù–ö–ò-–°–ü–ò–°–ö–ê –û–î–ù–ò–ú –ó–ê–ü–†–û–°–û–ú ---
#         print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ö–û–õ–û–ù–ö–ò –° –û–ü–¶–ò–Ø–ú–ò")
#
#         options_to_create = ["To Do", "In Progress", "Done"]
#         attribute_payload = {
#             "name": "task_status",
#             "display_name": "–°—Ç–∞—Ç—É—Å",
#             "value_type": "select",
#             "list_items": options_to_create
#         }
#
#         url = f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes"
#         create_attr_response = requests.post(url, headers=headers, json=attribute_payload)
#         create_attr_response.raise_for_status()
#
#         created_attribute = create_attr_response.json()
#         print_status(True, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.{created_attribute}")
#
#         # --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ö–û–õ–û–ù–ö–ò ---
#         print_header("–®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ô –ö–û–õ–û–ù–ö–ò")
#
#         # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
#         table_details = requests.get(f"{BASE_URL}/api/meta/entity-types/{table_id}", headers=headers).json()
#
#         # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à –∞—Ç—Ä–∏–±—É—Ç
#         status_attribute = next((attr for attr in table_details['attributes'] if attr['name'] == 'task_status'), None)
#
#         print_status(status_attribute is not None, "–ö–æ–ª–æ–Ω–∫–∞ 'task_status' –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã.")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–ø–∏—Å–∫–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω
#         select_list_id = status_attribute.get('select_list_id')
#         print(f" -> ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {select_list_id}")
#         print_status(
#             select_list_id is not None and isinstance(select_list_id, int),
#             "–ö–æ–ª–æ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–ø—Ü–∏–π (select_list_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)."
#         )
#
#         # --- –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –°–ü–ò–°–ö–ê ---
#         print_header("–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ù–ù–û–ì–û –°–ü–ò–°–ö–ê –û–ü–¶–ò–ô")
#
#         list_details_url = f"{BASE_URL}/api/meta/select-lists/{select_list_id}"
#         list_details_response = requests.get(list_details_url, headers=headers)
#         list_details_response.raise_for_status()
#         list_data = list_details_response.json()
#
#         print(f" -> –ü–æ–ª—É—á–µ–Ω—ã –æ–ø—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ ID={select_list_id}: {list_data}")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
#         print_status(
#             len(list_data.get('options', [])) == len(options_to_create),
#             f"–°–æ–∑–¥–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–π ({len(options_to_create)})."
#         )
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
#         option_values = {opt['value'] for opt in list_data.get('options', [])}
#         print_status(
#             option_values == set(options_to_create),
#             "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–ø—Ü–∏–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –≤ `list_items`."
#         )
#
#         print("\n" + "=" * 60)
#         print("üéâüéâüéâ –¢–ï–°–¢ –ê–í–¢–û–°–û–ó–î–ê–ù–ò–Ø –°–ü–ò–°–ö–û–í –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP: {e.response.status_code} - {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
#
#
# # ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ `register_and_login`, `print_status`, `print_header`)
#
# if __name__ == "__main__":
#     run_inline_select_test()