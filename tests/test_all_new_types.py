# import requests
# import json
# import time
# from datetime import datetime
# from unittest.mock import patch
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# BASE_URL = "http://127.0.0.1:8000"
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
#
#
#
# def print_status(ok, message):
#     if ok:
#         print(f"‚úÖ [PASS] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}"); exit(1)
#
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
# def register_and_login():
#     unique_id = int(time.time())
#     email = f"select_tester_{unique_id}@example.com"
#     password = "password123"
#     reg_payload = {"email": email, "password": password, "full_name": "Select Tester",
#                    "registration_token": CORRECT_REGISTRATION_TOKEN}
#     requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
#     auth_payload = {'username': email, 'password': password}
#     token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
#     return {'Authorization': f'Bearer {token}'}
#
#
# def get_current_state(headers, table_name):
#     """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ."""
#     response = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers)
#     response.raise_for_status()
#     return response.json()
#
#
# def move_task(headers, table_name, current_state, task_to_move_id, after_task_id, before_task_id):
#     """–≠–º—É–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏."""
#     after_pos = None
#     if after_task_id:
#         after_pos = next(item['position'] for item in current_state if item['id'] == after_task_id)
#
#     before_pos = None
#     if before_task_id:
#         before_pos = next(item['position'] for item in current_state if item['id'] == before_task_id)
#
#     payload = {
#         "entity_id": task_to_move_id,
#         "after_position": after_pos,
#         "before_position": before_pos
#     }
#
#     url = f"{BASE_URL}/api/data/{table_name}/position"
#     response = requests.post(url, headers=headers, json=payload)
#     response.raise_for_status()
#     print(f" -> –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ID {task_to_move_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {response.json().get('new_position')}")
#
#
# def verify_order(state, expected_ids, test_name):
#     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ ID –≤ `state` —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç `expected_ids`."""
#     actual_ids = [item['id'] for item in state]
#     print(f" -> –û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫: {expected_ids}")
#     print(f" -> –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫: {actual_ids}")
#     print_status(actual_ids == expected_ids, test_name)
#
#
# # --- –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ ---
# @patch('services.external_api_client.send_update_to_colleague')
# # @patch('services.eav_service.external_api_client.send_update_to_colleague')
# def run_full_ordering_test(mock_send_update):
#     try:
#         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
#         print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
#         headers = register_and_login()
#
#         table_name = f"tasks_full_order_{int(time.time())}"
#         table_config = {"name": table_name, "display_name": "–ó–∞–¥–∞—á–∏ (–ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)"}
#         table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']
#         requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
#                       json={"name": "title", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "value_type": "string"}).raise_for_status()
#
#         # --- –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ù–ê–ß–ê–õ–û ---
#         print_header("–®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê, –ß–¢–û –ù–û–í–´–ï –ó–ê–ü–ò–°–ò –î–û–ë–ê–í–õ–Ø–Æ–¢–°–Ø –í–í–ï–†–•")
#
#         # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
#         id_a = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json={"title": "–ó–∞–¥–∞—á–∞ –ê"}).json()[
#             'id']
#         state1 = get_current_state(headers, table_name)
#         print(" -> –°–æ–∑–¥–∞–Ω–∞ '–ó–∞–¥–∞—á–∞ –ê'. –¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫:", [item['id'] for item in state1])
#         print_status(state1[0]['id'] == id_a, "–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ.")
#
#         # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—å
#         id_b = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json={"title": "–ó–∞–¥–∞—á–∞ –ë"}).json()[
#             'id']
#         state2 = get_current_state(headers, table_name)
#         print(" -> –°–æ–∑–¥–∞–Ω–∞ '–ó–∞–¥–∞—á–∞ –ë'. –¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫:", [item['id'] for item in state2])
#         print_status(state2[0]['id'] == id_b, "–í—Ç–æ—Ä–∞—è (–Ω–æ–≤–∞—è) –∑–∞–ø–∏—Å—å —Ç–µ–ø–µ—Ä—å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ.")
#         print_status(state2[1]['id'] == id_a, "–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Å–¥–≤–∏–Ω—É–ª–∞—Å—å –Ω–∞ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ.")
#
#         # --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê DRAG-N-DROP –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ---
#         print_header("–®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê DRAG-N-DROP –ò –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
#
#         # –ü–µ—Ä–µ–º–µ—â–∞–µ–º '–ó–∞–¥–∞—á—É –ë' (–∫–æ—Ç–æ—Ä–∞—è —Å–µ–π—á–∞—Å –ø–µ—Ä–≤–∞—è) –≤ –∫–æ–Ω–µ—Ü, –ø–æ—Å–ª–µ '–ó–∞–¥–∞—á–∏ –ê'
#         print("\n -> –ü–µ—Ä–µ–º–µ—â–∞–µ–º '–ó–∞–¥–∞—á—É –ë' –≤ –∫–æ–Ω–µ—Ü...")
#         move_task(headers, table_name, state2, task_to_move_id=id_b, after_task_id=id_a, before_task_id=None)
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
#         state3 = get_current_state(headers, table_name)
#         expected_order = [id_a, id_b]
#         verify_order(state3, expected_order, "–ü–æ—Ä—è–¥–æ–∫ '–ê, –ë' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
#         # (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—ã –ù–ï —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∫–æ–ª–ª–µ–≥—É –æ —Å–º–µ–Ω–µ –ø–æ—Ä—è–¥–∫–∞)
#         # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ `set_entity_order`.
#         try:
#             mock_send_update.assert_not_called()
#             print_status(True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ—Ä—è–¥–∫–∞ (—ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ).")
#         except AssertionError:
#             print_status(False, "–û–®–ò–ë–ö–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ—Ä—è–¥–∫–∞.")
#
#         # --- –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –î–ê–ù–ù–´–• ---
#         print_header("–®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –î–ê–ù–ù–´–•")
#
#         # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫
#         mock_send_update.reset_mock()
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ
#         print("\n -> –û–±–Ω–æ–≤–ª—è–µ–º '–ó–∞–¥–∞—á—É –ê'...")
#         update_payload = {"title": "–ó–∞–¥–∞—á–∞ –ê (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)"}
#         requests.put(f"{BASE_URL}/api/data/{table_name}/{id_a}", headers=headers,
#                      json=update_payload).raise_for_status()
#
#         # –î–∞–µ–º Celery –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª—å—à–µ)
#         time.sleep(1)
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
#         try:
#             mock_send_update.assert_called_once()
#             print_status(True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
#             # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
#             call_args, call_kwargs = mock_send_update.call_args
#             print(f"   -> –ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞: {call_kwargs}")
#             print_status(
#                 call_kwargs.get('event_type') == 'update' and call_kwargs.get('entity_id') == id_a,
#                 "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."
#             )
#         except AssertionError:
#             print_status(False, "–û–®–ò–ë–ö–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
#
#         print("\n" + "=" * 60)
#         print("üéâüéâüéâ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–û–†–¢–ò–†–û–í–ö–ò –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–†–û–ô–î–ï–ù! üéâüéâüéâ")
#
#     except Exception as e:
#         print()
#
#
#
# if __name__ == "__main__":
#     run_full_ordering_test()







import requests
import json
import time
from datetime import datetime
from unittest.mock import patch

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://127.0.0.1:8000"
CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"



def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}"); exit(1)


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)

def register_and_login():
    unique_id = int(time.time())
    email = f"select_tester_{unique_id}@example.com"
    password = "password123"
    reg_payload = {"email": email, "password": password, "full_name": "Select Tester",
                   "registration_token": CORRECT_REGISTRATION_TOKEN}
    requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
    auth_payload = {'username': email, 'password': password}
    token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
    return {'Authorization': f'Bearer {token}'}


def run_multiselect_test():
    try:
        # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
        print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø, –°–û–ó–î–ê–ù–ò–ï –°–ü–ò–°–ö–ê –ò –¢–ê–ë–õ–ò–¶–´")
        headers = register_and_login()

        # 1.1 –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ "–¢–µ–≥–∏ –¥–ª—è –∑–∞–¥–∞—á"
        list_payload = {"name": "–¢–µ–≥–∏ –¥–ª—è –∑–∞–¥–∞—á"}
        list_resp = requests.post(f"{BASE_URL}/api/meta/select-lists/", headers=headers, json=list_payload).json()
        list_id = list_resp['id']

        options_map = {}  # { "text": id }
        for option_text in ["–°—Ä–æ—á–Ω–æ", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "VIP", "–û—Ç—á–µ—Ç"]:
            opt_payload = {"value": option_text}
            opt_resp = requests.post(f"{BASE_URL}/api/meta/select-lists/{list_id}/options", headers=headers,
                                     json=opt_payload).json()
            options_map[option_text] = opt_resp['id']

        # 1.2 –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table_name = f"tasks_ms_{int(time.time())}"
        table_config = {"name": table_name, "display_name": "–ó–∞–¥–∞—á–∏ (multiselect —Ç–µ—Å—Ç)"}
        table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']

        attributes = [
            {"name": "title", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "value_type": "string"},
            {"name": "tags", "display_name": "–¢–µ–≥–∏", "value_type": "multiselect", "select_list_id": list_id},
        ]
        for attr in attributes:
            requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
                          json=attr).raise_for_status()

        print_status(True, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê ---
        print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò –° –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –¢–ï–ì–ê–ú–ò")

        payload_a = {"title": "–ó–∞–¥–∞—á–∞ –ê", "tags": [options_map["–°—Ä–æ—á–Ω–æ"], options_map["VIP"]]}
        record_id_a = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=payload_a).json()[0][
            'id']

        record_a = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id_a}", headers=headers).json()
        tags_a = {tag['id'] for tag in record_a.get('tags', [])}

        print(f" -> –°–æ–∑–¥–∞–Ω–∞ '–ó–∞–¥–∞—á–∞ –ê' —Å —Ç–µ–≥–∞–º–∏ ID: {tags_a}")
        print_status(len(tags_a) == 2, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print_status(options_map["–°—Ä–æ—á–Ω–æ"] in tags_a and options_map["VIP"] in tags_a,
                     "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–≥–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

        # --- –®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï (–î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–ì–ê) ---
        print_header("–®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò (–î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–ì–ê)")

        update_payload_1 = {"tags": [options_map["–°—Ä–æ—á–Ω–æ"], options_map["VIP"], options_map["–û—Ç—á–µ—Ç"]]}
        requests.put(f"{BASE_URL}/api/data/{table_name}/{record_id_a}", headers=headers,
                     json=update_payload_1).raise_for_status()

        record_a_updated_1 = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id_a}", headers=headers).json()
        tags_a_updated_1 = {tag['id'] for tag in record_a_updated_1.get('tags', [])}

        print(f" -> '–ó–∞–¥–∞—á–∞ –ê' –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Ç–µ–≥–∏: {tags_a_updated_1}")
        print_status(len(tags_a_updated_1) == 3, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print_status(options_map["–û—Ç—á–µ—Ç"] in tags_a_updated_1, "–ù–æ–≤—ã–π —Ç–µ–≥ '–û—Ç—á–µ—Ç' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

        # --- –®–ê–ì 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï (–£–î–ê–õ–ï–ù–ò–ï –¢–ï–ì–ê) ---
        print_header("–®–ê–ì 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò (–£–î–ê–õ–ï–ù–ò–ï –¢–ï–ì–ê)")

        update_payload_2 = {"tags": [options_map["–°—Ä–æ—á–Ω–æ"], options_map["–û—Ç—á–µ—Ç"]]}
        requests.put(f"{BASE_URL}/api/data/{table_name}/{record_id_a}", headers=headers,
                     json=update_payload_2).raise_for_status()

        record_a_updated_2 = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id_a}", headers=headers).json()
        tags_a_updated_2 = {tag['id'] for tag in record_a_updated_2.get('tags', [])}

        print(f" -> '–ó–∞–¥–∞—á–∞ –ê' –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Ç–µ–≥–∏: {tags_a_updated_2}")
        print_status(len(tags_a_updated_2) == 2, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print_status(options_map["VIP"] not in tags_a_updated_2, "–¢–µ–≥ 'VIP' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

        # --- –®–ê–ì 5: –û–ß–ò–°–¢–ö–ê ---
        print_header("–®–ê–ì 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò (–û–ß–ò–°–¢–ö–ê –°–ü–ò–°–ö–ê –¢–ï–ì–û–í)")

        update_payload_3 = {"tags": []}  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        requests.put(f"{BASE_URL}/api/data/{table_name}/{record_id_a}", headers=headers,
                     json=update_payload_3).raise_for_status()

        record_a_updated_3 = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_id_a}", headers=headers).json()
        tags_a_updated_3 = record_a_updated_3.get('tags', [])

        print(f" -> '–ó–∞–¥–∞—á–∞ –ê' –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Ç–µ–≥–∏: {tags_a_updated_3}")
        print_status(len(tags_a_updated_3) == 0, "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")

        print("\n" + "=" * 60)
        print("üéâüéâüéâ –¢–ï–°–¢ –¢–ò–ü–ê 'MULTISELECT' –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")


# ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ `register_and_login`, `print_status`, `print_header`)

if __name__ == "__main__":
    run_multiselect_test()






