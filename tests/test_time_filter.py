# import requests
# import json
# import time
#
# # --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# BASE_URL = "http://89.111.169.47:8005"
# CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"
#
#
# # -----------------
# def print_status(ok, message):
#     if ok:
#         print(f"‚úÖ [PASS] {message}")
#     else:
#         print(f"‚ùå [FAIL] {message}"); exit(1)
#
#
# def print_header(title):
#     print("\n" + "=" * 60)
#     print(f" {title} ".center(60, "="))
#     print("=" * 60)
#
# # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# # ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ `print_status`, `print_header`, `register_and_login`)
#
# def run_time_filter_test():
#     try:
#         # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
#         print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´")
#         headers = register_and_login()
#
#         table_name = f"meetings_{int(time.time())}"
#         table_config = {"name": table_name, "display_name": "–í—Å—Ç—Ä–µ—á–∏ (time —Ç–µ—Å—Ç)"}
#         table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']
#
#         attributes = [
#             {"name": "topic", "display_name": "–¢–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏", "value_type": "string"},
#             {"name": "start_time", "display_name": "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", "value_type": "time"},
#         ]
#         for attr in attributes:
#             requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
#                           json=attr).raise_for_status()
#
#         # --- –®–ê–ì 2: –ù–ê–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ---
#         print_header("–®–ê–ì 2: –ù–ê–ü–û–õ–ù–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –î–ê–ù–ù–´–ú–ò –û –í–°–¢–†–ï–ß–ê–•")
#
#         test_data = [
#             {"topic": "–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω–µ—Ä", "start_time": "09:00:00"},
#             {"topic": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂", "start_time": "11:30:00"},
#             {"topic": "–û–±–µ–¥", "start_time": "14:00:00"},
#             {"topic": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º", "start_time": "15:00:00"},
#             {"topic": "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç", "start_time": "18:00:00"},
#         ]
#         for item in test_data:
#             requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=item).raise_for_status()
#
#         print_status(True, "5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
#
#         # --- –®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–û–í ---
#         print_header("–®–ê–ì 3: –¢–ï–°–¢–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –í–†–ï–ú–ï–ù–ò")
#
#         # –¢–µ—Å—Ç 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
#         print("\n -> –¢–µ—Å—Ç 1: –ù–∞–π—Ç–∏ –≤—Å—Ç—Ä–µ—á—É —Ä–æ–≤–Ω–æ –≤ 14:00 (–æ–∂–∏–¥–∞–µ—Ç—Å—è 1)")
#         filters1 = [{"field": "start_time", "op": "is", "value": "14:00:00"}]
#         resp1 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers,
#                              params={"filters": json.dumps(filters1)}).json()
#         print_status(len(resp1) == 1 and resp1[0]['topic'] == "–û–±–µ–¥", f"–ù–∞–π–¥–µ–Ω–æ {len(resp1)} –∑–∞–ø–∏—Å–µ–π.")
#
#         # –¢–µ—Å—Ç 2: –ü–æ—Å–ª–µ
#         print("\n -> –¢–µ—Å—Ç 2: –ù–∞–π—Ç–∏ –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ—Å–ª–µ 12:00 (–æ–∂–∏–¥–∞–µ—Ç—Å—è 3)")
#         filters2 = [{"field": "start_time", "op": "is_after", "value": "12:00:00"}]
#         resp2 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers,
#                              params={"filters": json.dumps(filters2)}).json()
#         print_status(len(resp2) == 3, f"–ù–∞–π–¥–µ–Ω–æ {len(resp2)} –∑–∞–ø–∏—Å–µ–π.")
#
#         # –¢–µ—Å—Ç 3: –í–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –¥–æ
#         print("\n -> –¢–µ—Å—Ç 3: –ù–∞–π—Ç–∏ –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ 15:00 –∏–ª–∏ —Ä–∞–Ω—å—à–µ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 4)")
#         filters3 = [{"field": "start_time", "op": "is_on_or_before", "value": "15:00:00"}]
#         resp3 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers,
#                              params={"filters": json.dumps(filters3)}).json()
#         print_status(len(resp3) == 4, f"–ù–∞–π–¥–µ–Ω–æ {len(resp3)} –∑–∞–ø–∏—Å–µ–π.")
#
#         # –¢–µ—Å—Ç 4: –î–∏–∞–ø–∞–∑–æ–Ω
#         print("\n -> –¢–µ—Å—Ç 4: –ù–∞–π—Ç–∏ –≤—Å—Ç—Ä–µ—á–∏ –º–µ–∂–¥—É 10:00 –∏ 15:00 (–æ–∂–∏–¥–∞–µ—Ç—Å—è 3)")
#         filters4 = [{"field": "start_time", "op": "is_within", "value": ["10:00:00", "15:00:00"]}]
#         resp4 = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers,
#                              params={"filters": json.dumps(filters4)}).json()
#         print_status(len(resp4) == 3, f"–ù–∞–π–¥–µ–Ω–æ {len(resp4)} –∑–∞–ø–∏—Å–µ–π.")
#
#         print("\n" + "=" * 60)
#         print("üéâüéâüéâ –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –í–†–ï–ú–ï–ù–ò –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
#
#     except requests.exceptions.HTTPError as e:
#         print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP: {e.response.status_code} - {e.response.text}")
#     except Exception as e:
#         print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –í –°–ö–†–ò–ü–¢–ï: {e}")
#
# def register_and_login():
#     unique_id = int(time.time())
#     email = f"bool_tester_{unique_id}@example.com"
#     password = "password123"
#     reg_payload = {"email": email, "password": password, "full_name": "Boolean Tester",
#                    "registration_token": CORRECT_REGISTRATION_TOKEN}
#     requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
#     auth_payload = {'username': email, 'password': password}
#     token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
#     return {'Authorization': f'Bearer {token}'}
#
# if __name__ == "__main__":
#     run_time_filter_test()













# –Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫


import requests
import time
import sys
import json

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://89.111.169.47:8005"
EMAIL = "1@example.com"
PASSWORD = "string"
# -----------------

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
test_failed = False  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫


def print_status(ok, message):
    global test_failed
    if ok:
        print(f"‚úÖ [OK] {message}")
    else:
        print(f"‚ùå [FAIL] {message}\n")
        test_failed = True


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


def login():
    try:
        auth_payload = {'username': EMAIL, 'password': PASSWORD}
        token_resp = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
        token_resp.raise_for_status()
        return {'Authorization': f'Bearer {token_resp.json()["access_token"]}'}
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ---
def run_blank_filter_test():
    headers = login()
    if not headers: return

    ids = {}
    table_name = f"blank_filter_test_{int(time.time())}"

    try:
        # --- –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
        print_header("–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∫–æ–ª–æ–Ω–∫–∏
        type_resp = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers,
                                  json={"name": table_name, "display_name": "–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—É—Å—Ç–æ—Ç–µ"})
        type_resp.raise_for_status();
        ids['table_id'] = type_resp.json()["id"]

        requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['table_id']}/attributes", headers=headers,
                      json={"name": "contact_name", "display_name": "–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞",
                            "value_type": "string"}).raise_for_status()
        requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['table_id']}/attributes", headers=headers,
                      json={"name": "phone_number", "display_name": "–¢–µ–ª–µ—Ñ–æ–Ω",
                            "value_type": "string"}).raise_for_status()

        # –ù–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏: 2 —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, 1 –±–µ–∑.
        # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫–ª—é—á 'phone_number'.
        requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers,
                      json={"contact_name": "–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", "phone_number": "79001112233"}).raise_for_status()
        requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers,
                      json={"contact_name": "–ö–æ–Ω—Ç–∞–∫—Ç –ë–ï–ó —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}).raise_for_status()
        requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers,
                      json={"contact_name": "–ï—â–µ –æ–¥–∏–Ω —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", "phone_number": "79998887766"}).raise_for_status()

        print_status(True, "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (2 —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, 1 –±–µ–∑) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        # --- –¢–ï–°–¢ 1: –§–∏–ª—å—Ç—Ä –ø–æ –ü–£–°–¢–û–ú–£ –∑–Ω–∞—á–µ–Ω–∏—é (op: 'blank') ---
        print_header("–¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π, –≥–¥–µ '–¢–µ–ª–µ—Ñ–æ–Ω' –ü–£–°–¢–û")

        filters_blank = [{"field": "phone_number", "op": "blank"}]
        params_blank = {'filters': json.dumps(filters_blank)}

        resp_blank = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params_blank)
        resp_blank.raise_for_status()
        data_blank = resp_blank.json()

        print(f" -> –ó–∞–ø—Ä–æ—Å: {resp_blank.url}")
        print(f" -> –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {data_blank.get('total')}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        print_status(data_blank.get('total') == 1, "–û–∂–∏–¥–∞–ª–∞—Å—å 1 –∑–∞–ø–∏—Å—å.")
        if data_blank.get('total') == 1:
            found_name = data_blank['data'][0].get('contact_name')
            print_status(
                found_name == "–ö–æ–Ω—Ç–∞–∫—Ç –ë–ï–ó —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                f"–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: '{found_name}'."
            )

        # --- –¢–ï–°–¢ 2: –§–∏–ª—å—Ç—Ä –ø–æ –ù–ï –ü–£–°–¢–û–ú–£ –∑–Ω–∞—á–µ–Ω–∏—é (op: 'not_blank') ---
        print_header("–¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π, –≥–¥–µ '–¢–µ–ª–µ—Ñ–æ–Ω' –ù–ï –ü–£–°–¢–û")

        filters_not_blank = [{"field": "phone_number", "op": "not_blank"}]
        params_not_blank = {'filters': json.dumps(filters_not_blank)}

        resp_not_blank = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params_not_blank)
        resp_not_blank.raise_for_status()
        data_not_blank = resp_not_blank.json()

        print(f" -> –ó–∞–ø—Ä–æ—Å: {resp_not_blank.url}")
        print(f" -> –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {data_not_blank.get('total')}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        print_status(data_not_blank.get('total') == 2, "–û–∂–∏–¥–∞–ª–æ—Å—å 2 –∑–∞–ø–∏—Å–∏.")
        if data_not_blank.get('total') == 2:
            found_names = {row.get('contact_name') for row in data_not_blank['data']}
            expected_names = {"–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", "–ï—â–µ –æ–¥–∏–Ω —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º"}
            print_status(
                found_names == expected_names,
                f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {found_names}"
            )

    except requests.exceptions.HTTPError as e:
        print_status(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HTTP: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print_status(False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # --- –û–ß–ò–°–¢–ö–ê ---
        if 'table_id' in ids:
            print_header("–û—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã)")
            requests.delete(f"{BASE_URL}/api/meta/entity-types/{ids['table_id']}", headers=headers)
            print(f" -> –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —É–¥–∞–ª–µ–Ω–∞.")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        if not test_failed:
            print("\n" + "üéâ" * 20 + "\n –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ (–Ω–µ)–ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø—Ä–æ–π–¥–µ–Ω—ã! \n" + "üéâ" * 20)
        else:
            sys.exit(1)


if __name__ == "__main__":
    run_blank_filter_test()