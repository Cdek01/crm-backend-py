
import requests
import time
import random
from faker import Faker
from tqdm import tqdm

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å–µ–∫—Ü–∏—é) ---
BASE_URL = "http://89.111.169.47:8005"
CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ---
# –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ ( > 1000) –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –û–ß–ï–ù–¨ –¥–æ–ª–≥–æ.
NUM_ROWS_TO_CREATE = 10000
NUM_COLUMNS = 30
# -------------------------------------------

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
fake = Faker('ru_RU')


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞) ---
def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}");
        exit(1)


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


def register_and_login():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    unique_id = int(time.time())
    email = f"1@example.com"
    password = "string"

    try:

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        auth_payload = {'username': email, 'password': password}
        token_response = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
        token_response.raise_for_status()

        token = token_response.json()['access_token']
        print_status(True, f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}")
        return {'Authorization': f'Bearer {token}'}
    except requests.exceptions.HTTPError as e:
        print_status(False, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e.response.text}")
    except Exception as e:
        print_status(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def run_data_loading():
    table_id = None
    headers = None

    try:
        # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
        print_header(f"–ü–û–î–ì–û–¢–û–í–ö–ê: –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –° {NUM_COLUMNS} –ö–û–õ–û–ù–ö–ê–ú–ò")
        headers = register_and_login()

        table_name = f"load_test_{int(time.time())}"
        table_config = {"name": table_name, "display_name": f"–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç ({NUM_ROWS_TO_CREATE} —Å—Ç—Ä–æ–∫)"}

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table_resp = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config)
        table_resp.raise_for_status()
        table_id = table_resp.json()['id']

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        created_attributes = []  # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å name –∏ value_type
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ {NUM_COLUMNS} –∫–æ–ª–æ–Ω–æ–∫...")
        for i in tqdm(range(NUM_COLUMNS), desc="–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫"):
            col_type = random.choice(["string", "integer", "float", "boolean", "date"])
            attr_config = {
                "name": f"col_{i + 1}_{col_type}",
                "display_name": f"–ö–æ–ª–æ–Ω–∫–∞ {i + 1} ({fake.word()})",
                "value_type": col_type
            }
            url = f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes"
            resp = requests.post(url, headers=headers, json=attr_config)
            resp.raise_for_status()
            created_attributes.append({"name": attr_config["name"], "type": col_type})

        print_status(True, f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å {len(created_attributes)} –∫–æ–ª–æ–Ω–∫–∞–º–∏.")

        # --- –®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
        print_header(f"–®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê {NUM_ROWS_TO_CREATE} –°–¢–†–û–ö –í –¢–ê–ë–õ–ò–¶–£")

        data_url = f"{BASE_URL}/api/data/{table_name}"

        for i in tqdm(range(NUM_ROWS_TO_CREATE), desc="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
            row_payload = {}
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
            for attr in created_attributes:
                if attr['type'] == 'string':
                    row_payload[attr['name']] = fake.company()
                elif attr['type'] == 'integer':
                    row_payload[attr['name']] = fake.random_int(min=1, max=10000)
                elif attr['type'] == 'float':
                    row_payload[attr['name']] = fake.pyfloat(left_digits=5, right_digits=2, positive=True)
                elif attr['type'] == 'boolean':
                    row_payload[attr['name']] = random.choice([True, False])
                elif attr['type'] == 'date':
                    row_payload[attr['name']] = fake.date_this_year().isoformat()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            post_resp = requests.post(data_url, headers=headers, json=row_payload)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (5xx), —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –¥–æ–ª–≥–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            if post_resp.status_code >= 500:
                print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i + 1}: {post_resp.text}")
                break

        print_status(True, f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ {NUM_ROWS_TO_CREATE} —Å—Ç—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")

        print("\n" + "=" * 60)
        print("üéâüéâüéâ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê! üéâüéâüéâ")
        print(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' (ID: {table_id}) –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏.")
        print("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–µ —á–µ—Ä–µ–∑ API –∏–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


    except requests.exceptions.HTTPError as e:
        print_status(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HTTP: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print_status(False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    # finally:
    #     # --- –®–ê–ì 3: –û–ß–ò–°–¢–ö–ê (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
    #     # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ –æ—Å—Ç–∞–ª–∞—Å—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫
    #     if table_id and headers:
    #         print_header("–®–ê–ì 3: –û–ß–ò–°–¢–ö–ê (–£–î–ê–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –¢–ê–ë–õ–ò–¶–´)")
    #         cleanup_url = f"{BASE_URL}/api/meta/entity-types/{table_id}"
    #         requests.delete(cleanup_url, headers=headers)
    #         print(f"–¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å ID {table_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")


if __name__ == "__main__":
    run_data_loading()

















