import requests
import json
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://127.0.0.1:8000"
CORRECT_REGISTRATION_TOKEN = "your-super-secret-and-unique-token-12345"


# -----------------
def print_status(ok, message):
    if ok:
        print(f"‚úÖ [PASS] {message}")
    else:
        print(f"‚ùå [FAIL] {message}"); exit(1)


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)

def register_and_login():
    unique_id = int(time.time())
    email = f"select_tester_{unique_id}@example.com"
    password = "password123"
    reg_payload = {"email": email, "password": password, "full_name": "Select Tester",
                   "registration_token": CORRECT_REGISTRATION_TOKEN}
    requests.post(f"{BASE_URL}/api/auth/register", json=reg_payload).raise_for_status()
    auth_payload = {'username': email, 'password': password}
    token = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload).json()['access_token']
    return {'Authorization': f'Bearer {token}'}

def run_formula_test():
    try:
        # --- –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê ---
        print_header("–ü–û–î–ì–û–¢–û–í–ö–ê: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –° –§–û–†–ú–£–õ–û–ô")
        headers = register_and_login()

        table_name = f"order_lines_{int(time.time())}"
        table_config = {"name": table_name, "display_name": "–°—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞ (—Ñ–æ—Ä–º—É–ª—ã)"}
        table_id = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers, json=table_config).json()['id']

        attributes = [
            # –ö–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
            {"name": "price", "display_name": "–¶–µ–Ω–∞", "value_type": "float"},
            {"name": "quantity", "display_name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "value_type": "integer"},
            {"name": "discount", "display_name": "–°–∫–∏–¥–∫–∞", "value_type": "float"},
            # –ö–æ–ª–æ–Ω–∫–∞-—Ñ–æ—Ä–º—É–ª–∞
            {
                "name": "total",
                "display_name": "–ò—Ç–æ–≥–æ",
                "value_type": "formula",
                "formula_text": "{price} * {quantity} - {discount}"
            },
        ]
        for attr in attributes:
            requests.post(f"{BASE_URL}/api/meta/entity-types/{table_id}/attributes", headers=headers,
                          json=attr).raise_for_status()

        print_status(True, f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —Å –∫–æ–ª–æ–Ω–∫–æ–π-—Ñ–æ—Ä–º—É–ª–æ–π.")

        # --- –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–• ---
        print_header("–®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –í–´–ß–ò–°–õ–ï–ù–ò–ô")

        # –ó–∞–ø–∏—Å—å 1: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        payload1 = {"price": 100.0, "quantity": 2, "discount": 10.0}
        record_1_id = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=payload1).json()[0]['id']
        print(f" -> –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å #{record_1_id} —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")

        # –ó–∞–ø–∏—Å—å 2: –°–∫–∏–¥–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        payload2 = {"price": 50.0, "quantity": 5}  # `discount` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        record_2_id = requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers, json=payload2).json()[0]['id']
        print(f" -> –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å #{record_2_id} —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")

        # --- –®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–ß–ò–°–õ–ï–ù–ò–ô ---
        print_header("–®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–ß–ò–°–õ–ï–ù–ò–ô –ü–†–ò –ß–¢–ï–ù–ò–ò")

        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
        print("\n -> –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        record_1_data = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_1_id}", headers=headers).json()
        print(f"    - –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {record_1_data}")
        expected_total_1 = 100.0 * 2 - 10.0
        print_status(
            record_1_data.get('total') == expected_total_1,
            f"–§–æ—Ä–º—É–ª–∞ 'total' –≤—ã—á–∏—Å–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_total_1}, –ø–æ–ª—É—á–µ–Ω–æ: {record_1_data.get('total')}"
        )

        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—å
        print("\n -> –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        record_2_data = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_2_id}", headers=headers).json()
        print(f"    - –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {record_2_data}")
        print_status(
            record_2_data.get('total') is None,
            "–§–æ—Ä–º—É–ª–∞ 'total' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ None, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è."
        )

        # --- –®–ê–ì 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–°–ß–ï–¢–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò ---
        print_header("–®–ê–ì 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–°–ß–ï–¢–ê '–ù–ê –õ–ï–¢–£' –ü–û–°–õ–ï UPDATE")

        print(f"\n -> –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–ø–∏—Å–∏ #{record_1_id} —Å 2 –Ω–∞ 3...")
        update_payload = {"quantity": 3}
        requests.put(f"{BASE_URL}/api/data/{table_name}/{record_1_id}", headers=headers,
                     json=update_payload).raise_for_status()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        updated_record_1_data = requests.get(f"{BASE_URL}/api/data/{table_name}/{record_1_id}", headers=headers).json()
        print(f"    - –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {updated_record_1_data}")

        expected_new_total = 100.0 * 3 - 10.0
        print_status(
            updated_record_1_data.get('total') == expected_new_total,
            f"–§–æ—Ä–º—É–ª–∞ 'total' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_new_total}, –ø–æ–ª—É—á–µ–Ω–æ: {updated_record_1_data.get('total')}"
        )

        print("\n" + "=" * 60)
        print("üéâüéâüéâ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê '–§–û–†–ú–£–õ–´' –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û! üéâüéâüéâ")

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê HTTP: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print(f"\n‚ùå –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")


# ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ `register_and_login`, `print_status`, `print_header`)

if __name__ == "__main__":
    run_formula_test()