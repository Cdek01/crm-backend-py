import requests
import time
import sys
import json

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BASE_URL = "http://89.111.169.47:8005"
EMAIL = "1@example.com"
PASSWORD = "string"


# -----------------

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def print_status(ok, message):
    if ok:
        print(f"‚úÖ [OK] {message}")
    else:
        print(f"‚ùå [FAIL] {message}\n")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
        global test_failed
        test_failed = True


def print_header(title):
    print("\n" + "=" * 60)
    print(f" {title} ".center(60, "="))
    print("=" * 60)


def login():
    try:
        auth_payload = {'username': EMAIL, 'password': PASSWORD}
        token_resp = requests.post(f"{BASE_URL}/api/auth/token", data=auth_payload)
        token_resp.raise_for_status()
        return {'Authorization': f'Bearer {token_resp.json()["access_token"]}'}
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ---
def run_search_demo():
    global test_failed
    test_failed = False

    headers = login()
    if not headers: return

    ids = {}
    table_name = f"search_demo_{int(time.time())}"

    try:
        # --- –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
        print_header("–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∫–æ–ª–æ–Ω–∫–∏
        type_resp = requests.post(f"{BASE_URL}/api/meta/entity-types", headers=headers,
                                  json={"name": table_name, "display_name": "–î–µ–º–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"})
        type_resp.raise_for_status();
        ids['table_id'] = type_resp.json()["id"]

        requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['table_id']}/attributes", headers=headers,
                      json={"name": "company_name", "display_name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                            "value_type": "string"}).raise_for_status()
        requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['table_id']}/attributes", headers=headers,
                      json={"name": "phone", "display_name": "–¢–µ–ª–µ—Ñ–æ–Ω", "value_type": "string"}).raise_for_status()
        requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['table_id']}/attributes", headers=headers,
                      json={"name": "city", "display_name": "–ì–æ—Ä–æ–¥", "value_type": "string"}).raise_for_status()
        requests.post(f"{BASE_URL}/api/meta/entity-types/{ids['table_id']}/attributes", headers=headers,
                      json={"name": "order_id", "display_name": "ID –ó–∞–∫–∞–∑–∞",
                            "value_type": "integer"}).raise_for_status()

        # –ù–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers,
                      json={"company_name": "–û–û–û –†–æ–º–∞—à–∫–∞", "phone": "79001112233", "city": "–ú–æ—Å–∫–≤–∞",
                            "order_id": 101}).raise_for_status()
        requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers,
                      json={"company_name": "–ò–ü –í–∞—Å–∏–ª—å–∫–æ–≤", "phone": "79114445566", "city": "–°–ü–±",
                            "order_id": 102}).raise_for_status()
        requests.post(f"{BASE_URL}/api/data/{table_name}", headers=headers,
                      json={"company_name": "–û–û–û –°—Ç—Ä–æ–π-–¢—Ä–∞—Å—Ç", "phone": "79227778899", "city": "–ú–æ—Å–∫–≤–∞",
                            "order_id": 103}).raise_for_status()
        print_status(True, "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        # --- –®–ê–ì 2: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
        print_header("–®–∞–≥ 2: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

        test_queries = [
            {"description": "–ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ ('–û–û–û')", "q": "–û–û–û", "expected_count": 2},
            {"description": "–†–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫ ('—Ä–æ–º–∞—à–∫–∞')", "q": "—Ä–æ–º–∞—à–∫–∞", "expected_count": 1},
            {"description": "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ('79114445566')", "q": "79114445566", "expected_count": 1},
            {"description": "–ü–æ–∏—Å–∫ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID –∑–∞–∫–∞–∑–∞ ('103')", "q": "103", "expected_count": 1},
            {"description": "–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö ('–ê–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞')", "q": "–ê–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞", "expected_count": 0},
            {"description": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ ('–û–û–û' + —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É '–ú–æ—Å–∫–≤–∞')", "q": "–û–û–û",
             "filters": json.dumps([{"field": "city", "op": "eq", "value": "–ú–æ—Å–∫–≤–∞"}]), "expected_count": 2}
        ]

        for test in test_queries:
            print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test['description']} ---")

            params = {"q": test["q"]}
            if "filters" in test:
                params["filters"] = test["filters"]

            response = requests.get(f"{BASE_URL}/api/data/{table_name}", headers=headers, params=params)

            if response.status_code == 200:
                data = response.json()
                found_count = data.get('total', 0)
                print(f" -> –ó–∞–ø—Ä–æ—Å: {response.url}")
                print(f" -> –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {found_count} (–û–∂–∏–¥–∞–ª–æ—Å—å: {test['expected_count']})")
                if found_count > 0:
                    print(" -> –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    for item in data.get('data', []):
                        print(
                            f"    - ID: {item.get('id')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('company_name', 'N/A')}, –ì–æ—Ä–æ–¥: {item.get('city', 'N/A')}")
                print_status(found_count == test['expected_count'],
                             "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º.")
            else:
                print_status(False, f"–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π {response.status_code}: {response.text}")

    except requests.exceptions.HTTPError as e:
        print_status(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HTTP: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print_status(False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # --- –®–ê–ì 3: –û—á–∏—Å—Ç–∫–∞ ---
        if 'table_id' in ids:
            print_header("–®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã)")
            requests.delete(f"{BASE_URL}/api/meta/entity-types/{ids['table_id']}", headers=headers)
            print(f" -> –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ '{table_name}' —É–¥–∞–ª–µ–Ω–∞.")

        if not test_failed:
            print("\n" + "üéâ" * 20 + "\n –í—Å–µ —Ç–µ—Å—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! \n" + "üéâ" * 20)
        else:
            sys.exit(1)


if __name__ == "__main__":
    run_search_demo()